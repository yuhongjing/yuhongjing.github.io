<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>网站迁移</title>
      <link href="/2019/10/28/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/"/>
      <url>/2019/10/28/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<h2 id="网站迁移"><a href="#网站迁移" class="headerlink" title="网站迁移"></a>网站迁移</h2><p>本博客不再更新，全部内容已经迁移至新版博客。<br><a href="https://yuhongjing.github.io/library/">余鸿靖的手册小站</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>前端系列第10期-js数组骚操作</title>
      <link href="/2019/03/20/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC10%E6%9C%9F-js%E6%95%B0%E7%BB%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/20/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC10%E6%9C%9F-js%E6%95%B0%E7%BB%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要从应用讲一些数组api的骚操作，如一行代码就实现扁平化n维数组、数组去重、求数组最大值、数组求和、排序、对象和数组的转化等。<br><a id="more"></a></p><h3 id="扁平化n维数组"><a href="#扁平化n维数组" class="headerlink" title="扁平化n维数组"></a>扁平化n维数组</h3><h4 id="一行代码实现"><a href="#一行代码实现" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]].flat(<span class="number">2</span>) <span class="comment">// [1,2,3]</span></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]].flat(<span class="number">3</span>) <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line">[<span class="number">1</span>[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,,<span class="number">5</span>[...]]]].flat(<span class="literal">Infinity</span>) <span class="comment">// [1,2,3,4,5...n]</span></span><br></pre></td></tr></table></figure><p><code>Array.flat(n)</code>是ES10扁平数组的api，<code>n</code>表示维度,<code>n</code>值为<code>Infinity</code>时维度为无限大。</p><h4 id="一般方式实现"><a href="#一般方式实现" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">        arr = [].concat(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">flatten([<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]]) <span class="comment">// [1,2,3]</span></span><br><span class="line">flatten([<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]]) <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>实质是利用递归和数组合并的方式<code>concat</code>实现扁平。</p><h3 id="数组元素去重"><a href="#数组元素去重" class="headerlink" title="数组元素去重"></a>数组元素去重</h3><h4 id="一行代码实现-1"><a href="#一行代码实现-1" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])) <span class="comment">// [1,2,3,4]</span></span><br><span class="line">[...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])] <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><code>Set</code>是ES6新出来的一种定义不重复数组的数据类型。<br><code>Array.from</code>是将类数组转化为数组。<br><code>...</code>是扩展运算符，将<code>Set</code>里面的值转化为字符串。</p><h4 id="一般方式实现-1"><a href="#一般方式实现-1" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.distinct = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>,</span><br><span class="line">        result = [],</span><br><span class="line">        i,</span><br><span class="line">        j,</span><br><span class="line">        len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] === arr[j]) &#123;</span><br><span class="line">                j = ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>].distinct(); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>实质是新建立一个数组存值，循环两个数组值相比较。</p><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><h4 id="一行代码实现-2"><a href="#一行代码实现-2" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].sort() <span class="comment">// [1,2,3,4] 默认升序</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">// [4,3,2,1] 降序</span></span><br></pre></td></tr></table></figure><p><code>sort</code>是js内置的排序方法，参数为一个函数</p><h4 id="一般方法实现"><a href="#一般方法实现" class="headerlink" title="一般方法实现"></a>一般方法实现</h4><p>冒泡排序:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.bubleSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>,</span><br><span class="line">        len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> outer=len; outer&gt;= <span class="number">2</span>; outer--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> inner=<span class="number">0</span>; inner&lt;=outer<span class="number">-1</span>; inner++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[inner] &gt; arr[inner+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 升序</span></span><br><span class="line">                [arr[inner], arr[inner+<span class="number">1</span>]] = [arr[inner+<span class="number">1</span>], arr[inner]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>].bubleSort() <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure></p><p>选择排序:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.selectSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>;</span><br><span class="line">        len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i; j&lt;len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].selectSort(); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure></p><h3 id="寻找数组最大值"><a href="#寻找数组最大值" class="headerlink" title="寻找数组最大值"></a>寻找数组最大值</h3><h4 id="一行代码实现-3"><a href="#一行代码实现-3" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// 4</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function">(<span class="params">prev, cur, curIndex, arr</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev, cur);</span><br><span class="line">&#125;, <span class="number">0</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>Math.max()</code>是<code>Math</code>对象内置的方法，参数是字符串。<br><code>reduce</code>是ES5的数组的api，参数有函数和默认初始值。<br>函数有四个参数：</p><ul><li><code>pre</code>: 上一次的返回值</li><li><code>cur</code>: 当前值</li><li><code>curIndex</code>: 当前索引值</li><li><code>arr</code>: 当前数组</li></ul><h4 id="一般方式实现-2"><a href="#一般方式实现-2" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><p>先排序再取值。</p><h3 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h3><h4 id="一行代码实现-4"><a href="#一行代码实现-4" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, <span class="number">0</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4 id="一般方式实现-3"><a href="#一般方式实现-3" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] + sum(arr.slice(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>利用<code>slice</code>截取改变数组,再利用递归求和，当然迭代更好。</p><h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h3><h4 id="一行代码实现-5"><a href="#一行代码实现-5" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].concat([<span class="number">5</span>,<span class="number">6</span>]) <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line">[...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],...[<span class="number">5</span>,<span class="number">6</span>]] <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].push.apply([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]) <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h4 id="一般方式实现-4"><a href="#一般方式实现-4" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>,<span class="number">6</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].push(item)</span><br><span class="line">&#125;) <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h3 id="数组判断是否包含值"><a href="#数组判断是否包含值" class="headerlink" title="数组判断是否包含值"></a>数组判断是否包含值</h3><h4 id="一行代码实现-6"><a href="#一行代码实现-6" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>) <span class="comment">// -1 若存在返回索引</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].find(<span class="function">(<span class="params">item</span>) =&gt;</span> item ===<span class="number">3</span>) <span class="comment">// 3 若不存在返回undefined</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> item ===<span class="number">3</span>) <span class="comment">// 2 若不存在返回-1</span></span><br></pre></td></tr></table></figure><p><code>includes()</code>、<code>find()</code>、<code>findIndex()</code>是ES6的api。</p><h4 id="一般方式实现-5"><a href="#一般方式实现-5" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="number">3</span></span><br><span class="line">&#125;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="类数组转化"><a href="#类数组转化" class="headerlink" title="类数组转化"></a>类数组转化</h3><h4 id="一行代码实现-7"><a href="#一行代码实现-7" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">[...arguments]</span><br></pre></td></tr></table></figure><p>类数组: 表示有<code>length</code>属性，但是不具备数组的方法。<br><code>call</code>、<code>apply</code>: 改变<code>slice</code>里面的<code>this</code>指向<code>arguments</code>，所以<code>arguments</code>也可以调用数组的方法。<br><code>...</code>: 将类数组扩展为字符串，再定义为数组。</p><h4 id="一般方式实现-6"><a href="#一般方式实现-6" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span> (<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    start = start || <span class="number">0</span>;</span><br><span class="line">    end = end || <span class="keyword">this</span>.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=start; i&lt;end; i++) &#123;</span><br><span class="line">        result.push(<span class="keyword">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组每一项设置值"><a href="#数组每一项设置值" class="headerlink" title="数组每一项设置值"></a>数组每一项设置值</h3><h4 id="一行代码实现-8"><a href="#一行代码实现-8" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].fill(<span class="literal">false</span>) <span class="comment">// [false, false, false]</span></span><br></pre></td></tr></table></figure><p><code>fill</code>是ES6的方法。</p><h4 id="一般方式实现-7"><a href="#一般方式实现-7" class="headerlink" title="一般方式实现"></a>一般方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">()</span>=&gt;</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="数组每一项是否满足条件"><a href="#数组每一项是否满足条件" class="headerlink" title="数组每一项是否满足条件"></a>数组每一项是否满足条件</h3><h4 id="一行代码实现-9"><a href="#一行代码实现-9" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>every</code>是ES5的api，每一项满足返回<code>true</code>。</p><h3 id="数组有一项满足条件"><a href="#数组有一项满足条件" class="headerlink" title="数组有一项满足条件"></a>数组有一项满足条件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>some</code>是ES5的api，有一项满足返回<code>true</code>。</p><h3 id="过滤数组"><a href="#过滤数组" class="headerlink" title="过滤数组"></a>过滤数组</h3><h4 id="一行代码实现-10"><a href="#一行代码实现-10" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><p><code>filter</code>是ES5的api,返回满足条件的元素数组。</p><h3 id="对象和数组转化"><a href="#对象和数组转化" class="headerlink" title="对象和数组转化"></a>对象和数组转化</h3><h4 id="一行代码实现-11"><a href="#一行代码实现-11" class="headerlink" title="一行代码实现"></a>一行代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;) <span class="comment">// ['name', 'age']</span></span><br><span class="line"><span class="built_in">Object</span>.values(&#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;) <span class="comment">// ['张三', 14]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;) <span class="comment">// [[name, "张三"], [age, 14]]</span></span><br><span class="line"><span class="built_in">Object</span>.fromEntries([name, <span class="string">"张三"</span>], [age, <span class="number">14</span>]) <span class="comment">//  ES10的api &#123;name: "张三", age: 14&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第9期-居中元素(最终版)</title>
      <link href="/2019/03/17/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC9%E6%9C%9F-%E5%B1%85%E4%B8%AD%E5%85%83%E7%B4%A0-%E6%9C%80%E7%BB%88%E7%89%88/"/>
      <url>/2019/03/17/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC9%E6%9C%9F-%E5%B1%85%E4%B8%AD%E5%85%83%E7%B4%A0-%E6%9C%80%E7%BB%88%E7%89%88/</url>
      <content type="html"><![CDATA[<h3 id="元素居中思维导图"><a href="#元素居中思维导图" class="headerlink" title="元素居中思维导图"></a>元素居中思维导图</h3><p>本文介绍元素水平居中，垂直居中还有各种水平垂直居中的方法，思维导图如下:<br><img src="https://github.com/yuhongjing/img-folder/raw/master/img/qdxl/czjz.png" alt=""><br><a id="more"></a></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><h4 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h4><p><strong>利用text-align:center可以实现在块级元素内部的行内元素水平居中</strong>。此方法对inline、inline-block、inline-table和inline-flex元素水平居中有效。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在父容器设置 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，如果块级元素内部包着也是一个块级元素，<strong>我们可以先将其由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中</strong>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="块级元素的水平居中"><a href="#块级元素的水平居中" class="headerlink" title="块级元素的水平居中"></a>块级元素的水平居中</h4><p>这种情形可以有多种实现方式，下面我们详情介绍：</p><h5 id="将块级元素的左右外边距margin-left和margin-right设置为auto"><a href="#将块级元素的左右外边距margin-left和margin-right设置为auto" class="headerlink" title="将块级元素的左右外边距margin-left和margin-right设置为auto"></a>将块级元素的左右外边距margin-left和margin-right设置为auto</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="comment">/* 确保该块级定宽 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用table-margin"><a href="#使用table-margin" class="headerlink" title="使用table+margin"></a>使用table+margin</h5><p>先将子元素设置为块级表格来显示(类似)，再将其设置水平居中。<br><strong>display:table在表现上类似block元素，但是宽度为内容宽</strong>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: table;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="使用absolute-transform"><a href="#使用absolute-transform" class="headerlink" title="使用absolute+transform"></a>使用absolute+transform</h5><p>先将父元素设置为相对定位，再将其子元素设置为绝对定位，向右移动子元素，移动距离为父容器的一半，最后通过向左移动子元素的一半宽度以达到水平居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        transform: translateX(-50%);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="使用flex-justify-content"><a href="#使用flex-justify-content" class="headerlink" title="使用flex+justify-content"></a>使用flex+justify-content</h5><p>通过CSS3中的布局利器flex中的justify-content属性来达到水平居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="flex-margin"><a href="#flex-margin" class="headerlink" title="flex+margin"></a>flex+margin</h5><p>通过flex将父容器设置为Flex布局，再设置子元素居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="多块级元素水平居中"><a href="#多块级元素水平居中" class="headerlink" title="多块级元素水平居中"></a>多块级元素水平居中</h4><h5 id="利用flex布局"><a href="#利用flex布局" class="headerlink" title="利用flex布局"></a>利用flex布局</h5><p>利用弹性布局(flex)，实现水平居中，其中justify-content 用于设置弹性盒子元素在主轴（默认横轴）方向上的对齐方式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="利用inline-block"><a href="#利用inline-block" class="headerlink" title="利用inline-block"></a>利用inline-block</h5><p>将要水平排列的块状元素设为display:inline-block，然后在父级元素上设置text-align:center，达到与上面的行内元素的水平居中一样的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="浮动元素水平居中"><a href="#浮动元素水平居中" class="headerlink" title="浮动元素水平居中"></a>浮动元素水平居中</h4><p>一共三种方法:</p><ul><li>对于定宽的浮动元素，通过子元素设置relative+负margin</li><li>对于不定宽的浮动元素，父子容器都用相对定位</li><li>通用方法（无论是否定宽）: flex布局</li></ul><h5 id="定宽的非浮动元素"><a href="#定宽的非浮动元素" class="headerlink" title="定宽的非浮动元素"></a>定宽的非浮动元素</h5><p>通过子元素设置relative+负marfin<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"float: left; width: 500px;"</span>&gt;</span>我是要居中的浮动元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin-left: -250px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="不定宽的浮动元素"><a href="#不定宽的浮动元素" class="headerlink" title="不定宽的浮动元素"></a>不定宽的浮动元素</h5><p>通过父子容器都相对定位，偏移位移。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我也是浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        right: 50%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="通用办法flex布局-无论是否定宽"><a href="#通用办法flex布局-无论是否定宽" class="headerlink" title="通用办法flex布局(无论是否定宽)"></a>通用办法flex布局(无论是否定宽)</h5><p>利用弹性布局(flex)的<code>justify-content</code>属性，实现水平居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是居中的浮动元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 这里有无宽度不影响居中 */</span></span></span><br><span class="line"><span class="undefined">        width: 200px; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="绝对定位元素水平居中"><a href="#绝对定位元素水平居中" class="headerlink" title="绝对定位元素水平居中"></a>绝对定位元素水平居中</h4><p>这种方式非常独特，通过子元素绝对定位，外加<code>margin: 0 auto</code>来实现。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>让绝对定位的元素水平居中对齐。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">   <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>; <span class="comment">/*绝对定位*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span>: 0; <span class="comment">/*此处不能省略，且为0*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">right</span>: 0;<span class="comment">/*此处不能省略，且为0*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>; <span class="comment">/*水平居中*/</span></span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">        background: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><h4 id="单行内联元素垂直居中"><a href="#单行内联元素垂直居中" class="headerlink" title="单行内联元素垂直居中"></a>单行内联元素垂直居中</h4><p>利用行高和高度一样实现垂直居中(并不是完全的垂直居中,详情CSS世界)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>单行内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 120px;</span></span><br><span class="line"><span class="undefined">    line-height: 120px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f69c55</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="多行内联元素垂直居中"><a href="#多行内联元素垂直居中" class="headerlink" title="多行内联元素垂直居中"></a>多行内联元素垂直居中</h4><h5 id="利用flex布局（flex）"><a href="#利用flex布局（flex）" class="headerlink" title="利用flex布局（flex）"></a>利用flex布局（flex）</h5><p>利用flex布局实现垂直居中，其中flex-direction: column定义主轴方向为纵向。这种方式在较老的浏览器存在兼容性问题。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dance like nobody is watching, code like everybody is.</span><br><span class="line">    Dance like nobody is watching, code like everybody is.</span><br><span class="line">    Dance like nobody is watching, code like everybody is.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        flex-direction: column;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        height: 140px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f69c55</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="利用表布局（table）"><a href="#利用表布局（table）" class="headerlink" title="利用表布局（table）"></a>利用表布局（table）</h5><p>利用表布局的vertical-align: middle可以实现子元素的垂直居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>The more technology you learn, the more you realize how little you know.</span><br><span class="line">    The more technology you learn, the more you realize how little you know.</span><br><span class="line">    The more technology you learn, the more you realize how little you know.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: table;</span></span><br><span class="line"><span class="undefined">        height: 140px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f69c55</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: table-cell;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="块级元素垂直居中"><a href="#块级元素垂直居中" class="headerlink" title="块级元素垂直居中"></a>块级元素垂直居中</h4><h5 id="使用absolute-负margin-已知高度宽度"><a href="#使用absolute-负margin-已知高度宽度" class="headerlink" title="使用absolute+负margin(已知高度宽度)"></a>使用absolute+负margin(已知高度宽度)</h5><p>通过绝对定位元素距离顶部50%，并设置margin-top向上偏移元素高度的一半，就可以实现了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>固定高度的块级元素垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;  </span></span><br><span class="line"><span class="undefined">        top: 50%;</span></span><br><span class="line"><span class="undefined">        margin-top: -50px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="使用absolute-transform-1"><a href="#使用absolute-transform-1" class="headerlink" title="使用absolute+transform"></a>使用absolute+transform</h5><p>当垂直居中的元素的高度和宽度未知时，可以借助CSS3中的transform属性向Y轴反向偏移50%的方法实现垂直居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>未知高度的块级元素垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 50%;</span></span><br><span class="line"><span class="undefined">        transform: translateY(-50%);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="使用flex-align-items"><a href="#使用flex-align-items" class="headerlink" title="使用flex+align-items"></a>使用flex+align-items</h5><p>通过设置flex布局中的属性align-items，使子元素垂直居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>未知高度的块级元素垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="使用table-cell-vertical-align"><a href="#使用table-cell-vertical-align" class="headerlink" title="使用table-cell+vertical-align"></a>使用table-cell+vertical-align</h5><p>通过将父元素转化为一个表格单元格显示（类似<code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>），再通过设置 vertical-align属性，使表格单元格内容垂直居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: table-cell;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><h4 id="绝对定位与负边距实现（已知高度宽度）"><a href="#绝对定位与负边距实现（已知高度宽度）" class="headerlink" title="绝对定位与负边距实现（已知高度宽度）"></a>绝对定位与负边距实现（已知高度宽度）</h4><p>这种方式需要知道被垂直居中元素的高和宽，才能计算出margin值，兼容所有浏览器。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: #666"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 50%;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        margin: -50px 0 0 -50px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="绝对定位与margin-auto"><a href="#绝对定位与margin-auto" class="headerlink" title="绝对定位与margin:auto"></a>绝对定位与margin:auto</h4><p>这种方式无需知道被垂直居中元素的高和宽，但不能兼容低版本的IE浏览器。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: #666"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 父容器必须有高度 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 注意此处的写法 */</span></span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="绝对定位-CSS3-未知元素的高宽"><a href="#绝对定位-CSS3-未知元素的高宽" class="headerlink" title="绝对定位+CSS3(未知元素的高宽)"></a>绝对定位+CSS3(未知元素的高宽)</h4><p>利用Css3的transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: #666"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 50%;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><p>利用flex布局，其中justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而align-items属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: #666"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="flex-grid与margin-auto-最简单写法"><a href="#flex-grid与margin-auto-最简单写法" class="headerlink" title="flex/grid与margin:auto(最简单写法)"></a>flex/grid与margin:auto(最简单写法)</h4><p>容器元素设为 flex 布局或是grid布局，子元素只要写 margin: auto 即可,不能兼容低版本的IE浏览器。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: #666"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: grid;</span></span><br><span class="line"><span class="undefined">    height: 100vh;//必须有高度</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">    margin: auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 居中 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue路由懒加载</title>
      <link href="/2019/03/11/vue%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2019/03/11/vue%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><p>结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。<br><a id="more"></a></p><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>实现异步组件的方式如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原本的引入方式</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/components/Home'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在修改如下</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "Home" */</span> <span class="string">'@/components/Home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由中的组件引入方式不改变</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>修改成功后,<code>npm run dev</code>时可能会直接报错。<br><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97" target="_blank" rel="noopener">官网解释</a>: 使用Babel时,需要安装<code>syntax-dynamic-import</code>插件来正确解析语法。</p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>首先安装:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-syntax-dynamic-import</span><br></pre></td></tr></table></figure></p><p>然后修改<code>webpack.base.config.js</code>文件中的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">    <span class="comment">// 添加Plugins 引入插件</span></span><br><span class="line">    options: &#123;</span><br><span class="line">        plugins: [<span class="string">'syntax-dynamic-import'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>), resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>现在页面能够正常运行了。  </p><h3 id="chunk组件打包"><a href="#chunk组件打包" class="headerlink" title="chunk组件打包"></a>chunk组件打包</h3><p>不过打包的时候chunk包的名字都是乱的,如果需要指定命名需要如下设置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 /* webpackChunkName: "Home" */属于(魔法注释)</span></span><br><span class="line"><span class="comment">// 当ChunkName相同时,webpack会将他们识别为一组,打包到同一个文件中</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "Home" */</span> <span class="string">'@/components/Home'</span>)</span><br><span class="line"><span class="keyword">const</span> Test = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "Home" */</span> <span class="string">'@/components/Test'</span>)</span><br></pre></td></tr></table></figure></p><p>但是仅做完上面这些步骤还是不够的,我们还需要修改<code>webpack.prod.conf.js</code>文件:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">    <span class="comment">// 这是原本的代码</span></span><br><span class="line">    <span class="comment">// chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')</span></span><br><span class="line">    <span class="comment">// 新增以下两句,其中的name就是魔术注释里面的name</span></span><br><span class="line">    chunkFilename:utils.assetsPath(<span class="string">'js/[name]-[chunkhash:8].js'</span>),</span><br><span class="line">    publicPath:<span class="string">'./'</span> <span class="comment">// 如果打包后出现文件引入报错问题一般都是这个</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>现在就可以实现本地预览和打包后都异步加载路由的功能了。</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue使用less并配置全局变量</title>
      <link href="/2019/03/08/Vue%E4%BD%BF%E7%94%A8less%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/2019/03/08/Vue%E4%BD%BF%E7%94%A8less%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>less可以让我们更好的高效的使用CSS。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>命令行执行如下代码即可安装:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>如果不需要配置全局less那么直接修改<code>webpack.base.conf.js</code>文件即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    loader: <span class="string">"style-loader!css-loader!less-loader"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过不推荐这样使用,所以可以省略这一步。</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>如果按照以下方法配置,我们可以制定某些样式文件作为全局共有的,从而实现全局less。<br>首先安装:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-resources-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>在build的utils.js文件中,添加如下函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lessResourceLoader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loaders = [</span><br><span class="line">    cssLoader,</span><br><span class="line">    <span class="string">'less-loader'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        resources: [</span><br><span class="line">          <span class="comment">// 全局less</span></span><br><span class="line">          path.resolve(__dirname, <span class="string">'../src/common/publicCss.less'</span>)  <span class="comment">// 这里就是你的全局less文件</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">    <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">      use: loaders,</span><br><span class="line">      fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并将此文件下的return参数修改如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    <span class="comment">// 原本</span></span><br><span class="line">    <span class="comment">// less: generateLoaders('less'),</span></span><br><span class="line">    <span class="comment">// 修改为</span></span><br><span class="line">    less: lessResourceLoader(),</span><br><span class="line">    sass: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    scss: generateLoaders(<span class="string">'sass'</span>),</span><br><span class="line">    stylus: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">    styl: generateLoaders(<span class="string">'stylus'</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>现在即可使用less,并配置全局变量了。</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows以太坊Dapp开发环境</title>
      <link href="/2019/02/19/windows%E4%BB%A5%E5%A4%AA%E5%9D%8ADApp%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/02/19/windows%E4%BB%A5%E5%A4%AA%E5%9D%8ADApp%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h3 id="Zombies-Game"><a href="#Zombies-Game" class="headerlink" title="Zombies Game"></a>Zombies Game</h3><p><a href="https://github.com/yuhongjing/ChainBlock_Zombies" target="_blank" rel="noopener">DApp僵尸游戏</a>,不断更新中。<br><a id="more"></a></p><h3 id="windows搭建以太坊的开发环境"><a href="#windows搭建以太坊的开发环境" class="headerlink" title="windows搭建以太坊的开发环境"></a>windows搭建以太坊的开发环境</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a>下载并安装即可。  </p><p>打开cmd执行以下命令:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">node</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function"><span class="title">v10</span>.14.2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function">6.8.0</span></span><br></pre></td></tr></table></figure></p><p>出现版本号即表示安装成功。</p><h4 id="安装节点仿真器"><a href="#安装节点仿真器" class="headerlink" title="安装节点仿真器"></a>安装节点仿真器</h4><p>为了快速开发和测试以太坊DApp，我们通常使用以太坊节点仿真器来模拟区块链，最流行的节点仿真器就是Ganache，之前被称为TeseRPC。</p><p>安装Ganache的命令:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> <span class="title">install</span> -<span class="title">g</span> <span class="title">ganache</span>-<span class="title">cli</span></span></span><br></pre></td></tr></table></figure></p><p>执行以下命令验证是否安装成功:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">ganache</span>-<span class="title">cli</span></span></span><br><span class="line"><span class="function"><span class="title">Ganache</span> <span class="title">CLI</span> <span class="title">v7</span>.0.0-<span class="title">beta</span>.0 (<span class="title">ganache</span>-<span class="title">core</span>: 3.0.0-<span class="title">beta</span>.0)</span></span><br></pre></td></tr></table></figure></p><p>默认会开启节点,并打印出很多的信息即表示安装成功。</p><p>要了解ganache命令行的详细用法,可以查看<a href="https://my.oschina.net/u/3794778/blog/1799768" target="_blank" rel="noopener">以太坊ganache CLI命令行参数详解</a></p><h4 id="安装solidity编译器"><a href="#安装solidity编译器" class="headerlink" title="安装solidity编译器"></a>安装solidity编译器</h4><p>solidity是开发以太坊智能合约的编程语言,不熟悉的话可以查看<a href="https://my.oschina.net/u/3794778/blog/1799912" target="_blank" rel="noopener">以太坊solidity开发语言简介</a>。</p><p>安装solidity编译器命令:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> <span class="title">install</span> –<span class="title">g</span> <span class="title">solc</span></span></span><br></pre></td></tr></table></figure></p><p>执行以下命令验证是否安装成功:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">solcjs</span> --<span class="title">version</span></span></span><br><span class="line"><span class="function">0.5.4+<span class="title">commit</span>.9549<span class="title">d8ff.Emscripten.clang</span></span></span><br></pre></td></tr></table></figure></p><p>出现信息即表示安装成功。</p><h4 id="安装web3"><a href="#安装web3" class="headerlink" title="安装web3"></a>安装web3</h4><p><a href="http://web3.tryblockchain.org/" target="_blank" rel="noopener">web3.js library</a>可以与任何暴露了RPC接口的以太坊节点连接,从而让我们可以连接智能合约。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> <span class="title">install</span> –<span class="title">g</span> <span class="title">web3</span></span></span><br></pre></td></tr></table></figure><p>注意: 这里需要python,而win10里需要下载补丁才能正确安装。<br>而python可以需要两个依赖<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">或者</span><br><span class="line">npm install node-gyp -global</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:<br>  web3.js只能通过CMD模块引入<br>  如果仍无法引入,则安装<code>npm install –g web3@0.20.2</code><br>  如果还是无法安装,则<code>npm cache verify</code>,重新安装即可</p></blockquote><h4 id="安装Truffle框架"><a href="#安装Truffle框架" class="headerlink" title="安装Truffle框架"></a>安装Truffle框架</h4><p><a href="http://truffle.tryblockchain.org/" target="_blank" rel="noopener">Truffle</a>是针对基于以太坊的Solidity语言的一套开发框架。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> <span class="title">install</span> –<span class="title">g</span> <span class="title">truffle</span></span></span><br></pre></td></tr></table></figure></p><p>执行以下命令验证是否安装成功:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">truffle.cmd</span> <span class="title">version</span></span></span><br><span class="line"><span class="function"><span class="title">Truffle</span> <span class="title">v5</span>.0.4 (<span class="title">core</span>: 5.0.4)</span></span><br><span class="line"><span class="function"><span class="title">Solidity</span> <span class="title">v0</span>.5.0 (<span class="title">solc</span>-<span class="title">js</span>)</span></span><br><span class="line"><span class="function"><span class="title">Node</span> <span class="title">v10</span>.14.2</span></span><br></pre></td></tr></table></figure></p><p>出现信息即表示安装成功。</p><h4 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h4><p><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack</a>是模块打包器,可以将模块打包成bundle。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">npm</span> <span class="title">install</span> –<span class="title">g</span> <span class="title">webpack</span></span></span><br></pre></td></tr></table></figure></p><p>执行以下命令验证是否安装成功:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">webpack</span> –<span class="title">v</span></span></span><br><span class="line"><span class="function">3.11.0</span></span><br></pre></td></tr></table></figure></p><p>出现信息即表示安装成功。</p><h3 id="构建示例项目"><a href="#构建示例项目" class="headerlink" title="构建示例项目"></a>构建示例项目</h3><h4 id="新建DApp项目"><a href="#新建DApp项目" class="headerlink" title="新建DApp项目"></a>新建DApp项目</h4><p>通过webpack模板初始化项目骨架架构:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">d:\<span class="title">demo</span>&gt; <span class="title">truffle.cmd</span> <span class="title">unbox</span> <span class="title">webpack</span></span></span><br><span class="line"><span class="function"><span class="title">Downloading</span>…</span></span><br><span class="line"><span class="function"><span class="title">Unpacking</span>…</span></span><br><span class="line"><span class="function"><span class="title">Setting</span> <span class="title">up</span>…</span></span><br><span class="line"><span class="function"><span class="title">Unbox</span> <span class="title">successful</span>. <span class="title">Sweet</span>!</span></span><br></pre></td></tr></table></figure></p><h4 id="安装项目依赖的NPM包"><a href="#安装项目依赖的NPM包" class="headerlink" title="安装项目依赖的NPM包"></a>安装项目依赖的NPM包</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">d:\<span class="title">demo</span>&gt; <span class="title">npm</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure><h4 id="修改truffle配置"><a href="#修改truffle配置" class="headerlink" title="修改truffle配置"></a>修改truffle配置</h4><p>在truffle.js文件中,开启如下代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  networks:&#123;</span><br><span class="line">     development: &#123;</span><br><span class="line">     host: <span class="string">"127.0.0.1"</span>,     <span class="comment">// Localhost (default: none)</span></span><br><span class="line">     port: <span class="number">8545</span>,            <span class="comment">// Standard Ethereum port (default: none)</span></span><br><span class="line">     network_id: <span class="string">"*"</span>,       <span class="comment">// Any network (default: none)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:<br>  节点仿真器的端口<br>  此文件的port<br>  以及后面的js文件的端口<br>  三者都需要一致</p></blockquote><h4 id="启动节点仿真器"><a href="#启动节点仿真器" class="headerlink" title="启动节点仿真器"></a>启动节点仿真器</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt; <span class="title">ganache</span>-<span class="title">cli</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意:<br>  关闭节点仿真器后,所有的合约就没有了<br>  再次开启后,需要重新部署合约</p></blockquote><h4 id="编译合约"><a href="#编译合约" class="headerlink" title="编译合约"></a>编译合约</h4><p>将我们的<code>.sol</code>文件编译成<code>json</code>文件<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">d:\<span class="title">demo</span>&gt; <span class="title">truffle.cmd</span> <span class="title">compile</span></span></span><br></pre></td></tr></table></figure></p><h4 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h4><p>将合约部署到区块链上(必须先开启区块链)<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">d:\<span class="title">demo</span>&gt; <span class="title">truffle.cmd</span> <span class="title">migrate</span></span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意:<br>  必须先开启节点,才能在节点上部署合约。</p></blockquote><h4 id="启动DApp"><a href="#启动DApp" class="headerlink" title="启动DApp"></a>启动DApp</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">d:\<span class="title">demo</span>&gt; <span class="title">cd</span> <span class="title">app</span></span></span><br><span class="line"><span class="function"><span class="title">d</span>:\<span class="title">demo</span>\<span class="title">app</span>&gt; <span class="title">npm</span> <span class="title">run</span> <span class="title">dev</span></span></span><br></pre></td></tr></table></figure><p>浏览器访问<a href="http://localhost:8080即可。" target="_blank" rel="noopener">http://localhost:8080即可。</a></p><p>如果希望别人访问我们的DApp应用,需要修改package.json:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  scripts:&#123;</span><br><span class="line">    "dev": "webpack-dev-server –-host 0.0.0.0"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加<code>--host 0.0.0.0</code>。</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DApp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>win10配置bash</title>
      <link href="/2019/01/29/win10%E9%85%8D%E7%BD%AEbash/"/>
      <url>/2019/01/29/win10%E9%85%8D%E7%BD%AEbash/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来，在windows系统中使用bash命令都是通过下载的<code>git bash</code>来操作。<br>每次使用linux相关的命令时都需要打开这个工具，真的相当的苦恼了。<br>不过现在win10内置了bash命令，可以安装linux的子系统，真是爽翻了。<br><a id="more"></a></p><h3 id="添加方式"><a href="#添加方式" class="headerlink" title="添加方式"></a>添加方式</h3><p>win10内置了bash，可是默认没有开启，开启的步骤如下:  </p><ol><li>打开windows设置-&gt;更新和安全-&gt;开发者选项-&gt;开发人员模式</li><li>打开控制面板-&gt;程序-&gt;启用或关闭windows功能-&gt;适用于windows的linux子系统</li><li>重启,打开cmd并输入<code>bash</code>命令，此时会提示你进入<code>window store</code>进行选择linux系统安装或者直接输入y即可安装</li><li>如果是给了一个网址，直接粘贴在浏览器就可以打开windows商店，搜索linux，并安装Ubuntu即可</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>之前在windows安装的所有环境变量和linux是不相通的，所以需要再次在linux的环境下安装。<br>现在可以爽爽的在win环境下使用linux的命令了！</p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网大佬系列-周鸿祎</title>
      <link href="/2019/01/28/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E5%91%A8%E9%B8%BF%E7%A5%8E/"/>
      <url>/2019/01/28/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E5%91%A8%E9%B8%BF%E7%A5%8E/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>红衣教主，流氓软件之父，3Q大战。<br>在10年前，围绕着周鸿祎的话题从来就不曾缺少。<br>而现在，360也已经退居为2线公司，作为360的boss，周鸿炜或多或少有点销声敛迹的味道。<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>2017年，一篇名为《人民想念周鸿祎》的自媒体文章​火了，沉寂已久的老周又再次被推向了热搜榜。文中说道：中国互联网过去两年越来越无趣了，挺好的创业者，最后都被环境塑造成了风口上的骗子。没人说真话，没人敢说真话，不怀念你还能怀念谁。你也学会了闷声发大财，但这不是人民想要的那个周鸿祎。</p><p>随后，老周也回复了一篇《致想念我的人民》: 其实我知道，大家也不是想念我，是想念讲真话的人，是想念挑战者，也是想念互联网的炮火声。​</p><p>再之后，他又沉寂了，按照他的话：360已经是国家安全战略的一部分，需要一个成熟稳重，不那么爱惹事的形象。</p><p>讨厌周鸿祎的人，称他为流氓教主，或影帝，而喜欢的人也会尊他为战神。今天，就让我们一起来了解他的一些趣事。</p><h4 id="求学生涯的周鸿炜"><a href="#求学生涯的周鸿炜" class="headerlink" title="求学生涯的周鸿炜"></a>求学生涯的周鸿炜</h4><p>1970年10月4日，周鸿祎出生于湖北省黄冈市蕲春县，之后不久，就随父母迁居至河南郑州。提起蕲春县，周说：“那是籍贯，但是我没去过”。</p><p>刚出生不久的周鸿祎：</p><p><img src="https://wx2.sinaimg.cn/large/69bbca83gy1fu0t6tjnokj20og0g676y.jpg" alt="image"><br>不过，在这种陌生的环境中成长，他不但没有变得怯懦胆小，反而勇猛好战。早在读幼儿园的时候，周鸿祎就经常跟小朋友打架。每次惹事都会被父亲狠揍，却总是屡教不改，往往是头天挨父亲打，第二天回学校继续打别人。</p><p>周的父母都是普通的国家机关干部。 父亲叫周学斌，年轻时的梦想是当一名飞行员。但是，因为他的一个姐姐(也就是周的一个姑姑)1949年跟丈夫去台湾定居，造成了周父的背景里存在一段“海外关系”。就是因为这样一个“污点”，周父在17岁时没有通过招飞政审，飞行员之梦就此草草终结了。</p><p><img src="https://ws4.sinaimg.cn/large/69bbca83gy1fu0t6tv938j20iw0n6jwe.jpg" alt="image"></p><center>周鸿祎和父亲</center><p>周从小就开始认字。不过，他认字的方式是就地取材。周回忆说：当时我爸的一项日常功课就是用自行车带着我去买菜，然后路过标语时对着这些字教我逐一朗读。凡是墙上有不会的字，我就要追问怎么读，我爸告诉我一遍，我就跟着大声念一遍。等买菜回来的时候，我已经熟练掌握这些字了，不但可以把这些标语正着读一遍，还可以倒着念了。</p><p><img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t6u4pf3j20mi0cuacm.jpg" alt="image"></p><center>周鸿祎小学时的全家福</center><p> <img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t6ud5ckj20fi0mw0v6.jpg" alt="image"></p><p>小时候，他的理想是当解放军</p><p> 上中学后，他惹事的风格又得到了进一步强化。</p><p>有一次周带了一条小蛇到学校，想了想之后，就放在了女同桌的文具盒里面了，女同学尖叫一声就昏过去了，然后课堂就大乱。</p><p>周鸿祎一位中学同学曾回忆，老周上学时候借她橡皮，还给她的时候，那个橡皮变成了一块一块，小米粒大小的小碎块。老周还说：哎，我还你橡皮，然后攥在手里，嘭的一吹，橡皮整个就喷到她脸上了。</p><p>14岁的周鸿祎，一头乌黑的鬈毛，眼神略带不羁，充满了对这个世界的不服气。​</p><p> <img src="https://wx2.sinaimg.cn/large/69bbca83gy1fu0t6upluqj20q20k6n5y.jpg" alt="image"><br> <center>14岁的周鸿炜</center></p><p>周鸿祎上大学前，有三个学校想提前录取他(就是保送生)，第一个是华南工学院的食品工程专业，后来又同意他来学计算机专业，第二个是西安交通大学的计算机专业，第三个是武汉大学(差点就和雷布斯是校友了)。后来他选择了西安交大。</p><p>当别的同学还在殚精竭虑地准备高考时，老周和几个同伴已经搭着一列绿皮火车，背着自己家的一床棉被，像个青年难民一样晃晃悠悠地去西安交大报到了。</p><p>不过，他的大学刚开始曾险些被开除。当时，一个比周小三岁的男孩，经常来宿舍串门，然后找他的一位老乡混吃混喝。这人有一个特点，来找人从来都是让别人出钱请他吃饭，自己分文不掏。慢慢地，这位同学喜欢混吃骗喝的名声在班里扩散开来，大家都很不满，抱怨的声音开始在班里此起彼伏。此时，老周站了起来，伸张正义，带着他高中时练过一段时间的双节棍，去敲了一下他的脑袋，并警告他不要再继续骗吃骗喝。</p><p>后来，这小子搬来了江湖的一群救兵报仇。老周回忆说：“他们踢开宿舍的门，揪住我的头就是一顿打。地上正好有些喝剩的啤酒瓶，全被他们抄起来当成武器。他们抄起啤酒瓶子就在我头上开了两个。砰砰两声，玻璃哗哗散落一地。我看不清也感觉不到几双手在同时抓着我，拿着我的头往墙上撞。要求我拿出一条烟向他们请罪，然后才轰然离去”。</p><p>再后来，不能忍的老周立刻找朋友帮忙，又想方设法收拾了对方一顿，并且奇迹般地抢回那条烟。然后这小子不再恋战，把周告发到了学校。。。然后就是接受学校处罚，幸亏班主任帮忙，才没被开除。​</p><p> <img src="https://ws4.sinaimg.cn/large/69bbca83gy1fu0t6uw6drj20g40g43yv.jpg" alt="image"></p><p>当时，西安交大学生流行给自己的宿舍命名，每个宿舍门口都挂一个用毛笔字写有宿舍名字的匾额。牌匾上的名字五花八门，有的写着“狼穴”，有的写着“黑洞”，都代表了自己宿舍的风格。老周宿舍的名字是由他命名的，叫“不系之舟”，意为没有拘束、任意漂流的小船，代表一种渴望无拘无束的心情。之后，他还给自己床头写了一幅字：十步杀一人。每次都能引起宿管阿姨的侧目。</p><p>有一次，老周路过足球场，里面飞过来一个足球，他觉得这个球不错，然后。。。就抱回宿舍了。</p><p> <img src="https://ws1.sinaimg.cn/large/69bbca83gy1fu0t6v1m36j208c08c0sr.jpg" alt="image"></p><p>大三那一年，周鸿祎花了三天的时间成功地把学校计算中心的电脑摧毁掉，过了一把“黑客”瘾。当时交大的老师并没有因此而处分他，反而因为他向学校报告了计算机漏洞而激励他。用周鸿祎的话说，正是在西安，他和网络安全才结下了不解之缘。​</p><p> <img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t6vb4i5j20e80dnacw.jpg" alt="image"></p><p>周鸿祎在大学期间没有谈过恋爱，对于这事，他曾回忆道：“虽然我对恋爱这事儿并非没有向往，但是当时确实没机会。我“痛恨”当时女生的择偶标准，她们不是倾心于学生会干部，就是喜欢高大威猛的体育特长生，会写诗的文艺男青年也颇得她们芳心。像我们这种其貌不扬的“草根”和极客，基本上没有任何市场。我们只能在夜谈会中谈谈对女生的向往，抒发一下愁苦情绪在这种日夜独处的狂欢中，我常常哼唱李宗盛的《 寂寞难耐》 ：“总是平白无故的，难过起来；然而大伙都在，笑话正是精彩；怎么好意思，一个人走开……寂寞难耐，寂寞难耐……</p><p>不过，老周在大学时候曾经追过一个女孩，当年的老周为了追求这个姑娘，做了很多事情。但结局不遂如人意，这个姑娘最终出国了。这件事，给了老周极大的心理创伤，那一阵子，他整天看大话西游，看了一遍又一遍，流着泪看，边看边张开大嘴嚎啕大哭：“我猜中了开头，没猜中结尾……”</p><p>  <img src="https://wx2.sinaimg.cn/large/69bbca83gy1fu0t6vkqd0j20w40kqdj9.jpg" alt="image"></p><p>再之后，老周被保送到西安交大管理学院系统工程系研究生，并于1995年研究生毕业，获硕士学位。</p><p> 周鸿祎研究生期间基本没怎么给导师干过活，天天“霸占”导师办公室捣鼓自己的东西，还用的是导师的电脑。有一次，其导师李怀祖教授把所有学生召集在一起，大概有二十多个博士生，十几个硕士生。说了句话：“我看你们这群人中间，也就小周还能成事”，周鸿祎顿时心中一阵窃喜，博士生们也都看着周，很不舒服。不料，老师又补充了句：因为我看你们都是正常人，这里就小周不太正常。小周的思维方式和正常人不一样，将来，他要么就是最失败的那个人，要么就是大获成功。</p><p>  <img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t6vw9pdj20um0foq7n.jpg" alt="image"><center>周鸿祎和硕士导师李怀祖</center></p><p>再后来，2011年，360刚刚上市时，虽然在很多方面的发展还需要大量资金，但为了感谢老师的培育之恩，周鸿祎出资400万元在西安交大分别设立“李怀祖奖学基金”、“陆诗娣奖学基金”。专项用于奖励品学兼优、具有创新意识和创新能力的学生，以鼓励在校学生勤奋学习，培养学生自强、自立的意识。</p><p>周鸿祎总结自己的大学生活：我的大学生活很充实，但似乎很难用开心和不开心来总结。开心来自简单的事情：吃了一顿好饭、听了一首好歌、疯狂地读了一晚上的程序，或者暑假的时候邮购了音响零件，自己制成了一个噪声巨大的音响。而不开心的时候也是有的：走在西安交通大学的林荫大道上，没有姑娘的瞩目，没有浪漫的故事，有的只是一颗理工男的寂寞心，偶尔悲壮。</p><p>老周研究生毕业后，在师兄李钊(现360首席架构师)的建议下去了方正集团。当时面试方正，一共面试了两次，第一次是方正软件部的副总周宁，是去北大方正下面的软件部工作，第二个是王选院士面的，是去北大的计算机研究所。李钊和他说，还是来周宁这边吧。公司比较自由，王选那边很学术，肯定不喜欢你这样乱说乱动的人。于是，工作就定下来了。“我得去大公司见识，不能把自己搞得跟土鳖一样”，他说。</p><p><img src="https://ws2.sinaimg.cn/large/69bbca83gy1fu0t78slujj20fv0aldfy.jpg" alt="image"></p><h4 id="创业维艰的周鸿祎"><a href="#创业维艰的周鸿祎" class="headerlink" title="创业维艰的周鸿祎"></a>创业维艰的周鸿祎</h4><h5 id="大学的创业经历"><a href="#大学的创业经历" class="headerlink" title="大学的创业经历"></a>大学的创业经历</h5><p>老周在大学时就已经开始创业了，当时写了一个用计算机进行科学算命的程序，在一张纸上用蓝黑色的钢笔水写上“科学算命”四个大字，然后去摆摊算命了。刚开始，脸皮太薄，实在不好意思吆喝。就干站着，场面一度非常尴尬。后来慢慢有人围了上来，他算命一次收一元钱，一天竟然能挣100多元。再后来，城管就来了，以不交税为名，不让接着做生意。受到驱赶后，就把摊子挪到了集贸市场，可是城管又追到了集贸市场。再后来，就放弃不做了。</p><p>还有一次是研究生时创业做反病毒卡，需要用电脑进行无数遍测试，于是，他们流窜在整个校园里，创造着一切可能的机会在学校里蹭电脑。学校各个计算机机房里时常出现老周、范刚和石晓虹三个人的身影。他们蹲守在机房门口，只要有人翘了计算机课，就迅速补位，进去分秒必争地使用这台机器。或者哪个研究生同学的导师的研究经费比较充足，教研室配有计算机，就偷偷溜进去蹭用他们的电脑。具体的方法是，等到同学10点回寝室睡觉时，就把他们锁在机房里，然后用一个通宵的电脑，等到黎明时分再从门上的气窗翻出去。</p><h5 id="在方正的那些日子"><a href="#在方正的那些日子" class="headerlink" title="在方正的那些日子"></a>在方正的那些日子</h5><p>老周在方正集团真正的声名鹊起，是因为在新疆分部时，帮助建设银行开发了一套系统，还受到了建行专门给发的表扬信。凭着自己的努力和对工作的执着，他一路高升。从程序员到项目主管、部门经理、方正研发中心副主任，用周鸿祎自己的话说“没用多长时间”。</p><p>他在方正还带头开发了一款互联网软件“飞扬电子邮件系统”，”飞扬“这个名字来自杜甫的《 赠李白》 中的诗句：“痛饮狂歌空度日，飞扬跋扈为谁雄。”</p><h5 id="创办3721"><a href="#创办3721" class="headerlink" title="创办3721"></a>创办3721</h5><p>3721的模式(中文网址导航，只要在浏览器里输入中文，就能到达想要的网址)，是周还在方正时候就想到的，当时还专门找到了大领导详细阐述了自己的想法，不过没有被采纳，于是他离职自己出来创业。</p><p><center>3721创立之初</center><br><img src="https://ws2.sinaimg.cn/large/69bbca83gy1fu0t793poqj20hy0e077p.jpg" alt="image"><br><img src="https://wx1.sinaimg.cn/large/69bbca83gy1fu0t79c7k5j20ko0auac9.jpg" alt="image"></p><p> 一起创业的人是老周在方正的两个年轻的同事，还有他的新婚妻子。整个房子是朝北的，只有老周的椅子旁边有一个小窗户，因此白天也暗无天日，需要把灯全打开。这个暗室被后来的伙伴戏谑为“囚室”。住得很拥挤，晚上机器一搬一抬就搭床。为了让老周安心创业，妻子离开了方正，进入另一家公司打工，以便能让他们每个月有更多固定的“创业口粮”。</p><p>2003年，当时“非典”袭来，已经没有人敢坐飞机了。老周却用逆向思维来进行思考，他想，现在没有人坐飞机，也就是意味着现在没人做生意了，而这正是我去全国各地推销产品、抢占市场的大好时机。于是开始戴着防毒面具频繁地坐飞机，到全国各处去见代理商，推销3721。</p><p>做3721时，老周曾把北大方正电脑事业部总经理和信息产品事业部总经理田健请到了公司。而田健做的第一件事，就是租下了对面中电大厦的昂贵写字楼，然后把破民房中的公司搬了过去。再之后，租金、装修费、交换机、各种设备和家具费，烧了大多数钱，公司到了山穷水尽，又面临融资不顺利，此时，田健在签了中电大厦的租约后不到两个星期就跳槽到了263公司，留下一个烂摊子。</p><p>3721弹尽粮绝时候，IDG通知去他们公司的总部一趟。为了准备这次会面，老周特意买了一本书，叫《 如何写好商业计划书》 。他从来没有写过商业计划书，但是想到这次见面意义重大，他得专业一些，要拿着一份像模像样的商业计划书去见投资人，以便在最大程度上显示出自己的专业。没有想到，临时抱佛脚的想法却让计划难产了，绞尽脑汁也做不出来一份所谓充满各种玄妙表格的商业计划书。最后只能随便找了两张纸，画了两张图就出发了。之后，IDG投资200万人民币，获得了3721的25%的股份。</p><p>2002年，3721的年营收超过2亿人民币，纯利6000万。同时期的搜狐新浪网易们，还在亏损中挣扎，经营艰难的马化腾，甚至差点为60万把QQ卖了。（当时3721以强行捆绑插件赚代理费用，骂声一片！）腰缠万贯的周鸿祎，砸了2000万给央视，将”不管三七二十一，中文上网更容易“的口号打响了中国。</p><h5 id="在雅虎中国的那些日子"><a href="#在雅虎中国的那些日子" class="headerlink" title="在雅虎中国的那些日子"></a>在雅虎中国的那些日子</h5><p>2003年，雅虎中国整合业务，希望通过搜索做大门户，杨致远选择并购，相继向百度和3721提出了收购意向。百度开价1.5亿美金，3721开价1.2亿美金，于是，雅虎买了3721，周鸿祎正式出任雅虎中国总裁。</p><p>周后来回忆说：我卖3721，并不是为了1.2亿美金。其实，当时雅虎诱惑称可以提供和Google相匹敌的搜索技术，他便义无反顾：雅虎的资金品牌和技术，加上周鸿祎积累的渠道客户端和运作能力，不仅能灭了百度，把Google都能给灭了，所以就加入了豪门。</p><p>当时，3721总共有200号员工，雅虎中国只有50多人，周将所有人都搬到了3721所在的和乔大厦。这在外界看来，反倒像是3721收购了雅虎中国。</p><p>为了做好新旧团队的磨合工作，老周自己掏钱请公司上下到三亚玩。饭席上，三百多人的大场合，别人来敬酒，周是来者不拒，以至于喝多了跌倒游泳池里把牙摔掉了。</p><p>300多名员工聚集在海滩上吃烧烤、喝啤酒，彻夜狂欢。老周面对着大海，发表了致辞：“雅虎中国这架飞机马上就要起飞了，新的雅虎要有新的精气神和风貌，当然，我们也要做不同的事情，去改变这个世界。”</p><p>相比而言，马云接管雅虎中国时，给所有员工做了一场激情四射的演讲。</p><p>加入雅虎后，面临最大的问题，就是老周和美国雅虎总部之间的理念分歧。雅虎总部认为各地分公司必须完全听从总部的指导，既然雅虎模式在欧洲，在日本行得通，那在中国一定也可以。老周认为，雅虎必须进行中国本土化操作，坚持因地制宜。因此，他们经常在电话里吵，当时，老周提出的下一年五百万预算，一直没有批下来，他亲自去美国总部要，财务部、行政部等也都是互相推皮球，一直没能要到。</p><p>连个开除员工的权力也没有。当时，周找到技术人员去优化一个用户体验，这个员工是雅虎中国的老员工，直接和周说：这个事情，技术上做不到呀。周耐着性子说：“我和别的老板不一样，我是一个懂技术的老板，你和我说说，技术上怎么办不到？” 员工支支吾吾的。周后来开除他了，但是开掉他的某一天早上，刚刚上班就接到了雅虎总部人力资源部一封措辞严厉的邮件：</p><p>鉴于×××员工的投诉，我们近期要对你进行一系列的调查，雅虎公司的原则一向是让员工快乐工作，我们要通过调查来了解你是否已经违反了这项原则，影响了雅虎中国员工的工作范围和工作情绪！</p><p>结果，那个员工后来不但没有被开掉，还被调到了北美的雅虎总部去工作，算是“因祸得福”了。</p><p><img src="https://wx1.sinaimg.cn/large/69bbca83gy1fu0t79iorkj20e108c0t1.jpg" alt="image"></p><p>2005年8月，雅虎账目上总共30亿美金可自由支配现金，杨致远用10亿美金现金加雅虎中国资产投资阿里巴巴。周鸿祎也离开了雅虎中国总裁这个职位。</p><p>离职雅虎中国之后，周鸿祎以投资合伙人的身份正式加盟IDG ，帮助国内众多的中小企业获得快速发展的机会， 推动整个行业的发展，先后投资了多家创业公司的创业项目，其主要投资成果包括迅雷、Discuz!、酷狗等多个知名的互联网产品。</p><p>做这一年投资是因为当时他和雅虎签订了竞业禁止协议。</p><p> 这并不是一次和平分手。坊间传言，杨致远给很多认识的VC（风险投资）写信，请他们不要投钱给周鸿祎。而后来，周鸿祎的360网站，使用过这样的一个域名<a href="http://fuckyahoo.com/" target="_blank" rel="noopener"></a><a href="http://fuckyahoo.com/" target="_blank" rel="noopener">http://fuckyahoo.com</a>，双方的仇恨之深，可见一斑。</p><h5 id="重新起航创办360"><a href="#重新起航创办360" class="headerlink" title="重新起航创办360"></a>重新起航创办360</h5><p>2006年8月，他出任奇虎360董事长，招齐旧部，研发了免费软件360安全卫士。</p><p>之前，傅盛也于2005年离开3721。周鸿祎给当时还只是基层产品经理的傅盛打了三个小时电话，既给傅盛反复解释自己在雅虎受的委屈，又劝他加盟奇虎360，“奇虎2到3年就可以上市。到2008年，你们都不用上班了，坐在家里看奥运”。傅盛放弃了自己的创业计划，同时也拒绝了许多公司的邀请，11月份选择加入奇虎360。</p><p>360创办之初，一大功能就是专门卸载各种流氓软件。百度助手、雅虎助手等一大批根深蒂固的插件被清理得干干净净。当时，周鸿祎的口号是“替天行道”。可能是在雅虎中国受气太多，这次360卸载的最大目标就是曾经由他一手创办的3721软件（现名雅虎助手），将雅虎助手定义为“流氓软件”，劝告用户对雅虎助手进行卸载。软件发布的头两个月，每天卸载的流氓软件就达100万个，其中雅虎助手的日均卸载量是60万。</p><p>不过，这可惹恼了马云，马云刚把雅虎中国纳入怀中，雅虎助手还是一项重要的盈利资源。马云于是放话：阿里巴巴旗下所有子公司及业务部门即日起永远不与周鸿祎投资及有关联的公司发生任何业务往来。后来，周鸿祎亲赴杭州谈和，这之后，两人才握手言和。</p><p> <img src="https://wx3.sinaimg.cn/large/69bbca83gy1fu0t79rpofj20zm0my0wm.jpg" alt="image"></p><p> 3Q大战来啦！！！</p><p>由于360安全卫士的免费策略，加上功能确实好用，迅速成为装机数量仅次于QQ的软件，2010年，腾讯推出QQ医生，界面及功能酷似360，同时宣布赠送诺顿防病毒软件半年试用。之后QQ医生利用春节期间强行推广。敏感的360很快意识到QQ医生的威胁，一些正在休假的员工被紧急召回以应对这起突发事件。360快速反应，加上QQ医生本身产品并不成熟就匆忙上阵，很多用户陆续卸载QQ医生，其市场份额也快速降至10%以下。360成为此次交锋的胜利者。</p><p>2010年9月27日，周鸿祎领导的360推出隐私保护器，称QQ偷窥用户隐私，随后又推出扣扣保镖可屏蔽QQ弹窗和广告等功能，接着，QQ立即指出360浏览器涉嫌借黄色网站推广。</p><p>2010年11月3日，腾讯宣布在装有360软件的电脑上停止运行QQ软件，用户必须卸载360软件才可登录QQ</p><p>  <img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t79zo9yj20cc07wmy3.jpg" alt="image"></p><p>再之后，360也弹窗报复腾讯的做法。</p><p><img src="https://ws4.sinaimg.cn/large/69bbca83gy1fu0t7a9as2j20qc0fq0vz.jpg" alt="image"></p><p>2010年11月，工信部通信保障局和公安部介入，用行政命令的方式要求双方不再纷争，两家公司不得再发布煽动此事的新闻和讯息。并责令进行全网道歉。之后360发布《QQ和360已经恢复兼容 感谢有您！》的公告，腾讯也随之发布了《和你在一起》的致歉信。</p><p>当时，王思聪还公开支持周鸿祎说：周鸿祎，别让我失望，我相信你手里不止这一张王牌!并且对周鸿祎的反击表示“原来老周早就预料到了”。​</p><p><img src="https://ws1.sinaimg.cn/large/69bbca83gy1fu0t7afhfqj20ev09ggm2.jpg" alt="image"></p><p>再之后，360和腾讯之间开始一场长达4年的诉讼战，包括“360诋毁腾讯案”、“腾讯诉奇虎360不正当竞争案”、“奇虎诉腾讯滥用市场支配地位案”。当然，这几场官司都是以360败诉收尾。“3Q大战”的结果是360落于下风，但奇虎360表示,“牺牲我一个，幸福千万家”</p><p>周鸿祎后来总结“3Q大战”时说：今天我回想“3Q”大战的一个重要的深层次原因是，Windows的软件推荐机制被中国互联网公司滥用了。这种推荐方式在法律上不能说不合法，也不能说用户不知情，这是行业的普遍现象。有专家说要以法律的手段来解决，但是法律的解决方式很慢，而且效果也不会很好。现在，技术的进步已经解决了这个问题，苹果把软件的推荐权掌握在自己手里，而且形成了商业模式，下载软件再也不能像Windows那样捆绑，安卓操作系统也类似于这样。所以，在手机上没有发生在用户不知情的情况下下载很多软件的情况。</p><p>2012年8月，周鸿祎推出360搜索，一周时间就占据10%的市场份额。百度股价应声大跌，市值蒸发70亿美金。于是，百度大规模反制360，对360所带流量强行跳转至百度首页；360随后做出回应，将网址导航搜索框中的百度产品全部撤掉，同时，用户使用360搜索时，点击来自百度的搜索结果，会被直接带至“网页快照”。“3B大战”就此爆发，周鸿祎和李彦宏也由此交恶。</p><p><center>360美国上市</center><br><img src="https://wx2.sinaimg.cn/large/69bbca83gy1fu0t7aoargj20zm0pedni.jpg" alt="image"></p><h4 id="和其他大佬的关系"><a href="#和其他大佬的关系" class="headerlink" title="和其他大佬的关系"></a>和其他大佬的关系</h4><p>曾国藩曾言，誉满天下，谤亦随之。这句话适用于所有的互联网大佬，以及所有的互联网大公司。周鸿祎对于这句话的理解，或许看得很清，所以，他也不会在意外界对他的非议，所以，他习惯我行我素。</p><p>周鸿祎有一次回忆说，他第一次见李彦宏：第一次相对而坐，我发现Robin和我的性格形成了强烈的反差，我像机关枪一样，把想说的话一股脑儿地都说了，包括怎么推广、怎么做插件，毫无保留。但是，对面坐着的Robin很沉静，一直在听，也不表态。到了最后，他才缓缓的说：“我觉得3721本质上做的也是搜索，以后肯定会有竞争。”</p><p>2014年12月27号晚上十点多，周鸿祎在微博向百度李彦宏公开发难：李彦宏我有个问题请教，十年前您做百度搜霸流氓软件也可以理解，现在您已经是中国首富之一，干嘛还坚持做流氓软件，这些天网上到处是用户抱怨被静默强制安装百度杀毒，还无法卸载，这行为已经完全符合互联网协会对于流氓软件的定义。您是有钱就任性吗，您钱再多就可以肆意糟蹋安全行业祸害用户么？</p><p>金山网络CEO傅盛曾说过，周鸿祎只尊重强者，他的哲学世界是弱肉强食，适者生存。</p><p>傅盛离开360后，他与360有期权等纠纷，360上市后，周鸿祎象征性地给傅盛账户打了一块钱。傅盛不受其辱，还想与360纠缠，有人劝他说，有功夫与老周扯皮，倒不如把精力放在金山网络。</p><p>陈一舟有一次谈创业，说了一句话，可以当作对周鸿祎的个人评价了，他说，“首先要像周鸿祎那样，把自己当做一个伟大的战士，他肯定是一个成功的创业者，他不会被干死的，这点我相信。当然，只要他扎的人不太多就行。”</p><p>周鸿祎引用万维钢的话谈及自己对英雄的定义：“所谓英雄，就是超越了阶层出身、超越了周边环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，能给世界带来惊喜、最不像机器人的人。”​</p><h4 id="老周身上的趣事"><a href="#老周身上的趣事" class="headerlink" title="老周身上的趣事"></a>老周身上的趣事</h4><p>周鸿祎曾说过“自己做得最对的选择，就是选择了自己的太太，没有太太，自己不可能成功。”。胡欢和周鸿祎两人结缘是在水木清华的BBS上，那时候，周鸿祎一开始就对胡欢有好感，于是利用电脑技术找到了胡欢的ID，每天都和她天南海北的聊天。</p><p>当初他们都在方正集团工作，不过周鸿祎周鸿祎还是个落魄的小工程师，每个月的收入只有1000块，没单独的地方住，每天在北大食堂蹭饭吃，外表毫不起眼。胡欢的家庭背景比他好得多，父母都是大学教授。</p><p>胡欢虽然很低调，但她也有自己的一方天地：其对外投资的公司多达25家，其中不乏有名的互联网公司。</p><p>2009年，胡欢投资了当时正欣欣向荣、快速发展的快播。到2011年的时候，胡欢出资1000万元，占到快播7.85%的持股比例；</p><p>此外，胡欢还用80万拿下了酷狗1.17%的持股；</p><p>2016年，胡欢还投了悟空租车，持股0.35%；</p><p>胡欢还投了不少网游公司，比如上海游互网络科技有限公司、四川九众互动网络技术有限公司、四川迅游网络科技股份有限公司等。</p><p>他们是在水木清华上成的第一对。</p><p><img src="https://wx3.sinaimg.cn/large/69bbca83gy1fu0t7ats57j20bv06kq32.jpg" alt="image"></p><p>周鸿祎做手机时，想尽办法进行推广。</p><p><img src="https://ws4.sinaimg.cn/large/69bbca83gy1fu0t7b0eowj20fa060glr.jpg" alt="image"></p><p>2008年汶川地震的时候，周鸿祎和王雷雷是第一批进入震区的IT老大。他的奇虎360团队做的一件事就是，抬遇难者遗体。​</p><p>很多时候，周鸿祎的性格像个小孩子，任性而为，让下属觉得可爱又可气。</p><p>2012年春节前360公司全员年会上，这本是一个喜庆的日子，周鸿祎看着台上的表演很无趣，不顾后面安排了他上场抽奖的环节，站起来闹着要走，这把当时筹备年会的同事急坏了，不得不把抽奖环节提前。后来当他上台抽奖玩high了以后，又不走了，还在上面让其他360高管每人掏出两万块钱给大家发红包，把所有人都逗乐了。</p><p>2016年上半年，为了推荐360的直播软件，周鸿祎不管去到什么场合都会拿起手机直播，有一次他与滴滴创始人程维同行游玩看到一对青蛙正在交配，他也拿出手机进行直播并与程维讨论，吸睛无数。</p><p>360浏览器其实不是自己做的，用的是世界之窗的OEM，世界之窗又是周鸿祎早年投资的，但周鸿祎刚开始并不太想用自己所投资的这家公司，而是找张朝阳希望跟搜狗合作，但张朝阳没有同意。</p><p>西安交大的计算机操作系统的老师和周鸿祎是一届的，提起他来就直呼之“流氓软件之父”</p><p>周鸿祎曾在微博上秀过他的这对号称花了300万烧来的音响，还有黑胶唱片机，他觉得这个爱好是低调奢华有内涵。</p><p><img src="https://wx4.sinaimg.cn/large/69bbca83gy1fu0t7b9vtij210c0pm7cd.jpg" alt="image"></p><p>周鸿祎的办公室，曾经挂着切·格瓦拉的照片，在座位的左后侧，居然还放了一尊观音像</p><p><img src="https://wx1.sinaimg.cn/large/69bbca83gy1fu0t7bk1gej210i0higs7.jpg" alt="image"></p><p><center>老周的办公室</center><br><img src="https://wx1.sinaimg.cn/large/69bbca83gy1fu0t7btaqej20qy0yate3.jpg" alt="image"></p><p>2015年上半年某天中午，北京酒仙桥360大厦“乌烟瘴气”，一群奇虎360公司员工正在大厦一层抽烟，周鸿祎路过时无意间看到这一幕，身为公司创始人的他极为不爽，让各部门管理人员到楼下将员工“认领”回去。不过，很多管理人员都觉得这是个人私事，并没有去执行。</p><p>第二天中午，周鸿祎来到一层，掏出手机，对着抽烟员工的工牌挨个“咔擦”拍照，然后把拍下的照片发到公司工作交流的聊天群里，让各个部门对号进行罚款。第三天中午，再也没有360员工在大厦一层抽烟了。</p><p>周鸿祎还特别喜欢诗词，尤其喜欢南唐后主李煜。每当心中烦闷之时，他便拿出一根烟，仰望天空45度，吐着烟圈吟诵道：“桃李依依春暗度，谁在秋千，笑里低低语。一片芳心千万绪，人间没个安排处。”  </p><p>有一次，360公司部分员工集体婚礼，老周去做证婚人，他说：祝你们大家新欢快乐，早生贵子啊，我们特别希望360下面，我们有了这么多有了家庭很快会有孩子、有责任感的这些优秀的产品经理和技术人员，我希望你们能够把这种爱，也能够放到我们的产品中间来。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>周鸿炜的经历是真的丰富啊，一个普普通通的程序员，最困难的时候还有了一个好的媳妇，羡慕，人生若如此，夫复何求。</p>]]></content>
      
      <categories>
          
          <category> 互联网大佬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次改进部署静态文件的经历</title>
      <link href="/2019/01/11/%E4%B8%80%E6%AC%A1%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/01/11/%E4%B8%80%E6%AC%A1%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
      <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p><a href="https://yuhongjing.github.io/library">余鸿靖手册小站</a><br>这几天心血来潮想做一个手册网站，来记录一些系列类型的文章，于是一眼就相中了vuepress。<br>三下五除二就搞定了我的手册网站。正准备收尾的时候，却发现痛苦的事情才刚到来!<br><a id="more"></a></p><h3 id="令人窒息的部署流程"><a href="#令人窒息的部署流程" class="headerlink" title="令人窒息的部署流程"></a>令人窒息的部署流程</h3><p>本地库的大体流程如下:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">远程github的库下有<span class="number">2</span>个分支</span><br><span class="line">    <span class="literal">master</span>: 保存打包后的静态页面---用于展示page页</span><br><span class="line">    dev: 保存网页的源代码---换物理机也不影响代码丢失</span><br><span class="line"></span><br><span class="line">本地库下也有<span class="number">2</span>个分支</span><br><span class="line">    <span class="literal">master</span>: 保存打包后的静态页面---推送至远程<span class="literal">master</span></span><br><span class="line">    dev: 网页的源代码---推送至远程的dev</span><br></pre></td></tr></table></figure></p><p>于是乎我每次的部署流程如下:</p><ol><li>在dev分支下编写文章，打包文件，推送源代码到dev</li><li>把打包的文件复制出来，然后切换到master（没错，切换还挺费时间的，文件比较多）</li><li>把打包的文件再复制到master分支下，并推送到远程master（现在一个完整的更新流程才完成了）</li><li>但是，如果文章有不满意的地方，我又需要切回dev分支重复以上操作一次</li></ol><p>天呐！地狱般的效率,不能忍受了！</p><h3 id="hexo的恩爱情仇"><a href="#hexo的恩爱情仇" class="headerlink" title="hexo的恩爱情仇"></a>hexo的恩爱情仇</h3><p>先不要吐槽我，本地为什么需要用两个分支，为什么不直接在打包后的文件夹直接推送master就行了。<br>因为我的博客是用hexo搭建,它的推送流程如下:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">本地两个分支</span><br><span class="line"><span class="symbol">    master:</span> 打包后的静态网站代码(你不能在此放你的源代码，因为它每次都会把分支下的所有文件清空，然后放置打包后的代码)</span><br><span class="line"><span class="symbol">    dev:</span> 你的源代码(因为master放不了，所以新建立分支存放源代码)</span><br><span class="line">远程两个分支</span><br><span class="line"><span class="symbol">    master:</span> 打包后的静态代码---用于展示page页 </span><br><span class="line"><span class="symbol">    dev:</span> 源代码---保存源代码</span><br></pre></td></tr></table></figure></p><p>没错，想必你已经知道了，我就是仿照这个来建立的分支。<br>所以，我忘了vuepress打包后，是不会删除其他的代码的，这意味着，我的源代码和打包后的代码可以放一起。<br>好吧，来改进一下吧。</p><h3 id="尝试改进"><a href="#尝试改进" class="headerlink" title="尝试改进"></a>尝试改进</h3><p>所以，现在我可以不用来回切换分支，拖动文件来部署文件了。<br>目前的流程如下:</p><ol><li>在dev分支下编写文章，打包文件，推送源代码到dev</li><li>进入打包的文件，推送到master</li></ol><p>但是操作还是挺多的,毕竟还是需要add,commit,push三连。还是很难受，而且还要进入子文件夹。<br>想到hexo的<code>hexo g -d</code>一键部署我就觉得这还是太麻烦了！  </p><h3 id="再次改进"><a href="#再次改进" class="headerlink" title="再次改进"></a>再次改进</h3><p>想到可以通过bash来帮我自动执行这一系列操作。<br>于是在目录下创建一个deploy.sh的文件，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"deploy"</span></span><br><span class="line"></span><br><span class="line">git push -f git@github.com:yuhongjing/library.git master</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure></p><p>这时我们就可以直接<code>bash deploy.sh</code>一句话就能够部署了！<br>如果需要一并提交源代码，我们也可以在这里面再多添加几句话就搞定了！  </p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果系统不支持bash,可以下载一个<code>git bash</code>来使用bash命令。  </p><p>如果你觉得打开bash还是太麻烦，你可以在项目的package.json添加如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"bash deploy.sh"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的话，你就可以直接<code>npm run deploy</code>即可。<br>emmmmmm，懒果然是人类进步的动力啊！</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第8期-CSS和JS是如何阻塞DOM解析和渲染的?</title>
      <link href="/2019/01/05/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC8%E6%9C%9F-CSS%E5%92%8CJS%E6%98%AF%E5%A6%82%E4%BD%95%E9%98%BB%E5%A1%9EDOM%E8%A7%A3%E6%9E%90%E5%92%8C%E6%B8%B2%E6%9F%93%E7%9A%84/"/>
      <url>/2019/01/05/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC8%E6%9C%9F-CSS%E5%92%8CJS%E6%98%AF%E5%A6%82%E4%BD%95%E9%98%BB%E5%A1%9EDOM%E8%A7%A3%E6%9E%90%E5%92%8C%E6%B8%B2%E6%9F%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端性能优化时，大家都知道的一个办法就是<code>CSS</code>尽量放头部，<code>JS</code>放底部。<br>然后它的原理是为什么，可能很多人并不是特别清楚。<br><a id="more"></a></p><h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p><code>node</code>端的睡眠函数，使用setTimeout模拟。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res()</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是一个延时函数，如果<code>CSS</code>或者<code>JS</code>文件名有<code>sleep4000</code>之类的前缀时，意思就是延迟4000毫秒才会返回这个文件。</p><p>下面使用的<code>HTML</code>文件如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background: lightgreen;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们将会在其中插入不同的<code>CSS</code>和<code>JS</code>。  </p><p>而使用的<code>common.css</code>,不论有没有前缀，内容都如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开始测试吧！</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>关于<code>CSS</code>,大家都知道<code>&lt;link&gt;</code>标签放在头部的性能会高一点(因为并行下载)。<br>不过很少人知道如果<code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>同时在头部的话，<code>&lt;script&gt;</code>在<code>&lt;link&gt;</code>上可能会更好。<br>这是为什么呢？下面来看看<code>CSS</code>对<code>DOM</code>的影响是什么。</p><h4 id="CSS不会阻塞DOM的解析"><a href="#CSS不会阻塞DOM的解析" class="headerlink" title="CSS不会阻塞DOM的解析"></a>CSS不会阻塞DOM的解析</h4><p>一定注意是解析！证明如下，首先在头部插入<code>&lt;script src=&quot;/js/logDiv.js&quot;&gt;&lt;/script&gt;</code>。<br><code>JS</code>文件的内容如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure></p><p><code>defer</code>属性大家应该很熟悉，MDN对此的描述是用来通知浏览器该脚本将在文档完成解析后，触发DOMContentLoaded事件前执行。设置这个属性能保证<code>DOM</code>解析后马上打印出<code>DIV</code>。</p><p>之后将<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/sleep4000-common.css&quot;&gt;</code>插入<code>HTML</code>文件的任意位置，打开浏览器，可以看到首先打印出<code>div</code>这个<code>DOM</code>节点，过3S左右后才渲染出一个浅蓝色的<code>div</code>。这就证明了<code>CSS</code>是不会阻塞<code>DOM</code>的解析的，尽管<code>CSS</code>下载需要3S，但是整个过程中，浏览器不会傻傻等着<code>CSS</code>下载完，而是会解析<code>DOM</code>的。</p><p>这里说明一下浏览器的渲染过程，浏览器是解析<code>DOM</code>生成<code>DOM Tree</code>,然后结合<code>CSS</code>生成的<code>CSS Tree</code>，最终生成<code>render tree</code>,最后才渲染页面。由此可见，在此过程中<code>CSS</code>完全无法影响<code>DOM Tree</code>，因为无法阻塞<code>DOM</code>的解析。然而，<code>DOM Tree</code>和<code>CSS Tree</code>会组合成<code>render tree</code>。那么<code>CSS</code>会不会阻塞页面渲染呢？想必你已经知道了！</p><h4 id="CSS阻塞页面渲染"><a href="#CSS阻塞页面渲染" class="headerlink" title="CSS阻塞页面渲染"></a>CSS阻塞页面渲染</h4><p>其实这一点，刚才的例子已经说明了，如果<code>CSS</code>不会阻塞页面阻塞渲染，那么<code>CSS</code>文件下载之前，浏览器就会渲染出一个浅绿色的<code>div</code>，之后再变成浅蓝色。浏览器的这个策略其实很明智的，想象一下，如果没有这个策略，页面首先会呈现出一个原始的模样，待<code>CSS</code>下载完之后又突然变了一个模样。用户体验可谓极差，而且渲染是有成本的。</p><p>因此，基于性能与用户体验的考虑，浏览器会尽量减少渲染的次数，<code>CSS</code>顺理成章地阻塞页面渲染。</p><p>然而，事情总有奇怪的，请看这例子，<code>HTML</code>头部结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/sleep3000-common.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/logDiv.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>思考一下这会产生什么结果呢？</p><p>答案是浏览器会转圈圈三秒，但此过程中不会打印任何东西，之后呈现出一个浅蓝色的<code>div</code>，再打印出<code>null</code>。结果好像是<code>CSS</code>不单阻塞了页面渲染，还阻塞了<code>DOM</code>的解析啊！请先思考一下是什么阻塞了<code>DOM</code>的解析，刚才已经证明了<code>CSS</code>是不会阻塞的，那么阻塞了页面解析其实是<code>JS</code>！但明明<code>JS</code>的代码如此简单，肯定不会阻塞这么久，那就是<code>JS</code>在等待<code>CSS</code>的下载，这是为什么呢？</p><p>仔细思考一下，其实这样做是有道理的，如果脚本的内容是获取元素的样式，宽高等<code>CSS</code>控制的属性，浏览器是需要计算的，也就是依赖于<code>CSS</code>。浏览器也无法感知脚本内容到底是什么，为避免样式获取，因而只好等前面所有的样式下载完后，再执行<code>JS</code>。因而造成了之前例子的情况。</p><p>所以，大家明白为何<code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>同时在头部的话，<code>&lt;script&gt;</code>在上可能会更好了么？之所以是可能，是因为如果<code>&lt;link&gt;</code>的内容下载更快的话，是没影响的，但反过来的话，<code>JS</code>就要等待了，然而这些等待的时间是完全不必要的。</p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p><code>JS</code>，也就是<code>&lt;script&gt;</code>标签，估计大家都很熟悉了，会阻塞<code>DOM</code>解析和渲染。然而，其中其实还是有一点细节可以考究一下的，我们一起来好好看看。</p><h4 id="JS阻塞DOM解析"><a href="#JS阻塞DOM解析" class="headerlink" title="JS阻塞DOM解析"></a>JS阻塞DOM解析</h4><p>首先我们需要一个新的<code>JS</code>文件名为<code>blok.js</code>，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">  arr.splice(i % <span class="number">3</span>, i % <span class="number">7</span>, i % <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure></p><p>其实那个数组操作时没意义的，只是为了让这个<code>JS</code>文件多花执行时间而已。之后把这个文件插入头部，浏览器跑一下。</p><p>结果估计大家也能想象得到，浏览器转圈圈一会，这过程中不会有任何东西出现。之后打印出<code>null</code>，再出现一个浅绿色的<code>div</code>。现象就足以说明<code>JS</code>阻塞<code>DOM</code>解析了。其实原因也很好理解，浏览器并不知道脚本的内容是什么，如果先行解析下面的<code>DOM</code>，万一脚本内全删了后面的<code>DOM</code>，浏览器就白干活了。更别谈丧心病狂的<code>document.write</code>。浏览器无法预估里面的内容，那就干脆全部停住，等脚本执行完再干活就好了。</p><p>对此的优化其实也很显而易见，具体分为两类。如果<code>JS</code>文件体积太大，同时你确定没必要阻塞<code>DOM</code>解析的话，不妨按需要加上<code>defer</code>或者<code>async</code>属性，此时脚本下载的过程中是不会阻塞<code>DOM</code>解析的。</p><p>而如果是文件执行时间太长，不妨分拆一下代码，不用立即执行的代码，可以使用一下以前的黑科技：<code>setTimeout()</code>。当然，现代的浏览器很聪明，它会“偷看”之后的<code>DOM</code>内容，碰到如<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;img&gt;</code>等标签时，它会帮助我们先行下载里面的资源，不会傻等到解析到那里时才下载。</p><h4 id="浏览器遇到-lt-script-gt-标签时，会触发页面渲染"><a href="#浏览器遇到-lt-script-gt-标签时，会触发页面渲染" class="headerlink" title="浏览器遇到&lt;script&gt;标签时，会触发页面渲染"></a>浏览器遇到<code>&lt;script&gt;</code>标签时，会触发页面渲染</h4><p>这个细节可能大家并不清楚，其实这才是解释上面为何<code>JS</code>执行会等待<code>CSS</code>下载的原因。先上例子,<code>HTML</code>内<code>body</code>的结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/sleep3000-logDiv.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">background: lightgrey;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/sleep5000-logDiv.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/common.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个例子也是很极端的例子，但不妨碍它透露给我们很多重要的信息。想象一下，页面会怎样呢？<br>答案是先浅绿色，再浅灰色，最后浅蓝色。由此可见，每次碰到<code>&lt;script&gt;</code>标签时，浏览器都会渲染一次页面。这是基于同样的理由，浏览器不知道脚本的内容，因而碰到脚本时，只好先渲染页面，确保脚本能获取到最新的<code>DOM</code>元素信息，尽管脚本可能不需要这些信息。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>综上所述，我们得出这样的结论：</p><ol><li><code>CSS</code>不会阻塞<code>DOM</code>的解析，但会阻塞<code>DOM</code>渲染。</li><li><code>JS</code>阻塞<code>DOM</code>解析，但浏览器会”偷看”<code>DOM</code>，预先下载相关资源。</li><li>浏览器遇到<code>&lt;script&gt;</code>且没有<code>defer</code>或<code>async</code>属性的标签时，会触发页面渲染，因而如果前面<code>CSS</code>资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。</li></ol><p>所以，大家现在明白为何<code>&lt;script&gt;</code>最好放底部,<code>&lt;link&gt;</code>最好放头部，如果头部同时有<code>&lt;script&gt;</code>与<code>&lt;link&gt;</code>的情况下，最好将<code>&lt;script&gt;</code>放在<code>&lt;link&gt;</code>上面了吗？</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阻塞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网大佬系列--雷军</title>
      <link href="/2019/01/03/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E9%9B%B7%E5%86%9B/"/>
      <url>/2019/01/03/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E9%9B%B7%E5%86%9B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>雷军，一个非常勤奋的人。<br>武汉大学两年就修完所有课程，汇编满分。<br>20多岁就是金山总经理，不多说,深深膜拜！<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="勤奋的雷布斯​"><a href="#勤奋的雷布斯​" class="headerlink" title="勤奋的雷布斯​"></a>勤奋的雷布斯​</h4><p>1987年的高考，雷布斯​选择了武汉大学，按照他的成绩，考入清华北大也是没问题。至于为什么他会放弃清华，圈内流传最多的是，当时一个好友在中科大学学的就是计算机，所以他报考了武汉大学计算机系。</p><p>18岁时，雷布斯​考入了武汉大学计算机系，当时的武汉大学刚实行学分制，学分满了就可以毕业。雷布斯​是个典型的理工男，对技术尤为痴迷，得知修满学分就能毕业，他就发奋苦学，上课时间不够用，他就课外时间偷跑到机房学习，他改掉午休习惯，从早学到晚，只用了两年时间，就修完了四年大学的学分。他说道：“我特别害怕落后，怕一旦落后，我就追不上了，我不是一个擅长在逆境中前行的人，我更愿意把事情研究透了再前行。”​</p><p>雷布斯当年在学校勤奋学习，技术了得，还出了一本书，老师一看，“呦呵，小伙子这么有才，都出书了”，就让他去给教学电脑杀毒，然后，雷布斯就设计出了一个杀毒软件，大家用了都说好。当时，湖北省公安厅还请他去讲课。他写了洋洋洒洒的发言稿，打算讲两小时，但是念完稿子，才花了15分钟。然后，然后。。。他咽了咽口水，擦擦汗，又念一遍。1987年的高考，雷布斯​选择了武汉大学，按照他的成绩，考入清华北大也是没问题。至于为什么他会放弃清华，圈内流传最多的是，当时一个好友在中科大学学的就是计算机，所以他报考了武汉大学计算机系。</p><p>18岁时，雷布斯​考入了武汉大学计算机系，当时的武汉大学刚实行学分制，学分满了就可以毕业。雷布斯​是个典型的理工男，对技术尤为痴迷，得知修满学分就能毕业，他就发奋苦学，上课时间不够用，他就课外时间偷跑到机房学习，他改掉午休习惯，从早学到晚，只用了两年时间，就修完了四年大学的学分。他说道：“我特别害怕落后，怕一旦落后，我就追不上了，我不是一个擅长在逆境中前行的人，我更愿意把事情研究透了再前行。”​</p><p>雷布斯当年在学校勤奋学习，技术了得，还出了一本书，老师一看，“呦呵，小伙子这么有才，都出书了”，就让他去给教学电脑杀毒，然后，雷布斯就设计出了一个杀毒软件，大家用了都说好。当时，湖北省公安厅还请他去讲课。他写了洋洋洒洒的发言稿，打算讲两小时，但是念完稿子，才花了15分钟。然后，然后。。。他咽了咽口水，擦擦汗，又念一遍。</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6zcesq6jj312w0lw7fm.jpg" alt="image"></p><center>尴尬的雷布斯</center><p>雷布斯​在刚入学的第一天晚上他就去上课了，这一堂课叫“怎么上好大学”，后来，雷军觉得这堂课让他受益终生。</p><p>武汉大学拿过《汇编语言程序设计》满分的，20年内加起来只有两个人，雷军就是其中之一。他还拿走了几乎所有的奖学金。​</p><p>​雷布斯刚毕业时候，当时国内除了中关村创业风潮如火如荼，武汉广埠屯电子一条街也容纳了数百家电脑公司，以及大批的IT创业者。于是，大家经常看到，广埠屯出现了一个怪人。每天骑辆破自行车，背个大包，咣当咣当。​雷布斯解释说，破车不锁都没人偷，安心。他的大包里装的都是计算机专业书，他说自己要理论联系实际。计算机专业，理论很重要，实践更重要。</p><p>在三色公司创业期间，雷布斯与王全国合作编写了第一个正式作品BITLOCK加密软件并组建了黄玫瑰小组；除此还用PASCAL编写免疫90，此产品获得了湖北省大学生科技成果一等奖。</p><p>雷布斯​写过加密软件、杀毒软件、财务软件、CAD软件、中文系统以及各种小工具，甚至还干过“黑客”，解密各种各样的软件。客户让他做什么就认真做。闲来有空，他还和同事合著了《深入DOS编程》，成了当时不少程序员学习的权威书籍。​</p><p>雷布斯刚加入金山时，相信事在人为，他一天要工作16个小时，每周工作七天。凭着自己踏实的苦干，雷军又在金山闯出了自己的成绩，没过几年就当上了总经理。​</p><p>金山转型做网游的时候，雷总想了解网游行业，白天工作，晚上玩传奇，有时玩累了就睡在公司里。​</p><p>创办小米的时候一个一个的搞定合伙人，一谈就是10小时，一个月几次。</p><p>姚劲波也曾经对雷总这种勤奋表示过钦佩：</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft7a3sd7eej30jw0g074w.jpg" alt="image"></p><p>对于自己的大学同学雷军，陈一舟表示全行业没有人比雷军更努力，“我们行业平均的努力程度可能只有他的一半”​</p><p>王川说：毫无疑问肯定是雷军更努力啊，我睡得当然比他早了。雷军每天工作十五六个小时，每周工作六到七天，很少有人能像他那样劳模了。每天这么高强度的工作，一定需要巨大的信念支撑。雷军的希望是小米能够像索尼之于日本、三星之于韩国一样， 改变中国制造在全球的印象，用质优价廉来改变每个人的生活。我没有那么高的追求，只能协助他实现这个梦想了。​</p><p>张小龙的饭否日记里曾评论过，不理解为什么雷军现在（2011年前后）还在用“八一精神”工作。</p><h4 id="低调的雷布斯"><a href="#低调的雷布斯" class="headerlink" title="低调的雷布斯"></a>低调的雷布斯</h4><p>曾有个妹子爆料，2014年夏天，她在新华社实习，7月25号早晨，另外一个部门的姐姐说让和她一起去大院门口为来访的客人办手续，她急急忙忙的跑到门口，看到一辆黑色的奔驰旁边站了三位先生，都是T恤牛仔裤运动鞋，其中一位背了双肩包。走上前去问：请问你们是到访新媒体中心的的客人么。他们很有礼貌的迎上前来说是的是的，然后握手并且双手递上名片，这时才看清楚其中一位是雷军。就有些呆 了，2014年小米也算挺火的了诶毕竟，然后和那位姐姐办好手续之后带他们去新闻大厦一层，我们的几位主编已在等候迎接了，记得雷军说了一句：我的普通话不好，请担待。然后又是和在场的人，每一位不管是小实习生还是主编主动握手，接着双手递上名片。</p><p>卓越出售给亚马逊后，有记者询问原因。结果，雷布斯很诚实很认真的说了句：因为卓越没钱了。</p><p>雷布斯基本没啥派头，平时穿衣服也不修边幅。公司搬新家后。雷布斯从外面进公司，因为手里拎着外卖（他爱吃盒饭嘛），进大门被新保安拦住，雷布斯说：“我姓雷。”保安：“你姓啥也不好使，把工牌拿出来。”雷布斯无奈，给公司行政打了电话，才把自己放进去。</p><p>互联网大佬都有英文名Pony 、Charles 、Jack 、Robbin、William、Richard… 就雷军一个人没有(是不是因为英语是体育老师教的原因。。。) 。</p><p>有一阵子金山流行逢人就叫X总，比如孔总，邢总，连前台妹子都叫总，后来雷布斯宣布除了求伯君叫求总，雷军叫雷总，其他一律不可以叫X总。</p><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6zivunb7j30go0bu0tw.jpg" alt="image"></p><p>朋友的老婆在他们家当过保姆，当时雷军还是在中关村上班的时候，估计10多年前吧。他吃饭特别不挑，所以做饭做菜特别省心，有啥吃啥，很好打发。在家沉默寡言，话不是很多。</p><p>雷布斯有一次跑去高中原校址，也就是仙桃八中，悄悄地走到了教室后面，然后偷偷的看同学们上课。</p><p><img src="https://wx1.sinaimg.cn/large/0078QYBYgy1ft79kjwj20j309n07zjrh.jpg" alt="image"></p><p>2007年12月20日下午，雷布斯以健康原因辞去总裁与CEO职务，离开金山。在2007年到2010年的三年里，雷军辞掉了秘书、司机，独自一人以创业者的视角重新思考世界，他悟到了：“这个世界上聪明的人，勤奋的人太多太多，这都只是做事的必要条件，更关键的是，人一定要顺势而为。”​</p><h4 id="自我感觉良好的雷布斯"><a href="#自我感觉良好的雷布斯" class="headerlink" title="自我感觉良好的雷布斯"></a>自我感觉良好的雷布斯</h4><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6bizbqzaj30fk0e0jrt.jpg" alt="image"></p><center>抢到算我输！</center><p>雷布斯是程序员出身，技术功底了得，经常对着自己编写的代码孤芳自赏，“看看我这个递归写的，妙哉！”某天，技术人员帮雷军清理硬盘，误操作，把硬盘进行了不可逆的格式化。雷军多年来辛辛苦苦积攒的精妙代码全没了，雷军叼着根小烟，仰望天空45度，眼中含着泪水，恍惚了一整天。此次误操作，也改变了他的一生，让他彻底放下技术，完成了一个程序员到产品经理的蜕变。</p><p><img src="https://wx3.sinaimg.cn/large/0078QYBYgy1ft6blyem48j30dw09xwev.jpg" alt="image"></p><center>雷军和求伯君</center><p><img src="https://wx1.sinaimg.cn/large/0078QYBYgy1ft6bmelrqlj30do096aav.jpg" alt="image"></p><center>金山员工图鉴</center><p>在某重大会议上，雷总专心的自拍姿势被摄影师抓拍到，并上了央视新闻（雷总：你这破手机，敢说我不美！我换个角度再试试）。​</p><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6bn8bjxaj30ei09dt9i.jpg" alt="image"></p><p>年会上的雷布斯，这矫健的身姿，这开心的表情，这姿势，简直是摩擦摩擦，在这光滑的地上摩擦，似魔鬼的步伐，似广场舞大妈，似老阿姨来了，似。。。</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6bola1v1j30k00dcwfr.jpg" alt="image"></p><p>在某次会议上，雷总全程一小时都在玩手机，自拍，偶尔还对着镜头中的自己露出了慈祥的笑容。（手机手机，你来说说这个世界上谁是最帅的男人。。。）</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6brgg7e4j30k00cvqes.jpg" alt="image"></p><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6bszz8ywj30hs08yaal.jpg" alt="image"></p><p>雷总当年刷知乎很勤奋，经常在知乎偷偷关注自己的问题。</p><p><img src="https://wx3.sinaimg.cn/large/0078QYBYgy1ft6btegylpj30k00zkgpe.jpg" alt="image"></p><p>年会上的雷财神​（很有喜感，看完这张图，今年绝对要捡钱。。。）</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6bvxnruhj30bt08z74m.jpg" alt="image"></p><p>做小米之前，雷总为了说服其他大佬和自己一起创业，说：第一，我有热情。第二，如果没有投资人愿意给我钱，我自己掏一亿美金来做，亏光了算了。</p><h4 id="有点抠门的雷布斯​"><a href="#有点抠门的雷布斯​" class="headerlink" title="有点抠门的雷布斯​"></a>有点抠门的雷布斯​</h4><p>雷布斯平时喜欢吃盒饭，合作伙伴到他办公室聊天，从上午10点聊到12点，谈笑风生之后，大伙大眼瞪小眼，等着安排午饭，雷总微微一笑，懂了。默默的从抽屉里掏出一沓子外卖单，黄焖鸡米饭，武汉热干面什么的。招呼大家点餐，“来来来，喜欢吃什么，自己点。”</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft79rfrnxwj30hs0kz0tv.jpg" alt="image"></p><p>99年的时候，金山中午给员工订盒饭，很难吃，但是雷总每次吃得又快又干净，其他人见老板都吃的这么开心，所以也就不好抱怨什么了。</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6znn8bhfg30cw084gmm.gif" alt="image"></p><p>我记得有一次我们一起参加一个朋友的婚礼，还买了一块搓衣板。雷军这个人很细心，说我们用礼品纸包装起来，给他一个惊喜。后来去参加婚礼的时候当场拆的，人家看包装以为是键盘，结果是搓衣板。</p><p>雷军从前在金山是很抠的，对员工很苛刻，他自己当劳模，就要求别人也当劳模，团队一直是很苦的。2007年王峰离开金山出来创业了，李学凌见了他就说，“哎呀，你怎么才出来啊”。</p><h4 id="深入人民群众的雷布斯"><a href="#深入人民群众的雷布斯" class="headerlink" title="深入人民群众的雷布斯"></a>深入人民群众的雷布斯</h4><p>记得小米手机刚出来的时候，学校里都是“买小米手机上大学，校友雷军时刻激励我进步！”的宣传标语。</p><p>2013年江苏卫视有一档真人秀，雷军被节目组要求上街发问卷，全程都很随和，态度很诚恳，完全看不出这是一个亿万富翁，大家可以看看：视频连接：<a href="https://www.bilibili.com/video/av7193536?share_medium=android&amp;share_source=copy_link&amp;bbid=5F365F8C-95D0-4AA9-B996-1F5D6EB50D711988infoc&amp;ts=1516076756047" target="_blank" rel="noopener">https://www.bilibili.com/video/av7193536?share_medium=android&amp;share_source=copy_link&amp;bbid=5F365F8C-95D0-4AA9-B996-1F5D6EB50D711988infoc&amp;ts=1516076756047</a></p><p>​某天晨会，雷总说：”有位销售部的同事昨天夜里打电话给我，说有个天大的好消息要在晨会宣布。“那位销售同事一脸尴尬，说：”昨天夜里喝高了，胡说的。。。“。于是，于是大家就缓缓地散去了。</p><p>雷总得了个女儿，金山内部论坛发起起名字活动，最高票的叫”雷婷婷“，但是这个名字没有被雷总采纳。(大家猜猜为什么)</p><p>当初，雷布斯在印度发布会上一句“Are you OK？”火遍全国，后来视频被B站恶搞，一般企业老总不说生气，起码也高兴不到哪去。雷军看了鬼畜视频后，哈哈一乐，一拍桌子说：这个有意思，可以推一波。然后买了微博的关键字和大V传播，第二天，Are you OK 才彻底火了。很多人以为Are you OK是自然发酵，其实是小米人自己推的。主要还是老板比较开明。</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft6d5luol4j30hs0b9753.jpg" alt="image"></p><p>雷总曾经搞了一次线上直播，直播刚开始，普通话拖了他的后腿，湖北出生的雷军操着口音浓重的“普通发”给大家讲解新品。此时，雷军不知从哪，掏出一盏台灯，感叹道：“贼个色计四在四太漂酿呢！”</p><p>还是那次直播，弹幕里出现最多的就是陈年，因为那段时间陈年骂了周杰伦，已经成了周杰伦粉丝的公敌了。作为陈年的基友，雷军非但没有避讳，还主动拿这事儿调侃陈年，大声吆喝：“陈年别捣乱了，陈年！欢迎大家后天跑去陈年的直播骂他啊。”来看看当日直播，雷总的经典语录：</p><p>弹幕：雷总，送台无人机呀。</p><p>雷布斯：送无人机?兄弟们，做网红不容易，做产品也很难。</p><p>弹幕：雷总，有人送你辆保时捷</p><p>雷布斯：谢谢，大家不要送车了，刷屏不太好，送花就好了。你们知道，我只喜欢车的嘛。</p><p>弹幕：雷总，会唱歌吗？</p><p>雷布斯：开玩笑，雷总我在 B 站可是第一歌星。</p><p>哈哈哈，喜欢这样富有自黑精神的雷布斯。</p><p><img src="https://wx1.sinaimg.cn/large/0078QYBYgy1ft6ztctmkvj30go0esn1v.jpg" alt="image"></p><h4 id="热爱回馈母校的雷军​"><a href="#热爱回馈母校的雷军​" class="headerlink" title="热爱回馈母校的雷军​"></a>热爱回馈母校的雷军​</h4><p>98年，雷布斯刚毕业不久，把自己炒股赚的60万全捐给武汉大学做奖学金。武汉大学第一个毕业不到10年，回学校捐款的学生。</p><p>武大校庆120周年的时候，给母校捐了5千万。后来院长暗示他，要捐就捐给”亲妈”计算机学院。雷军同志表示下一次会注意。</p><p>后来，雷军又给母校捐款99999999元，离1亿元差1元，雷军解释，是比陈东升师兄少一点，并希望更多的校友参与，而不是为了攀比。（我想给雷总补一元，和他一起为武汉大学捐款一亿元。）</p><h4 id="雷总的一些小特质和趣事"><a href="#雷总的一些小特质和趣事" class="headerlink" title="雷总的一些小特质和趣事"></a>雷总的一些小特质和趣事</h4><p>雷军早期编写的软件保护系统，自己起了一个非常骚气的代号，叫“黄玫瑰”​。（黄玫瑰代表纯洁的友谊和美好的祝福。）</p><p>雷总有时候做事很犹豫，经常一边喝着可乐，一边不停地擦桌子上的灰尘，他会把同一个问题连续问10遍，但是你根本不用回答他，因为他会一遍一遍重复自己的观点，他心里早就有答案了。​</p><p>雷总的大女儿16年从人大附中毕业的，一直是年级前5，并且为人很好，特别节约。</p><p>开会从来不迟到。</p><p>他爱下围棋，中学时成了围棋冠军。</p><p>雷总特别爱好诗词，尤其是李煜的词，没事就看《小说月报》，后来读大学，给报刊杂志投稿，赚生活费。​雷总工作后，业务爱好，就是写诗，经常对着自己写的诗，啧啧啧的赞叹。（好湿！好湿啊！）</p><p>雷总烟瘾很大，抽中南海最便宜的那种，有一次会议，雷总问身边的人（那个时候北京还没有室内禁烟条例）有没有抽烟的，当时一个分公司总裁说没有，雷总就愣是整个会议期间没抽。</p><p>雷总好胜心很强，公司年会时做个小游戏，带点儿比赛性质，他输了，千方百计要求再来一次，第二次他赢了。​（耶！我是最棒的！）</p><p>雷军自己在专访中说过，毕业后和同学在武汉创业。当时资金紧张，每次没钱吃饭的时候就让牌技最好的一个合伙人去外面打牌。因为这个战术，度过了最艰难的一段岁月。（这段可以拍进电影）</p><p>雷军经常去一家叫豹王的咖啡店，在知春路口，也经常介绍朋友或者带一大堆人去喝咖啡，聊天，谈生意。创业初期金山，雷军系很多项目都是在豹王咖啡聊出来的。但是他每次去咖啡店只喝健怡可乐。​（据说雷总特别喜欢喝可乐，黄章也说过，哈哈哈哈。）</p><p>在创办小米之后，雷军还创办了一家叫顺为的基金管理顾问公司。这其实是雷军很多年的感悟，什么时候都需要顺势而为。​</p><p>雷军从卓越套出来的钱是他后来做天使投资人的本钱。</p><h4 id="和其他大佬、明星的关系"><a href="#和其他大佬、明星的关系" class="headerlink" title="和其他大佬、明星的关系"></a>和其他大佬、明星的关系</h4><p>把朋友搞的多多的，敌人搞的少少的 —— 雷总的做人，做公司方法论。</p><p>周鸿祎和雷军的相识，得益于早些年，他两的妻子都在方正工作，而且关系很好，两家经常互相串门，雷军还亲自下厨。</p><p><img src="https://wx3.sinaimg.cn/large/0078QYBYgy1ft6denisytj309e09ndfw.jpg" alt="image"></p><p>黄章曾说：雷总特别喜欢喝可乐，当年隔三差五就来我办公室喝可乐。</p><p>做小米的时候，余承东对小米的看法：​</p><p><img src="https://wx3.sinaimg.cn/large/0078QYBYgy1ft6ddl1wbtj30hs08hwez.jpg" alt="image"></p><p><img src="https://wx1.sinaimg.cn/large/0078QYBYgy1ft6deigairj30go0b43zb.jpg" alt="image"></p><center>​乌镇饭局上的余承东和雷军</center><p>有一次，雷总把一个人的项目拒了，就和周围的人说：“这人獐头鼠目的，满嘴跑火车，是不是做过传销? 说的项目这么大，怎么看都觉得是骗子!”“我当然拒了，我又不傻，这样就想圈我们钱?”义愤填膺的说了一大堆，blabla。大家也觉得很有道理。这个被拒绝的人就是马云。</p><p>小米内部的人都知道，雷军对于小米手机的预装app是看得很严的，不经过他的点头，谁也不能随便预装。就有个聪明人，58同城的CEO姚劲波。为了和雷军熟悉，即便是寒风刺骨的大冷天，姚劲波也起个大早，跑到雷军小区楼下，巧遇雷军，然后俩人一起跑步。天天跑，日日跑。一来二去的，俩人熟了，那话就好说了，生意也好做了，姚劲波提了想在小米预装的事情，最终雷军也答应了。不知道是不是因为经常一起跑步，雷军才同意预装58同城APP，反正，自从小米手机中预装了58同城之后，雷军就再也未在楼下巧遇过姚劲波。</p><p>3Q大战，周鸿祎以新浪微博为主阵地不断向腾讯发难，马化腾在腾讯微博还击，但腾讯微博和新浪微博两者真心不在一个量级上，马化腾被周鸿祎逼得很被动，于是请教他在中关村的一位老友，老友支招让马化腾给陈彤打个电话，让陈彤适度拉下架，以免让局面不那么难看，马化腾想了半天，给曹国伟打了一个电话。​据传这位老友就是雷军。</p><p>李彦宏上《开讲啦》节目，撒贝宁问：如果马云，马化腾，雷军都掉河里了，你只能救一个，你救谁？ 李彦宏想了会说：我救雷军，因为他前几天送了我一部小米手机。</p><p>有一年，某互联网公司年会请了苍老师助阵，现场雷总抱苍老师的时候笑的很开心​</p><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6do1ni3uj30go0ez74v.jpg" alt="image"></p><p>不久后，苍老师想做生意卖内衣，还在微博上@了雷布斯</p><p><img src="https://wx4.sinaimg.cn/large/0078QYBYgy1ft6dp5d0glj30ku112ju7.jpg" alt="image"></p><p>当年冰桶挑战，雷军@了三个人：@天王刘德华、@富士康郭台铭，@百度李彦宏</p><p>​彼时，马化腾已经发迹，双方见面。马化腾：雷总，想当年，我们找你投资，可是等了好久才见你一面，最后还没谈成。雷军：小马啊，以我当年忙碌的状态(一说地位)，能见你一面已经很不错了。</p><p>​2003年,金山转型推出了第一款网游剑侠情缘online。彼时网易的大话西游2已经风生水起,丁磊也问鼎了当年的中国首富。上线前，丁磊和雷军打赌10万美金，认定剑侠情缘的在线人数不会超过10W.结果上线不到2周，在线人数就远超10W。于是雷军打电话给丁磊:”那10万美金我要现金,不要支票”。至于后来有没有收到，雷总说：哈哈，反正我是没有收到10万美金。</p><p>​金山第一代产品经理王欣曾说，“雷军面试我，叫我改行，他说女生写程序是没有前途的。我就跟他据理力争。然后雷军问我：<span style="color:red;">你写程序有写诗一样的感觉吗？</span>我说：我没有。他说：这不就完了吗。于是我成为了金山第一批产品经理。</p><p>​B站陈睿之前是雷军的下属，雷军还教陈睿他们如何打领带。以前程序员都穿着T恤衫、大短裤、拖鞋去见客户，雷军告诉他们说见客户一定要穿衬衫。</p><p>雷军曾经带着金山王欣拿着软件盒子向客户推销。雷老板每次都卖得特别好，回来以后他会很得意地问我：王欣，你知道为什么我卖得比你好吗？我也很郁闷，为什么一个大姑娘能卖得比大老爷们还差。雷军对我说：你看，我每次推销的都是手里拎袋子的人，拎袋子的人都是买过软件的人，证明他/她是有软件购买习惯的。我找的是目标用户，但你是随便抓到一个人就推销。</p><p>雷军曾经和黄晓明一起拍了部电影，叫《风口》，电影里，他饰演了一个教父。</p><p><img src="https://wx2.sinaimg.cn/large/0078QYBYgy1ft704wk99tj30a406bjs5.jpg" alt="image"></p><p><img src="https://wx1.sinaimg.cn/large/0078QYBYgy1ft7053q7bhj30bu0ain09.jpg" alt="image"></p><p>最后，有这么一个人，他的手机你可以不买，但是他的歌你一定要听。欢迎收听歌手雷军的单曲《Are you ok 》</p>]]></content>
      
      <categories>
          
          <category> 互联网大佬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第7期-js防抖和节流</title>
      <link href="/2019/01/02/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC7%E6%9C%9F-js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2019/01/02/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC7%E6%9C%9F-js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端性能优化，必备知识防抖和节流。<br><a id="more"></a></p><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>首先举一个例子：<br>模拟在输入框输入后做ajax查询请求，没有加入防抖和节流的效果，这里附上完整可执行代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>没有防抖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//模拟ajax请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">ajax</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'ajax request '</span> + content)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> inputNormal = <span class="built_in">document</span>.getElementById(<span class="string">'normal'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            inputNormal.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                ajax(e.target.value)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.没有防抖的输入：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">id</span>=<span class="string">"normal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：在输入框里输入一个，就会触发一次“ajax请求”（此处是console）。</p><p><img src="https://ask.qcloudimg.com/draft/2221081/90pgtjky9q.png?imageView2/2/w/1620" alt="image"></p><center>没有防抖和节流</center><p>缺点：浪费请求资源，可以加入防抖和节流来优化一下。</p><p>本文会分别介绍什么是防抖和节流，它们的应用场景，和实现方式。防抖和节流都是为了解决短时间内大量触发某函数而导致的性能问题，比如触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。但二者应对的业务需求不一样，所以实现的原理也不一样，下面具体来看看吧。</p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><h4 id="什么是防抖"><a href="#什么是防抖" class="headerlink" title="什么是防抖"></a>什么是防抖</h4><p>在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote><ol><li><p>用户在输入框中连续输入一串字符后，只会在输入完后去执行最后一次的查询ajax请求，这样可以有效减少请求次数，节约请求资源；</p></li><li><p>window的resize、scroll事件，不断地调整浏览器的窗口大小、或者滚动时会触发对应事件，防抖让其只触发一次；  </p></li></ol></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>还是上述列子，这里加入防抖来优化一下，完整代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>加入防抖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//模拟ajax请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">ajax</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'ajax request '</span> + content)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">debounce</span><span class="params">(fun, delay)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(args)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//获取函数的作用域和变量</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> that = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> _args = args</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//每次事件被触发，都会清除当前的timeer，然后重写设置超时调用</span></span></span><br><span class="line"><span class="undefined">                    clearTimeout(fun.id)</span></span><br><span class="line"><span class="actionscript">                    fun.id = setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                        fun.call(that, _args)</span></span><br><span class="line"><span class="undefined">                    &#125;, delay)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> inputDebounce = <span class="built_in">document</span>.getElementById(<span class="string">'debounce'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> debounceAjax = debounce(ajax, <span class="number">500</span>)</span></span><br><span class="line"><span class="actionscript">            inputDebounce.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                debounceAjax(e.target.value)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.加入防抖后的输入： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"debounce"</span> <span class="attr">id</span>=<span class="string">"debounce"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码说明：</p><blockquote><ol><li><p>每一次事件被触发，都会清除当前的 timer 然后重新设置超时调用，即重新计时。<br>这就会导致每一次高频事件都会取消前一次的超时调用，导致事件处理程序不能被触发；</p></li><li><p>只有当高频事件停止，最后一次事件触发的超时调用才能在delay时间后执行；</p></li></ol></blockquote><p>效果：</p><p>加入防抖后，当持续在输入框里输入时，并不会发送请求，只有当在指定时间间隔内没有再输入时，才会发送请求。如果先停止输入，但是在指定间隔内又输入，会重新触发计时。</p><p><img src="https://ask.qcloudimg.com/draft/2221081/43a9dksk91.png?imageView2/2/w/1620" alt="image"></p><center>加入防抖</center><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><h4 id="什么是节流"><a href="#什么是节流" class="headerlink" title="什么是节流"></a>什么是节流</h4><p>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote><ol><li><p>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p></li><li><p>在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作时才去请求数据；</p></li><li><p>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断；</p></li></ol></blockquote><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>还是上述列子，这里加入节流来优化一下，完整代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>加入节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//模拟ajax请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">ajax</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'ajax request '</span> + content)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">throttle</span><span class="params">(fun, delay)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> last, deferTimer</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(args)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> _args = <span class="built_in">arguments</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123;</span></span><br><span class="line"><span class="undefined">                        clearTimeout(deferTimer);</span></span><br><span class="line"><span class="actionscript">                        deferTimer = setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                            last = now;</span></span><br><span class="line"><span class="undefined">                            fun.apply(that, _args);</span></span><br><span class="line"><span class="undefined">                        &#125;, delay)</span></span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                        last = now;</span></span><br><span class="line"><span class="undefined">                        fun.apply(that, _args);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> throttleAjax = throttle(ajax, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> inputThrottle = <span class="built_in">document</span>.getElementById(<span class="string">'throttle'</span>)</span></span><br><span class="line"><span class="actionscript">            inputThrottle.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                throttleAjax(e.target.value)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.加入节流后的输入： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"throttle"</span> <span class="attr">id</span>=<span class="string">"throttle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：实验可发现在持续输入时，会安装代码中的设定，每1秒执行一次ajax请求</p><p><img src="https://ask.qcloudimg.com/draft/2221081/3aohd1kgfp.png?imageView2/2/w/1620" alt="image"></p><center>加入节流</center><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总结下防抖和节流的区别：</p><p>– 效果：</p><p>函数防抖是某一段时间内只执行一次；而函数节流是间隔时间执行，不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。</p><p>– 原理：</p><p>防抖是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，都会清除当前的 timer 然后重新设置超时调用，即重新计时。这样一来，只有最后一次操作能被触发。</p><p>节流是通过判断是否到达一定时间来触发函数，若没到规定时间则使用计时器延后，而下一次事件则会重新设定计时器。</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第6期-这些鲜为人知的JavaScript特性,你知道多少?</title>
      <link href="/2018/12/25/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC6%E6%9C%9F-%E8%BF%99%E4%BA%9B%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84JavaScript%E7%89%B9%E6%80%A7-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%A4%9A%E5%B0%91/"/>
      <url>/2018/12/25/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC6%E6%9C%9F-%E8%BF%99%E4%BA%9B%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84JavaScript%E7%89%B9%E6%80%A7-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%A4%9A%E5%B0%91/</url>
      <content type="html"><![CDATA[<p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/1.png" alt="image"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript 通常被认为是最容易入门却最难以掌握的编程语言。这是因为 JavaScript 是一门非常古老却又非常灵活的语言。它有着各种各样神秘的语法和古老的特性。直到现在，我仍然会时不时地发现一些我从来都不知道的隐藏语法或技巧。<br><a id="more"></a><br><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/2.png" alt="image"><br>我将在这篇文章中列出一些鲜为人知的 JavaScript 特性。虽然其中一些在 strict 模式下是无效的，但它们仍然是有效的 JavaScript 代码。但请注意，我不建议你使用所有这些特性。虽然它们看起来很酷，但如果你真的使用了这些特性，很有可能会让你的队友吐血。  </p><p>注意：我不会提及诸如 Hoisting、闭包、代理、原型继承、async/await、生成器，等等。虽然这些特性可能不太好理解，但它们其实是众所周知的。</p><h3 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h3><p>JavaScript 提供了一个一元运算符 void，你可能已经看到过它的这种用法，比如 void(0) 或 void 0。它的作用只有一个——计算其右边的表达式并返回 undefined。使用“0”只是一种惯例，你不一定要使用“0”，它可以是任何有效的表达式，如 void，它仍然会返回 undefined。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/3.png" alt="image"><br>为什么要创建一个特殊的关键字来返回 undefined，而不是直接返回 undefined？这似乎有点多余，不是吗？</p><p>实际上，在 ES5 之前，你可以在大多数浏览器中为给 undeunfined 赋值，比如 undeunfined = “abc”。在那个时候，使用 void 是一种确保总是能够返回 undefined 的方法。</p><h3 id="构造函数的括号是可选的"><a href="#构造函数的括号是可选的" class="headerlink" title="构造函数的括号是可选的"></a>构造函数的括号是可选的</h3><p>在调用构造函数时，类名后面的括号是可选的（前提是你不需要传递任何参数）！</p><p>下面的代码都是有效的 JS 语法，并且会给你完全相同的结果！</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/4.png" alt="image"><br>void 运算符告诉解析器后面的代码是函数表达式。因此，我们可以跳过函数定义周围的括号。我们还可以使用任何一元运算符（void、+、!、-，等等），它们都是有效的！</p><p>你可能会想，一元运算符不会影响 IIFE 返回的结果吗？</p><p>它确实会影响返回的结果。但如果你关心结果，并希望将结果赋给在某个变量，那么首先你就不需要额外的括号。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/5.png" alt="image"><br>我们添加这些括号只是为了更好的可读性。</p><h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><p>JavaScript 也支持 with 块？with 实际上是 JS 的一个关键字。with 块的语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> (object)</span><br><span class="line">    statement </span><br><span class="line"><span class="comment">// for multiple statements add a block</span></span><br><span class="line"><span class="keyword">with</span> (object) &#123;</span><br><span class="line">    statement</span><br><span class="line">    statement</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with 将“对象”的所有属性添加到用于计算语句的作用域链中。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/6.png" alt="image"><br>with 块看起来非常酷，它甚至比对象解构更好，但其实并不尽然。</p><p>通常不鼓励使用 with 语句，因为它已经被弃用。在 strict 模式下是被完全禁止的。事实证明，使用 with 块会带来一些性能和安全方面的问题。</p><h3 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function 构造函数"></a>Function 构造函数</h3><p>function 语句并不是定义新函数的唯一方法，你可以使用 Function() 构造函数和 new 运算符动态定义函数。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/7.png" alt="image"><br>最后一个参数是函数的字符串化代码，前面的其他参数是函数的参数。</p><p>Function 构造函数是 JavaScript 中所有构造函数的祖先。甚至 Object 的构造函数也是 Function。而 Function 自己的构造函数也是 Function 本身。因此，如果调用 object.constructor.constructor…足够多的次数，最后将获得 Function 构造函数。</p><h3 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h3><p>我们都知道，函数是 JavaScript 的一等对象。因此，我们当然可以向函数添加自定义属性。这样做是完全有效的。然而，它很少被这样使用。</p><p>那么，我们什么时候会这么做呢？</p><h4 id="可配置的函数"><a href="#可配置的函数" class="headerlink" title="可配置的函数"></a>可配置的函数</h4><p>假设我们有一个叫作 greet 的函数。我们希望它能够根据不同的区域设置打印出不同的问候语。区域设置也应该是可配置的。我们可以在某处维护一个全局区域环境变量，或者我们也可以使用函数属性来实现这个函数，如下所示：</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/8.png" alt="image"></p><h4 id="具有静态变量的函数"><a href="#具有静态变量的函数" class="headerlink" title="具有静态变量的函数"></a>具有静态变量的函数</h4><p>另一个类似的例子，假设你想要实现一个生成一系列有序数字的数字生成器。通常，你会使用 Class 或 IIFE，并使用一个静态计数器变量来跟踪最后一个值。这样我们就可以限制对计数器的访问，并避免使用额外的变量来污染全局命名空间。</p><p>但是，如果我们希望能够灵活地读取甚至是修改计数器，并且不污染全局命名空间呢？</p><p>我们仍然可以创建一个 Class，带有一个计数器变量和一些额外的方法来读取它，或者我们可以使用函数的属性。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/9.png" alt="image"></p><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>我相信大多数人都知道函数的 arguments 对象。它是一种类似于数组的对象，所有函数都包含了它。它包含了在调用函数时传给函数的所有参数，但它也有一些其他有趣的属性：</p><p>arguments.callee：指当前调用的函数；</p><p>arguments.callee.caller：指调用当前函数的函数。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/10.png" alt="image"><br>注意：尽管 ES5 禁止在 strict 模式下使用 callee 和 caller，但在很多编译库中仍然很常见。</p><h3 id="标记模板字面量"><a href="#标记模板字面量" class="headerlink" title="标记模板字面量"></a>标记模板字面量</h3><p>除非你与世隔绝，否则你一定听说过模板字面量。模板字面量是 ES6 的众多很酷的补充特性之一。但是，你知道标记模板字面量吗？</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/11.png" alt="image"><br>在使用标记模板字面量时，你可以通过向模板字面量添加自定义标记来更好地控制如何将模板字面量解析为字符串。标记只是一个解析器函数，它获取字符串模板中所有的字符串和值。标记函数负责返回最终的字符串。</p><p>在下面的示例中，我们的自定义标记——highlight，解释模板字面量的值，并使用<code>元素将解释的值包装在结果字符串中，以突出显示。</code></p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/12.png" alt="image"></p><h3 id="Getter-和-Setter"><a href="#Getter-和-Setter" class="headerlink" title="Getter 和 Setter"></a>Getter 和 Setter</h3><p>JavaScript 对象的大部分东西是很简单的。假设我们有一个 user 对象，并且我们使用 user.age 来访问它的 age 属性，如果定义了 age 属性，我们就会得到它的值，如果没有，我们就会得到 undefined。</p><p>但是，它也可能不会这么简单。JavaScript 对象也有 Getter 和 Setter 的概念。我们可以编写自定义的 Getter 函数来返回我们想要的任何东西，而不是直接返回对象的值。设置值也是一样的。</p><p>这样我们在获取或设置字段时就拥有了一些强大的概念，如虚拟字段、字段验证、副作用，等等。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/13.png" alt="image"><br>Getter 和 Setter 并不是 ES5 的新增功能，它们一直都存在。ES5 只是为它们添加了方便的语法。</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>JavaScript 提供了一个逗号运算符，我们可以用它在一行中编写由逗号分隔的多个表达式，并返回最后一个表达式的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = expression1, expression2,... expressionN</span><br></pre></td></tr></table></figure><p>这里所有的表达式都会被计算，并将 expressionN 返回的值赋给 result 变量。</p><p>你可能已经在 for 循环中使用了逗号运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>, b = <span class="number">10</span>; a &lt;= <span class="number">10</span>; a++, b--)</span><br></pre></td></tr></table></figure><p>有时候，在一行中编写多个语句会有所帮助：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter++, <span class="built_in">console</span>.log(counter), counter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者用它编写很短的 lamda 表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getSquare = <span class="function"><span class="params">x</span> =&gt;</span> (<span class="built_in">console</span>.log (x), x * x)</span><br></pre></td></tr></table></figure><h3 id="加号运算符"><a href="#加号运算符" class="headerlink" title="加号运算符"></a>加号运算符</h3><p>你是否曾经想过快速将字符串转换为数字？</p><p>只需在字符串前面加上加号即可。</p><p>加号运算符也适用于负数、八进制、十六进制、指数。它甚至可以将 Date 或 Moment.js 对象转换为时间戳！</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/14.png" alt="image"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="!! 运算符"></a>!! 运算符</h3><p>从技术上讲，它并不是一个单独的 JavaScript 运算符。它的效果与使用两次 JavaScript 否定运算符是一样的。</p><p>!! 是将任何表达式转换为布尔值的一个巧妙的技巧。</p><p>如果表达式是真值，则返回 true，否则返回 false。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/15.png" alt="image"></p><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="~ 运算符"></a>~ 运算符</h3><p>没有人会关心位运算符，因为我们几乎很少会用它！但它确实有一些使用场景！</p><p>当与数字一起使用时，比如~N =&gt; -(N + 1)。这个表达式只在 N == -1 时结果为“0”。</p><p>我们可以在 indexOf(…) 函数前面加一个~ 来进行布尔检查，看看一个项是否存在于 String 或 Array 中。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/16.png" alt="image"><br>注意：ES6 和 ES7 分别在 String 和 Array 中添加了一个新的.includes() 方法。当然，它比使用~ 运算符检查项目是否存在于 Array 或 String 中更清晰一些。</p><h3 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h3><p>JavaScript 也有标签语句的概念。我们可以在 JavaScript 中使用标签来命名循环和代码块。然后，我们可以在 break 或 continue 时通过这些标签返回到之前的代码。</p><p>在嵌套循环中使用标签语句会非常方便，我们也可以使用它们来将代码组织成代码块或创建可 break 的代码块。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/js-mimi/17.png" alt="image"><br>注意：与其他一些语言不同，JavaScript 中没有 goto。因此，我们只能使用在 break 和 continue 中使用标签。</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网大佬系列--丁磊</title>
      <link href="/2018/12/19/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E4%B8%81%E7%A3%8A/"/>
      <url>/2018/12/19/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E4%B8%81%E7%A3%8A/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第一次接触丁磊的产品，我想应该是梦幻西游吧。<br>总之丁磊在我心中，应该是中国比较早的那一批互联网人。<br>不过的确也是，门户网站三剑客不是浪得虚名。<br>最后，养猪可还行？<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="爱搜集奇人异士的丁老板"><a href="#爱搜集奇人异士的丁老板" class="headerlink" title="爱搜集奇人异士的丁老板"></a>爱搜集奇人异士的丁老板</h4><p>丁老板特别喜欢收集奇人异士，什么四川卧龙大龙猫研究基地研究院，“嚯！了不起，盯着熊猫一天不带眨眼，这个定力好，招来做策划研究gameplay”，什么美国加州生物实验室的博士“嚯！了不起，高端人士，招来做策划研究gameplay”，什么网络专刊知名作家“嚯！太棒了，文章写得好做游戏一定更好”，什么微软脑电波人类实验主管“嚯！太科幻了招来做项目主管”，什么香港科技大学哲学博士“嚯！牛逼，学历最高游戏制作人”。。。所以，公司里面各种奇人异士(怎么越说越像战国时候的赵公子平原君赵胜了。。。)<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344237_0078QYBYgy1fsr5gwaryfj30fo0fsaon.jpg" alt="image"></p><h4 id="爱嘲笑对面马老板的丁老板"><a href="#爱嘲笑对面马老板的丁老板" class="headerlink" title="爱嘲笑对面马老板的丁老板"></a>爱嘲笑对面马老板的丁老板</h4><p>丁老板在杭州研究院看到对面楼的阿里，憨憨的笑道，过两年，对面那个白色鸟巢楼就会很难看了，而咱的深棕色楼，10年雨水冲刷都不变(务实的老板啊！！！)</p><p>网易杭研院办公楼建成，有一个专门的停车楼。1500个车位。旁边的阿里巴巴只有500个车位，因为阿里那楼里塞得人太多，相对的车也多，500个车位无法满足他们日常的车位需求，所以阿里的行政就过来谈判，希望能租给他们一些车位，缓解一下他们的压力。丁老板知道这事之后，非常兴奋。直言到：马云，你看你没有高瞻远瞩吧，哈哈哈！！！<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344340_0078QYBYgy1fsr5n8ef8fj30ny0ma4lo.jpg" alt="image"></p><h4 id="有点抠门的丁老板"><a href="#有点抠门的丁老板" class="headerlink" title="有点抠门的丁老板"></a>有点抠门的丁老板</h4><p>一个163的姑娘说丁磊也想买版权进军视频市场，但是现在的电影和电视剧版权被爱奇艺搜狐乐视炒得太高，不舍得。所以丁三石瞄准了印度电影市场！！！！准备让这个姑娘去宝莱坞谈版权！！！！说实话我还蛮期待的。。。满屏都是唱歌跳舞的视频网站绝对能让人脑洞大开。后来这姑娘好像真去了印度呆了小一个月…..应该也拿到了不少电影的版权报价……然后就发给了领导们……接着就没有然后了。我能想到三石哥的表情，和话语“我靠，印度电影也要花钱啊？”（可怜的姑娘）</p><p>某网易小员工在电梯里忽然被拍背，发现是丁老本，”你认识我吗？”，“认识，丁总”，“借我50，下楼喝咖啡没带钱”，遂乖乖给钱之，丁老板走后，小员工叹息道：“我认识你，可惜你认识我吗。。。</p><p>丁老板心情好的时候要请我们部门喝酒，风闻他请客从不带钱，我们特地让他秘书看着他把钱装包包里……最后结帐，只见他打开钱包掏出一叠花绿钞票说，我刚从香港回来只有港币，你们肯定不收，说完就把钱揣回去了……我们一干人等都在心里痛骂这个小气鬼，老狐狸……这时候，这个可爱的，我永远不会忘记的waiter微笑着说：谢谢您，我们收港币。(丁老板，没想到吧。。。。)</p><p>一天中午，我朋友和领导去公司边上的一家湘菜馆跟客户吃饭，快吃完的时候看见丁老板也在，但他已经吃完了，他认出了我朋友和他领导，然后，他端着自己桌上没吃完的两盘菜过来，非常平易近人的放到我朋友他们桌上，说：我吃完了，端过来给你们吃吧……简直是史上最抠门的老板了哈哈哈哈……..</p><p>在五道口网易上班的时候，丁老板不愿意花钱在清华科技园的楼上搞个Logo，于是每次打车的时候都说“师傅麻烦去搜狐大厦旁边的那栋楼…”</p><p>话说雷军原来在金山的时候相当牛逼，马化腾和丁老板都只是他手底下一个小小站长。当金山开始进军网游的时候，丁老板跟雷军说：“给你两年时间你都过不了五万人，如果到2004年底能过5万人，我给你10万美元。”结果人家《剑侠情缘Online》公测五天内在线人数就过了五万，然后，然后。。。丁老板再也没提过十万美金的事儿。</p><p>因为丁磊毕业于成电，我也于成电建校50周年那会儿考去成电，当时丁磊以优秀校友参加校庆，学校领导可能是想让他捐点钱建个实验室或者资助科研项目什么的，结果丁磊断然拒绝捐款，后来演讲说，成电虽教会了我很多专业技能，但它从来没教会我理财，所以我是不会捐钱的。后来，丁磊承诺给电子科技大学捐的八百万修图书馆，最后变成了几十棵银杏，从此网易也不来招聘了。（哈哈哈，这是真的吗？？？）<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344247_0078QYBYgy1fsr5y77nxvj30p20nk1i2.jpg" alt="image"></p><h4 id="爱炫耀食堂的丁老板"><a href="#爱炫耀食堂的丁老板" class="headerlink" title="爱炫耀食堂的丁老板"></a>爱炫耀食堂的丁老板</h4><p>丁老板对杭州滨江的网易大楼里面的食堂和车库尤为自豪，逢人便说，“我们这食堂一层就有800个位置，不会坐不满，师傅都是自己请的，饭随便吃”，“我们这地下停车场600多个车位，没有号码，随便停”，“我们这班车不收钱”(丁老板满满的自豪感)</p><p>某天做电梯遇到老丁，老丁笑眯眯的问电梯里的员工们：“你们觉得食堂怎么样呀？”话说那会儿正被二楼摧残着，几个人沉默了半响，终于一个人说：“老板，你要是要听实话吗？……”老丁笑呵呵滴说“我已经尽力了……”姐的心就滴血了</p><p>因为工作原因，前些天一直在杭州，和丁磊畅谈了好几天，他对自己的网易杭州研究院的点点滴滴都非常自豪，在食堂吃饭的时候他也做旁边和我一起聊天，拍了拍这饭桌：“这桌子可是实木订制的，用了两年了，看吧还和新的一样的呢”</p><p>刚来网易没多久，去广州出差，那个时候大厦的员工食堂刚竣工，他很自豪的给我介绍说，看，我们每天都换菜的！然后拍一个正在吃的技术肩膀，问，够不够吃？技术同学嘴里叼着白菜，满脸惊骇……他很满意的走掉，然后看到泔水桶里有好多没吃完的粮食，就大吼，哎，谁扔的啊？叫来一个管理的说，明天在这里写上，有摄像头，谁要是浪费粮食，就把他拍下来！</p><p>某天，在电梯里遇到三石哥。当时我挺尴尬，不知道说什么，就叫了声丁老板好！三石哥哈哈大笑说，小伙子食堂的饭菜怎么样？好吃吗？不好吃不要紧？我们已经准备自己请厨师来做菜了！我当时的表情就只傻笑不语了！<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344267_0078QYBYgy1fsr766mrkcj30hq0goalj.jpg" alt="image"></p><h4 id="真性情的丁老板"><a href="#真性情的丁老板" class="headerlink" title="真性情的丁老板"></a>真性情的丁老板</h4><p>当年丁老板接受采访，记者问：为什么要用自认为高端清新的花田换掉网易同城约会？ 丁老板脱口而出：我操，有人投诉啊，当时好多小姐注册进去了。<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344240_0078QYBYgy1fsr65z7pytj30k00auq3h.jpg" alt="image"><br>有次开会很多人迟到，丁老板居然吼了句“我操！都什么时候了”<br>丁老板曾愤怒地把一张暴露的美女照片打印出来，贴在门户频道一位主编的墙上。“如果谁再在上班时候看这种图片，我就把照片打印出来寄给他父母。</p><p>丁老板曾剖析自己：“我性格直接，包容性差，所以只能给自己标一个真小人，而不是真君子。”</p><p>某次丁老板来我们学校讲座，对话胡舒立和张志安，胡舒立问他对传统媒体有啥看法，丁老板憨笑一声：你们传统媒体内容包装形式实在是太土了！<br>去年在乌镇，我在一个活动上给人颁奖，老丁当时坐在现场。晚上在黄磊的酒吧有个趴踢，有好几个人碰到我说老丁在找你。我心想今天左眼皮一直跳他是不是要叫我回去163接班啊lol…大佬的面子当然比我的大，我赶紧跑去和他say hi。老丁说真的是你啊，我说是啊我以为你知道。他说大家都讲你以前是我们的人但是又有很多人说不是。我心想过去的事你忘得挺快啊呵呵呵…然后扯着扯着就扯到我在北京被抓的事情上了。老丁拍着我的肩膀大义凛然说：下次你再被抓，就报我名字，我帮你摆平都是小case …于是我一直在等着下次被抓。</p><h4 id="待人随和，低调的丁老板"><a href="#待人随和，低调的丁老板" class="headerlink" title="待人随和，低调的丁老板"></a>待人随和，低调的丁老板</h4><p>丁老板周六和网络公司的一老总吃晚饭，服务员：我们都认识5年了，谢谢您这5年来对我们这里的照顾；丁老板：是呀，我的公司在好世界，离这不远，所以常来；服务员：是吗？您开什么公司啊？ 丁老板：小公司，和几个朋友混混；服务员：小公司不要紧，以后可以做成大公司嘛！要是大公司越做越小就不好了，你说是不是？丁老板：……是，是………</p><p>谈及自己曾经的首富头衔，丁老板展现出强烈的蔑视感：“只有老板才觉得首富了不起。”2003年至2004年，他蝉联福布斯首富，却借口出国休假，拒绝了所有采访。丁老板当上首富后做的第一件事情是换车，因为之前那辆太费油。</p><p>08年，一朋友有一天打车，在天河城那块堵了，然后司机探头跟旁边司机搭讪，说：师傅，你这车不错啊，新车吧？旁边的司机说：是，新车。这个朋友当时在玩手机，听到对话抬头一看，那车是丁老板的新Z4跑车，车上坐的是丁老板。然后，车流顺了，z4开走了，朋友问司机：你知道刚才那人是谁吗？司机说不知道，朋友说，那是中国最有钱的10个人之一。司机说：不错啊，挺随和的。</p><p>刚到网易杭研院上班的时候，夏天，发现一个体态略发福、穿花裤衩的大叔站在过道里面，给放置在储物柜上面的一台测试PC装XP系统，很投入，装得挺开心。我感叹，这位SA搞了一二十年还这么有激情，佩服。后来同事告诉我说——那就是丁老板。我又感叹，果然是技术男出身。<br>眯眯眼，厚眼镜，休闲T恤，短裤，偶尔拖鞋，电梯里还以为老板是送外卖的。</p><h4 id="对员工有点？？的丁老板"><a href="#对员工有点？？的丁老板" class="headerlink" title="对员工有点？？的丁老板"></a>对员工有点？？的丁老板</h4><p>某北京员工，去杭州出差。看到老板在训斥杭州食堂的服务流程有问题。女同事走的时候，嘀咕了一句“没吃饱”。被丁老板在后面听到了，丁老板跑上来问她“你没吃饱啊？”，然后朝她笑了笑，就走了。</p><p>2011-2012年会的时候，上洗手间碰到丁磊，丁老板一看那么多人排队，于是大喊你们中奖了，还尿什么尿啊，快去领奖啊………然后过了一会，又叫：是不是老板在你们身后尿不出来啊</p><p>02年中国互联网第一次泡沫期。网易北京还在嘉里中心。一天晚上，加班以后，丁老板在门口打车，突然来了一辆富康。网易的一个编辑和丁老板同时看上，两人准备抢车。丁老板来了一句，你那个部门的，你们的报销标准是夏利，富康不让报销的。你等下一辆吧。</p><p>雀巢公司赠送了一个超级豪华热饮机过来，丁老板到上海出差看到这种情形差点晕死过去，立刻用全公司都能听到的声音吼，“你们怎么这么奢侈？！这花了多少钱啊！”销售部经理连忙跑过去解释，丁老板这才严肃地点点头，进去倒了杯热咖啡，然后手捧着走到门口，意犹未尽地想了想，“唉！实在是太腐败、太奢侈了！”最后摇着头走回了办公室</p><p>去年冬天，一个同事在公司咖啡厅，很冷，地上放了个火炉在烤火，丁老板跑过来问：＂冷吗？＂同事呆住，然后习惯性说：＂不冷，挺好的。＂于是咖啡厅就没有装空调。</p><p>广州10楼食堂。我和几个同事正在等面条师傅做面条，我的大腕和筷子放在桌上。突然，旁边一只手伸了过来，抄起我的筷子，在碗里面使劲搅了搅我碗里的汤。我震了一下，惊奇中正欲出声，他说话了：“这碗里面是些什么东西？”。我抬眼一看，oh，Boss，oh，my god，“这。。。这。。这里面是骨头汤。。。”一旁的张伟等哥们见状，忍不住呵呵笑，于是boss一拍张伟的肩膀：“你笑什么。。。找死啊~”。说完，满脸憨笑中走开。<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344243_0078QYBYgy1fsr6nlz53lj30qo0m6tq4.jpg" alt="image"><br>几年前，网易某部门因为工作需要通过erp申请了一款比较高端的相机，等系统走到丁磊那里，丁磊看完后嘟囔了一句：“这是要做什么用啊？申请的相机比我用的都要高级！”，至于后来相机批没批，就不知道了</p><p>广州刚搬到新大楼，10楼餐厅也刚开业，我打多了吃不了，结果在放餐盘的时候被丁磊看到了，他拍拍我的肩膀说：“小伙子，不要这么浪费”，</p><h4 id="对员工工作不怎么配合的丁老板"><a href="#对员工工作不怎么配合的丁老板" class="headerlink" title="对员工工作不怎么配合的丁老板"></a>对员工工作不怎么配合的丁老板</h4><p>某员工，想邀请老板来用网易微博，晓之以情，动之以理，诸如“你自己都不用自家微博，我们怎么好去拉各种 i 达人呢”云云。完了，丁老板来了一句“我还不玩魔兽世界呢”！</p><p>昨日同老丁吃饭时，谈及罗家英出席《创世西游》公测发布会，半小时出场费15万，一兄弟问“老板那你的出场费多少？”，老丁大声说“我是要倒贴的”，众人大笑。</p><p>网易云音乐上线前，丁老板认为这款产品应该叫“Bad Monkey”(坏猴子)，网易音乐高级总监王磊坚持“云音乐”之名。“云音乐”3个字都以声母“Y”开头，所以在一些有主持人的场合，主持人为了读准“云音乐”这3个字，不得不放慢速度，加强语气——这样会给观众留下更深的印象。这个理由勉强说服了丁老板。但没过多久，丁老板又提出要用“Bad Monkey”，王磊还是顶住了没改。(多谢王磊的坚持呀！)</p><p>有一次《大唐无双》搞活动，在杭州礼堂门口布置宣传品， 突然背后人说了一句“我X，怎么下雨了？”然后BOSS坦然出现，看了我们一眼。 “你们是干呢？” “老板，广州游戏的，周末大唐无双玩家见面会，有时间来吗？” “广州游戏部门，杭州食堂好吧。。。食堂。。。周末啊，我看看，周末清华大学校庆，虽然我不是清华的，也应该给点面子去看看，是吧？”</p><h4 id="爱养猪的丁老板"><a href="#爱养猪的丁老板" class="headerlink" title="爱养猪的丁老板"></a>爱养猪的丁老板</h4><p>丁老板应该是唯一一个书架上摆着各种养猪书籍的CEO了吧。。。</p><p>12年温总理来杭研院，见到丁磊第一句话是：＂你就是丁磊啊！＂在看展板的时候看到养猪场，笑着回头说：＂你还养猪！＂</p><h4 id="爱拼运气的丁老板"><a href="#爱拼运气的丁老板" class="headerlink" title="爱拼运气的丁老板"></a>爱拼运气的丁老板</h4><p>听丁老板念叨过一次“一命二运三风水，四积阴德五读书”，他觉得自己成功就是运气，所以也能理解他多年后说“赚钱也是顺便的事”</p><p>“挣钱是个顺便的事情，金钱带来的幸福感占比，连5%都不到……”这是近日丁老板出席网易严选直播采茶叶活动时，接受“一条”视频专访中的一段回答，5%看起来比例很少，但你知道丁磊的5%意味着什么吗？据《2017胡润全球富豪榜》显示，截至2017年1月15日的统计期内，丁磊财富为1250亿元。也就是说，带来的5%的幸福感这笔钱是62.5亿元…..(哇。。。好多钱哦)</p><h4 id="年会上的丁老板"><a href="#年会上的丁老板" class="headerlink" title="年会上的丁老板"></a>年会上的丁老板</h4><p>果然与众不同。。。<br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344234_0078QYBYgy1fsr6yrt0rwj30k00dbmyw.jpg" alt="image"><br><img src="https://uploadfiles.nowcoder.com/files/20181215/450315_1544841344230_0078QYBYgy1fsr6yua284j30a30hsgmb.jpg" alt="image"></p><h4 id="爱爆料的丁老板"><a href="#爱爆料的丁老板" class="headerlink" title="爱爆料的丁老板"></a>爱爆料的丁老板</h4><p>某年某月某日，某记者给丁老板打电话，询问其回应一件网易的负面。丁老板在电话那头说：兄弟，你不要写我了，没什么新闻价值，我给你一个猛料，你去追那个去。记者：哦，什么料？丁老板：马化腾在广州的200台服务器要被XX强行搬走了，这么一搞QQ就没服务了。记者随即拨打了马化腾的电话，问这个事情。马化腾大惊：你怎么知道的？</p><h4 id="小时候的丁老板"><a href="#小时候的丁老板" class="headerlink" title="小时候的丁老板"></a>小时候的丁老板</h4><p>三石哥还是中学生的时候作为程序小天才受到了某中央领导的接见，领导想让他演示一下他高超的计算机技术，三石哥毕恭毕敬地说领导您想看什么？领导想了想，说打字来看看，三石哥…，无奈打了几排字，领导看了，说 “小伙子不够熟练啊，还要加油学学”</p><h4 id="别人眼中的丁老板"><a href="#别人眼中的丁老板" class="headerlink" title="别人眼中的丁老板"></a>别人眼中的丁老板</h4><p>锵锵三人行，嘉宾是写《大败局》的吴晓波。他说道：我见过的大富豪中，几乎没有一个是快乐的。窦文涛跟他却他确认：没有一个？吴眼睛转了一圈，想了一下：哦，有一个，丁磊。</p><p>吴晓波：丁磊，一个互联网的信徒，一个为兴趣而工作的人</p><p>《商业价值》主编张鹏说：“马云是个棱角非常圆融的人，在他身上你看不到任何你不喜欢的东西，他很阳光，不攻击别人，总忧国忧民，说大事;马化腾其实非常内敛，后来发现不行，开始沟通改变;丁磊不太像个生意人，时不时说出两句不像正经商人会说出的话。”</p>]]></content>
      
      <categories>
          
          <category> 互联网大佬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第5期-CSS书写规范</title>
      <link href="/2018/12/18/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC5%E6%9C%9F-CSS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
      <url>/2018/12/18/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC5%E6%9C%9F-CSS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文内容部分参考自网易前端规范：<a href="http://nec.netease.com/" target="_blank" rel="noopener">NEC</a><br><a id="more"></a></p><h3 id="样式属性顺序"><a href="#样式属性顺序" class="headerlink" title="样式属性顺序"></a>样式属性顺序</h3><p>单个样式规则下的属性在书写时，应该按以下规则书写。<br>Positioning Model &gt; Box Model &gt; Typographic &gt; Visual的顺序书写，提高代码的可读性。</p><ol><li>Positioning Model 布局方式、位置，相关属性包括：position, top, z-index, display, float等</li><li>Box Model 盒模型，相关属性包括：width, height, padding, margin，border,overflow</li><li>Typographic 文本排版，相关属性包括：font, line-height, text-align</li><li>Visual 视觉外观，相关属性包括：color, background, list-style, transform, animation  </li></ol><p>一个小例子<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    // 先书写位置相关</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    // 其次书写盒子相关</span><br><span class="line">    <span class="selector-tag">width</span>: 50%;</span><br><span class="line">    <span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br><span class="line">    // 在书写文本相关</span><br><span class="line">    <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br><span class="line">    // 最后就是视觉外观</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="CSS选择器命名规则"><a href="#CSS选择器命名规则" class="headerlink" title="CSS选择器命名规则"></a>CSS选择器命名规则</h3><p>分类式命名法（前端组件化）</p><ol><li>布局(grid)(.g-): 将页面分割为几个大块，通常有头部，主体，主栏等。</li><li>模块(module)(.m-): 通常是一个语义化的可以重复的较大的整体。比如导航，登陆，注册等。</li><li>元件(unit)(.u-): 通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块,比如按钮,loading等。</li><li>功能(function)(.f-): 一些常用样式，将使用频率高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清楚浮动等。</li><li>状态(.z-): 为状态类样式加入前缀，同一标示，方便识别，只能作为组合或者后代出现。</li><li>javascript(.j-): 专用于JS获取节点，请勿使用.j定义样式</li></ol><p>不要使用”_”下划线来命名css<br>id采用驼峰式命名(不要乱用id，最好不使用id，除非作为锚点)<br>scss中的变量、函数、混合、placeholder采用驼峰式命名<br>命名方式(BEM): 类-体(例如: g-head)、类-体-修饰符(例如: u-btn-active)  </p><h3 id="最佳写法"><a href="#最佳写法" class="headerlink" title="最佳写法"></a>最佳写法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是某个模块 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span>&#123;&#125;<span class="comment">/* 模块容器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 先共性  优化组合 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>&#123;&#125;<span class="comment">/* 后个性  语义化标签选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 后个性中的共性 按结构顺序 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 交互状态变化 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span>&#123;&#125;<span class="comment">/* 典型后代选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-1</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-dis</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.m-sch</span>&#123;&#125;<span class="comment">/* 控制内部其他模块位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.u-sel</span>&#123;&#125;<span class="comment">/* 控制内部其他元件位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span>&#123;&#125;<span class="comment">/* 模块扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span> <span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav-dis</span>&#123;&#125;<span class="comment">/* 模块扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br></pre></td></tr></table></figure><h3 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h3><p><strong>布局(.g-)</strong></p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">命名</th><th style="text-align:center">简写</th></tr></thead><tbody><tr><td style="text-align:center">文档</td><td style="text-align:center">doc</td><td style="text-align:center">doc</td></tr><tr><td style="text-align:center">头部</td><td style="text-align:center">head</td><td style="text-align:center">hd</td></tr><tr><td style="text-align:center">主体</td><td style="text-align:center">body</td><td style="text-align:center">bd</td></tr><tr><td style="text-align:center">尾部</td><td style="text-align:center">foot</td><td style="text-align:center">ft</td></tr><tr><td style="text-align:center">主栏</td><td style="text-align:center">main</td><td style="text-align:center">mn</td></tr><tr><td style="text-align:center">主栏子容器</td><td style="text-align:center">mainc</td><td style="text-align:center">mnc</td></tr><tr><td style="text-align:center">侧栏</td><td style="text-align:center">side</td><td style="text-align:center">sd</td></tr><tr><td style="text-align:center">侧栏子容器</td><td style="text-align:center">sidec</td><td style="text-align:center">sdc</td></tr><tr><td style="text-align:center">盒容器</td><td style="text-align:center">wrap/box</td><td style="text-align:center">wrap/box</td></tr></tbody></table><p><strong>模块(.m-)、元件(.u-)</strong></p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">命名</th><th style="text-align:center">简写</th></tr></thead><tbody><tr><td style="text-align:center">导航</td><td style="text-align:center">nav</td><td style="text-align:center">nav</td></tr><tr><td style="text-align:center">子导航</td><td style="text-align:center">subnav</td><td style="text-align:center">snav</td></tr><tr><td style="text-align:center">面包屑</td><td style="text-align:center">crumb</td><td style="text-align:center">crm</td></tr><tr><td style="text-align:center">菜单</td><td style="text-align:center">menu</td><td style="text-align:center">menu</td></tr><tr><td style="text-align:center">选项卡</td><td style="text-align:center">tab</td><td style="text-align:center">tab</td></tr><tr><td style="text-align:center">标题区</td><td style="text-align:center">head/title</td><td style="text-align:center">hd/tt</td></tr><tr><td style="text-align:center">内容区</td><td style="text-align:center">body/content</td><td style="text-align:center">bd/ct</td></tr><tr><td style="text-align:center">列表</td><td style="text-align:center">list</td><td style="text-align:center">lst</td></tr><tr><td style="text-align:center">表格</td><td style="text-align:center">table</td><td style="text-align:center">tb</td></tr><tr><td style="text-align:center">表单</td><td style="text-align:center">form</td><td style="text-align:center">fm</td></tr><tr><td style="text-align:center">热点</td><td style="text-align:center">hot</td><td style="text-align:center">hot</td></tr><tr><td style="text-align:center">排行</td><td style="text-align:center">top</td><td style="text-align:center">top</td></tr><tr><td style="text-align:center">登录</td><td style="text-align:center">login</td><td style="text-align:center">log</td></tr><tr><td style="text-align:center">标志</td><td style="text-align:center">logo</td><td style="text-align:center">logo</td></tr><tr><td style="text-align:center">广告</td><td style="text-align:center">advertise</td><td style="text-align:center">ad</td></tr><tr><td style="text-align:center">搜索</td><td style="text-align:center">search</td><td style="text-align:center">sch</td></tr><tr><td style="text-align:center">幻灯</td><td style="text-align:center">slide</td><td style="text-align:center">sld</td></tr><tr><td style="text-align:center">提示</td><td style="text-align:center">tips</td><td style="text-align:center">tips</td></tr><tr><td style="text-align:center">帮助</td><td style="text-align:center">help</td><td style="text-align:center">help</td></tr><tr><td style="text-align:center">新闻</td><td style="text-align:center">news</td><td style="text-align:center">news</td></tr><tr><td style="text-align:center">下载</td><td style="text-align:center">download</td><td style="text-align:center">did</td></tr><tr><td style="text-align:center">注册</td><td style="text-align:center">regist</td><td style="text-align:center">reg</td></tr><tr><td style="text-align:center">投票</td><td style="text-align:center">vote</td><td style="text-align:center">vote</td></tr><tr><td style="text-align:center">版权</td><td style="text-align:center">vcopyright</td><td style="text-align:center">cprt</td></tr><tr><td style="text-align:center">结果</td><td style="text-align:center">result</td><td style="text-align:center">rst</td></tr><tr><td style="text-align:center">标题</td><td style="text-align:center">title</td><td style="text-align:center">tt</td></tr><tr><td style="text-align:center">按钮</td><td style="text-align:center">button</td><td style="text-align:center">btn</td></tr><tr><td style="text-align:center">输入</td><td style="text-align:center">input</td><td style="text-align:center">ipt</td></tr></tbody></table><p><strong>功能(.f-)</strong></p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">命名</th><th style="text-align:center">简写</th></tr></thead><tbody><tr><td style="text-align:center">清楚浮动</td><td style="text-align:center">clearboth</td><td style="text-align:center">cb</td></tr><tr><td style="text-align:center">左浮动</td><td style="text-align:center">floatleft</td><td style="text-align:center">fl</td></tr><tr><td style="text-align:center">内联</td><td style="text-align:center">inlineblock</td><td style="text-align:center">ib</td></tr><tr><td style="text-align:center">文本居中</td><td style="text-align:center">textaligncenter</td><td style="text-align:center">tac</td></tr><tr><td style="text-align:center">垂直居中</td><td style="text-align:center">verticalalignmiddle</td><td style="text-align:center">vam</td></tr><tr><td style="text-align:center">溢出隐藏</td><td style="text-align:center">overflowhidden</td><td style="text-align:center">oh</td></tr><tr><td style="text-align:center">完全消失</td><td style="text-align:center">displaynone</td><td style="text-align:center">dn</td></tr><tr><td style="text-align:center">字体大小</td><td style="text-align:center">fontsize</td><td style="text-align:center">fz</td></tr><tr><td style="text-align:center">字体粗细</td><td style="text-align:center">fontweight</td><td style="text-align:center">fs</td></tr></tbody></table><p><strong>皮肤(.s-)</strong></p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">命名</th><th style="text-align:center">简写</th></tr></thead><tbody><tr><td style="text-align:center">字体颜色</td><td style="text-align:center">fontcolor</td><td style="text-align:center">fc</td></tr><tr><td style="text-align:center">背景颜色</td><td style="text-align:center">backgroundcolor</td><td style="text-align:center">bgc</td></tr><tr><td style="text-align:center">边框颜色</td><td style="text-align:center">bordercolor</td><td style="text-align:center">bdc</td></tr></tbody></table><p><strong>状态(.z-)</strong></p><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">命名</th><th style="text-align:center">简写</th></tr></thead><tbody><tr><td style="text-align:center">选中</td><td style="text-align:center">selected</td><td style="text-align:center">sel</td></tr><tr><td style="text-align:center">当前</td><td style="text-align:center">current</td><td style="text-align:center">crt</td></tr><tr><td style="text-align:center">显示</td><td style="text-align:center">show</td><td style="text-align:center">show</td></tr><tr><td style="text-align:center">隐藏</td><td style="text-align:center">hide</td><td style="text-align:center">hide</td></tr><tr><td style="text-align:center">打开</td><td style="text-align:center">open</td><td style="text-align:center">open</td></tr><tr><td style="text-align:center">关闭</td><td style="text-align:center">close vclose</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">出错</td><td style="text-align:center">error</td><td style="text-align:center">err</td></tr><tr><td style="text-align:center">不可用</td><td style="text-align:center">disabled</td><td style="text-align:center">dis</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>一律小写，中划线</li><li>尽量不用缩写</li><li>不要随意使用id</li><li>去掉小数点前面的0：0.9rem =&gt; .9rem</li><li>使用简写：margin：0 1rem 3rem</li></ol>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端调试技巧</title>
      <link href="/2018/12/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/12/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>分享一些移动端调试的小技巧<br><a id="more"></a></p><h3 id="移动端控制台"><a href="#移动端控制台" class="headerlink" title="移动端控制台"></a>移动端控制台</h3><p>在手机浏览器上，添加一个控制台的代码，可以很大的方便我们调试。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在页面引入如下脚本，即可在移动端上开启控制台</span></span><br><span class="line">&lt;script src=<span class="string">"//cdn.jsdelivr.net/npm/eruda"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    eruda.init();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'控制台打印信息'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="手机访问电脑本地项目"><a href="#手机访问电脑本地项目" class="headerlink" title="手机访问电脑本地项目"></a>手机访问电脑本地项目</h3><p>在手机上访问电脑的本地项目，调试岂不是很爽吗？<br>按照如下方式即可<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 手机和电脑在一个局域网内</span><br><span class="line">2. 电脑开启一个本地端口例如<span class="selector-tag">localhost</span><span class="selector-pseudo">:8080</span></span><br><span class="line">3. 查看电脑端的<span class="selector-tag">ip</span>地址例如192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.135</span></span><br><span class="line">4. 手机访问192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.135</span><span class="selector-pseudo">:8080</span>即可</span><br><span class="line">如果是<span class="selector-tag">vue</span>等开启本地服务器时，需要在<span class="selector-tag">package</span><span class="selector-class">.json</span> <span class="selector-tag">script</span> <span class="selector-tag">dev</span> 加上 <span class="selector-tag">--host</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>未完待续！</p>]]></content>
      
      <categories>
          
          <category> 调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网大佬系列--王兴</title>
      <link href="/2018/12/07/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E7%8E%8B%E5%85%B4/"/>
      <url>/2018/12/07/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E7%8E%8B%E5%85%B4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近刚看完《硅谷之火》和《微软梦工厂》，让我年轻的心有了更遥远的憧憬。<br>之前有细细品读过王兴的言论，宏观与微观的作用。深深的折服了我。<br>在我眼中，他和马化腾一样，是一个沉稳低调的人。<br>忍耐与煎熬是漫长的，而这些漫长的时刻却是真正成长的时刻。<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="求学生涯的王兴："><a href="#求学生涯的王兴：" class="headerlink" title="求学生涯的王兴："></a>求学生涯的王兴：</h4><p>王兴是个富二代，这一点想必大家都知道。</p><p>王兴的父亲王苗，1981年承包小建筑工程，做了包工头，赚了3万元，成为了当时的万元户。1992年邓小平南巡之后，王苗将前十几年积累的300万元投了进去，与人合办了一家年产8.8万吨的水泥厂。2003年，他和人合伙办了现在这家年产200万吨的现代化水泥厂，总共投资6亿元，他是大股东兼董事长，占有40%的股份。这个厂出产的水泥叫做闽福牌水泥，是当地出产的最好的水泥。</p><p>虽然出身优越，不过王兴从小就有一种艰苦朴素的精神，以至于后来他回忆道：我初中时，为了赚取零花钱，还自己去工厂打零工赚钱。</p><p>王苗对儿女的教育一向宽松民主，尊重儿女意见。为了建立一个良好的家庭环境，他们家里从不打麻将，也不会大吃大喝，“家里有好的环境，大人勤勉做事，小孩也不会偷懒”。他说。</p><p>王苗很喜读书，买了很多书，也鼓励儿女博览群书。“儿女都是理科生，但人文素养都还可以。<strong><em>不像有的大学生，除了专业知识以外，文化知识少得可怜。我认识的很多有钱人，家里啥子豪华家具、家电、车都有，但就是没有报刊、杂志，没有书，很糟糕。</em></strong>”</p><p>王苗说：“王兴认真、敬业，希望他推动对社会有益的事。他和他姐姐说不要我的钱，他姐姐清华毕业后到美国留学，现在在硅谷做工程师，自己买别墅和车，都没找我要一分钱。但我的企业也能继续做好，对社会有益，我现在聘请有能力的人管理，对社会创造财富。如果将来他们的儿子还花我的钱，那也是悲剧。总不能留下钱给他们，做富二代吧，虽然王兴也是富二代。”</p><p>“王兴创业的方向，他自己决定，以前我和两个小孩子说过，不指望你们赚多少钱，<strong><em>如果你们愿意搞科研，对国家做点贡献，我可以资金支持你们，让你们不至于生活太清贫。</em></strong>但问题是，他选择了创业，王兴创业肯定不是为了赚钱，我虽然有点钱，但两个小孩都说不需要，让我多捐款。王兴买房是靠自己，我没出过一分钱。我女儿在美国买房也是自己买的，他们都能自立就很好了。 他们都出过国，见了很多事情，眼界更加开阔。王兴创业，我觉得很正常，和我早年创业没多大关系，可能会有潜移默化的影响。”</p><p>王兴读高中时，担任班长。当时学校实行一个活动，一些班级可以申请无人监考。当时王兴所在的班是实验班，按理来说应是第一个申请的。但是王兴没有去。班主任吴老师问他，他反而问，为什么要申请？我们本来就没有偷看，无论有没有人监考，对我们来说没有关系，做这个没有意义。尽管后来吴老师说服了自己的学生，但是他意识到“王兴即使当兵都要当有头脑的兵，要知道为谁打仗、为什么打仗。”谈到王兴后来的创业，<strong><em>吴老师觉得王兴家的经济实力起了很大作用，家里情况允许他不是为谋生而读书，也允许他失败。</em></strong></p><p>优秀的家庭教育，和个人的勤奋努力，使得王兴和大他两岁半的亲姐姐有了相似的人生轨迹。一样的幼儿园/小学/中学，一样的大学而且一样的系（清华电子系），一样去美国读博（这回学校不同），一样只拿了硕士学位，之后的人生道路开始分叉：姐姐去硅谷加入公司做芯片，王兴则回国创业搞互联网。</p><p>再之后，王兴免去高考，从福建龙岩一中保送到清华大学。</p><p>1997年，王兴进入清华大学，在同校老乡的火锅聚餐会上(果然，这世界上没有一件事是一顿火锅不能解决的，如果有，那就两顿)，有一个清华迎新的“例行节目”：新生可以问学长学姐们一个必须回答的问题。往常很多人都借此打探学长的情感生活，拉拉家常之类。轮到王兴了，他问到：“<strong><em>你们认为人生的意义是什么？</em></strong>”，刹那间，全场安静。大家面面相觑：这小子来砸场子的？于是，问题抛给了比王兴入学早两年的亲姐姐。王兴姐姐沉默了一会儿，说：这个问题你要边走边想。</p><p>大一开班会时，每个人都被问到对大学生活的看法，王兴的答案是：<strong><em>修身齐家治国平天下</em></strong>。从这时开始，班会上有两个人开始觉得王兴不简单，一个叫王慧文，还有一个叫付栋平。王慧文后来跟着王兴创立校内网，掘得人生第一桶金，再后来又加入美团网。付栋平则一路跟随王兴创业，是美团网的6号员工。</p><p>王兴的大学生活没有那么的丰富多彩，除了在学校舞蹈队当了一段时间舞蹈演员外，其他的时候基本延续了自己理工科学霸的人设。他在舞蹈队跳的是一种叫做“黄土黄”的传统舞蹈。赤裸上身，胸前绑一个胸鼓，穿一条粗布裤子。</p><p>在当时大多数人还不知道互联网是啥时，他就拉着舍友王慧文一起捣鼓技术，聊创业与互联网。再之后，王兴顺手拿到了全额奖学金就跑到美国特拉华大学继续深造去了。</p><p>家庭条件的优渥，并没有让王兴染上铺张浪费的习惯(主要是家庭教育的好)，国外读研期间，王兴花钱很节省。王兴的父亲王苗曾说，在美国理发一次要30美元，王兴觉得太贵了，买了理发工具，自己给自己理发，还把理发的照片发给父母看。读研期间的奖学金，王兴也没有乱花，省下来了。这笔奖学金成为了他之后创业的启动资金。</p><p>2004年初，25岁的王兴中断了在美国特拉华大学电子与计算机工程系的博士学业，从美国回国创业。“<strong><em>当时除了想法和勇气外，一无所有，我读完本科就去了美国，除了同学没什么社会关系，回来后找到了一个大学同学，一个高中同学，三个人在黑暗中摸索着开干了</em></strong>。”王兴回忆说。其实，王兴当时给5个人写了邮件邀请一起创业，最终只有这两位加入了，即王慧文和赖斌强。</p><p>王慧文和王兴是大学同学，也是室友。王慧文中学时是标准学霸，大学后，开始走向学霸的反面，随性而为，成为学渣，班级成绩排名垫底，且热衷打游戏上网。赖斌强是王兴中学同学，当时在天津大学，离北京不远。他经常去清华找王兴玩，来了就借宿王慧文的床，因为王慧文晚上不睡觉，通宵打游戏。</p><p>王兴，王慧文和赖斌强，创业团队成型。他们三人在母校清华大学附近的海丰园租了一套130平方米的房子，开始了创业之路。</p><p>刚开始，他们尝试过很多项目。比如一个叫“多多友”的社交网站、针对海外朋友的游子图等。折腾了差不多10个项目，不过，均以失败告终。</p><h4 id="掘得第一桶金的校内网"><a href="#掘得第一桶金的校内网" class="headerlink" title="掘得第一桶金的校内网"></a>掘得第一桶金的校内网</h4><p>创办校内网时，除了王兴、王慧文和赖斌强外，还有一位女性联合创始人，即毕业于北京大学的郭万怀，她是校内网的第五号员工。之后王兴的几次创业，她也一直陪在身边，再之后，她成了王兴的老婆。</p><p>校内网推出的时候，没钱请设计师，直接复制了Facebook的用户界面。后来王兴解释说：校内网刚建立时，项目的内部代号是Facebook，所以代码里面很多Facebook的字样。有人在网上写文章骂他们抄袭Facebook，结果这篇文章被红杉资本的人看到了。</p><p>之后，红杉资本找到王兴，让他们准备一下商业计划书，去红杉办公室谈一谈。</p><p>这三位愣得一塌糊涂的年轻人，匆匆写了一页纸的商业计划书，但在出租车上给丢了，于是又在红杉会议室临时写了一份。红杉的投资人问他们，你们怎么做推广。事实上，他们也没有任何思路，但也不能回答没思路做推广，就回答：学生快放假了，准备搞个活动。</p><p>谈到价钱的时候，王兴开出了数百万美元的价格。投资人说：“你这价钱开得不低啊。”王兴回答：“<strong><em>再等段时间，我们就更高了</em></strong>。”</p><p>为了推广校内网，王兴他们想了很多办法。他们找到清华学生会，用清华电子系一年一度的学生节门票进行抽奖，须实名注册方能参与抽奖，很多人为了这个注册了校内，这些人成了最早的一批校内用户。</p><p>后来，他们还想出了一个点子：印上54个大学校徽的扑克牌。他们觉得学生在回家途中要打牌，在宿舍也要打牌，可以一拖四地推广宣传。当时已经找到做扑克牌的厂家，要么在廊坊做，要么在山东做。后来盘算从设计到印刷再到把它拉过来，成本太高了，便放弃了这个点子。</p><p>当时，也涌现了一批校内网的竞争对手。北大的沈文博做了“底片网”，复旦的做了“饱蠹”，人大的做了eDorm，北航的做了looface，中山大学做了亿友，李肇星的儿子从哈佛归来做了dorm99，耶鲁MBA的张帆夫妇做了“占座网”，斯坦福博士做了“课间操”。陈一舟的千橡做了5Q网。<strong><em>其中，占座网和5Q网是校内网的主要竞争对手</em></strong></p><p>之后，陈一舟和王兴谈判想收购校内网，陈一舟说：“如果你们不卖，我可以拿这些钱砸到市场上推广旗下的 5Q 网”。这句话激怒了当时意气风发的王兴团队，他们拒绝了和陈一舟的谈判，于是他们出去找投资。</p><p>王兴当时找遍了几乎当时所有的知名投资机构，也曾在红杉的引荐下遇到了周鸿祎，但老周跟王兴聊完后，<strong><em>发现他是一个“眼睛几乎长到天花板上”的海龟创业者，于是就跟红杉的投资方说这个团队牛逼哄哄的，不接地气，根本不像来融资的</em></strong>，最终将一大笔投资引向了校内网的竞争对手“占座网”。王兴后来自嘲地总结：<strong><em>他们拒绝我就像女孩拒绝男孩—你永远也不知道真实原因到底是什么。</em></strong></p><p>2006年上半年，王兴为校内网融资，去拜访一个知名投资人。投资人问：这事是跟百度QQ一个量级的事，还是小一个量级？，王兴答：<strong><em>SNS如果做好了是比百度QQ再大一个量级的事</em></strong>。投资人愣了一下，或许觉得王兴有点不知天高地厚。然后就没有然后了。</p><p>再之后，王兴向父亲借的50万元也花完了，校内网没钱了，负担不起服务器和带宽了。2006年，校内网以 200 万美元的价格卖给了陈一舟。后来陈一舟将校内网和 5Q 网合并，从日本软银融到了 4.3 亿美元，改名人人网，于 11 年上市，首日市值超过 70 亿美元。</p><p>被收购时，陈一舟派人来清点校内网资产。原本靠墙围一圈的电脑都被搬走，客厅里只剩下陈一舟不要的桌椅，出租屋里显得空荡荡的。王兴一个人坐在客厅椅子上，不说话，低头沉思，只有他的女友兼创业同伴郭万怀在边上安慰他，也没说话，因为那个时候不用说什么。</p><p>直至校内网卖出，整个团队只有14个人。王慧文本身家庭条件不好，为了做好校内网，到处借款了20多万，王兴也从家里拿了很多钱。卖掉套现之后，还了外债，团队成员陡然而富。王兴履行协议，进入陈一舟的团队工作。王慧文和赖斌强，则一块出游欧洲、东南亚，纵情天地，一玩就是近一年的时间。以至于后来王兴打电话让他们回来一起再次创业时，他们回答：“我们还没玩够呢，再玩一段时间，你先搞吧。”</p><p>三人的创业团队暂时解散，就像王兴所说的那样，<strong><em>是契约精神将我们聚集在一起，就算暂时分离，我们也会在下个路口再次相见。</em></strong></p><h4 id="再次折戟的饭否。"><a href="#再次折戟的饭否。" class="headerlink" title="再次折戟的饭否。"></a>再次折戟的饭否。</h4><p>再次创业，王兴借鉴了Twitter这种轻便的模式，他们认为域名一定要双拼，朗朗上口。翻字典都快翻了一个礼拜，实在找不到好域名，好的都被注册了。后来想了一个主意，按照声母和韵母排列组合，写了一个程序，在服务器上跑，查域名注册，跑出来的都是双拼组合，挑了两个：<strong><em>饭否和在否</em></strong>。没有人注册的域名，每年只需要花60元。 他们选了饭否，饭否有“廉颇老矣，尚能饭否”的典故在，又有中国人见面常打招呼说“今天你吃饭了吗”的意味。</p><p>做饭否时，为了将自己学弟，当时在百度做工程师的穆荣均拉入伙，王兴拉着他在办公室里聊了一宿，重复讲着自己的创业理念：<strong><em>我重新做一件事，绝不是为了某一天再把它卖掉，而是要有利于社会、合作伙伴和自己</em></strong>。</p><p>饭否上线后，王兴成了上面的超级大网红，每天都在更新自己的个人主页。<strong><em>如果我一整天都没看到、想到、或做过什么值得在饭否上说的事，那这一天就太浑浑噩噩了</em></strong>，后来他回忆说。有时候，实在没什么可写的了，就会像这样：<br><img src="https://uploadfiles.nowcoder.com/files/20181207/450315_1544151346377_0078QYBYgy1fudn5ab66nj30gu106gpz.jpg" alt="image"> </p><p>当时，王兴人送外号“下片王”(王兴很爱看电影，不过应该不是大家想象的那种小电影)。王老板一下片饭否就瘫痪，坊间传说，某段时间饭否服务器崩溃时的文案是：不好意思，王兴又在下片了，我们会马上恢复服务！</p><p>曾经有一次饭否宕机了，大家又一次刷屏：“王兴在下片”。结果，王老板亲自在饭否回复了：“你们以为我还在用服务器下片吗？”然后BLABLA说了一大堆。</p><p>还有一次，王兴在饭否发表一状态，“办公室超安静”，结果后面跟了一串评论：不要下片！</p><p>2009年7月，饭否网因某些原因被关闭。当时王兴母亲在美国上网，发现饭否停了。“我很担心王兴，他从小很要强，做事认真。这次对他打击太大，事情做得那么好，却停了，他的心情可想而知。我要他不要太伤心，他反而安慰我：‘没事，很快会恢复。’”</p><p>一般人要经历校内和饭否两次打击肯定挺不过来。在熟悉王兴的人眼里，<strong><em>王兴不会为破碎的瓷器而哭泣，他甚至会试图从碎瓷中收获些什么，哪怕是去了解一下碎花瓶理论</em></strong>。饭否被关后，王兴想搞清楚关停饭否的这套机制是如何运转的，但他找不到公开的官方资料。最后，他看了一本讲述美国统治阶级及其机构的社会学专著 Who Rules America?（《谁统治美国？》），这才略微消解了他的疑惑。</p><p>饭否整个团队只有十几个人，停滞期间，团队一直没有散。只有两个人离职，一位回老家了，现在是独立的开发者；另一位是饭否的技术合伙人，也是王兴的龙岩老乡，叫张一鸣。王兴在2010年成立美团网，再之后不久，2012年年底，张一鸣创办了今日头条。</p><p>饭否被关闭后，王兴一直希望把饭否重新做起来。后来，有个投资人找到王兴，说自己有关系，你把饭否卖给我，我能让它重开。但王兴很诚实的对他说，自己在做一门新的生意了，并兴致勃勃地向对方讲述了团购有趣的地方。那个投资人就是徐茂栋，他后来就收购了窝窝团，成为美团的竞争对手。(坊间传，王兴把团购的模式和徐茂栋讲的很清楚，徐也觉得团购可行，于是就收购了窝窝团，自己做了)</p><p>在饭否被禁期间，为了维持团队稳定，王兴又开始了一个新的创业项目，美团网于是就诞生了。</p><h4 id="创业大成的美团"><a href="#创业大成的美团" class="headerlink" title="创业大成的美团"></a>创业大成的美团</h4><p>美团CTO有一次回忆说，美团刚刚成立的时候，王兴写过代码，实在写的不咋滴，后来就不写了。</p><p><strong><em>王兴做美团时特别重视诚信和用户感受，还把自己的夫人放到品控部亲自负责质量控制。</em></strong></p><p>美团网的66号员工杨俊，2009年4月离开饭否，举家搬迁至日本，他本人到软银工作。王兴创办美团网之后，找到他，希望他回国一块儿创业。杨俊想了很久：自己从2005年到2010年，折腾了这么久其实没折腾出什么事情来，美团网这个机会还是应该跟大家搏一把的。他又举家回国，加入美团网。</p><p>王慧文对王兴很是崇拜，也极度信任。当时，王兴承诺给他股权劝他加入美团，由于公司太忙，没有时间签订各种协议，王慧文来了之后，直接开始工作。2011年，美团网做融资，阿里巴巴的投资人做尽职调查，和王慧文发生如下对话： </p><p>投资人：你知道你在美团网的股份吗？ </p><p>王慧文：我大概是知道的。 </p><p>投资人：你们签协议了吗？</p><p>王慧文：没有。 </p><p>投资人：你不担心吗？  </p><p>王慧文说：不担心，这（我的股份）是王兴亲口告诉我的。他说有就有，我相信他。当时，王兴也忙，我也忙，先别为这些事纠缠了，把重要的事情办了再说吧。股份这种事情出尔反尔的很多，但我内心很踏实，我对他有信心。做协议，得认真花时间看文本，反复询问，耽误很多时间。2010年年底到2011年上半年，美团网处于千钧一发的时候，一点儿时间都非常宝贵。这种信任可以让成本大幅度降低，别讨论来讨论去的，先直接办事再说。</p><p>2011年9月，王兴飞去杭州找干嘉伟希望他加入美团，提出可否请他的夫人吃饭。干嘉伟心想一个清华理工男为了他可以去做一些自己不太擅长的事情，遂答应王兴赴约。饭后，王兴走神了沉浸在思考中，于是他叫来服务员买单。<strong><em>待干嘉伟结完账，王兴很自然地站起来就跟他们一起走了。很久以后，当干嘉伟再次与王兴提起此事，王兴一脸茫然，印象全无。</em></strong></p><p>千团大战时，中国市场出现了1800多家团购网站，广告铺天盖地出现在地铁、公交和户外墙面上，有人计算过：平均每天诞生6家创业公司。狂热之中，王兴显得很冷静。他事后透露：<span style="color: red; font-weight:bold;">一位参加过对越自卫反击战的投资人跟我说，多数人对战争的理解是错的，战争不是由拼搏和牺牲组成的，而是由忍耐和煎熬组成的。</span></p><p>美团和阿里关系闹得很僵时，王兴还专门去拜访了马云和逍遥子。王兴说：我认为前面有滴滴快的这个成功的例子 —— 原来两家A、T打得不共戴天，后面握手言和，都成为滴滴的股东。所以我跟阿里说美团非常希望可以同时得到腾讯和阿里的支持，但他们说：“<strong><em>你完全搞错了，我们认为滴滴合并快的对阿里来说是一个失败的例子，我们不会让这种错误再次发生。</em></strong>” 我说腾讯已经答应进一步投资美团点评。阿里说，我们可以投钱给你，你要10亿美元可以，20亿美元也可以，我们都可以投，但是你不能再要腾讯的钱。</p><h4 id="王兴的饭否："><a href="#王兴的饭否：" class="headerlink" title="王兴的饭否："></a>王兴的饭否：</h4><p>众所周知，王兴对饭否是极度热爱的，大大小小的事都会写在饭否中，本着寻根究底(一扒到底)<br>的精神，为了写这篇文章，我翻阅了王兴的一万多条饭否博文，整理出了下面这些有趣的，供各位看官欣赏：</p><p>在酒店大堂跟人谈完事情，起身走人，从茶几上拿起两部手机，左右手各一，边走边插进裤子前兜里，那一瞬间觉得自己像个双枪牛仔。</p><p>我曾经也认为自己要永远「站在弱者这一边」并颇为自豪，后来多经历了一些事情，才知道正确的是「站在规则这一边」，不是谁（以弱者身份）来闹谁就有理就能得利，否则，最终所有人都是受害者。</p><p>为啥苹果的就叫刘海儿，而程序猿的就是秃顶呢。</p><p>不懂拉丁文已经严重影响我装逼了。</p><p>我小时候种甘蔗的经验是：甘蔗要想甜，需要很多阳光，很多水，<strong><em>和适量的尿</em></strong>。</p><p>对着黄浦江发呆的时候想起来，昨天的晚宴上一个女投资人一见面就说「我昨晚梦到你了」，我赶紧问怎么回事，原来是她梦到我在她家门口的大河上跟人赛龙舟了</p><p>我做美团已经8年多了，超过了从1937年卢沟桥事变算起的八年抗战；我回国开始创业已经14年多了，超过了从1931年九一八事变算起的十四年抗战。却仿佛只是一眨眼。</p><p>今晚争取早点睡，以免过劳死。</p><p>平生第一次这么干这么二逼的事：把药片放进嘴里，灌了一大口水，正准备往下咽时想起还有另一种维生素片没吃，又懒得再起身去装水，于是含着水仰起头，把剩余的药片从微微张开的嘴里塞进去，再一次性咽下去，耶！</p><p>发展了一个新爱好：听中文发言时戴上同传听听英文翻译得如何</p><p>开了一天会，本来想一个人去吃一块大牛排，走到半路看到曾经常去的粤式家常菜，临时改了主意。有两年没去了，<strong><em>不知道那个普通话很不标准的总是板着脸的老板娘还在不在。</em></strong></p><p>每年刚从棉袜换成羊毛袜时，我都忍不住说一下，脚感确实不同。<strong><em>我没穿过丝袜，不知道是什么感觉</em></strong>。话说现在女生穿的丝袜基本也都是尼龙袜吧，不是真的丝袜了。</p><p>在我误入女洗手间出来后，我看到两个小伙子也一头扎进去了。是设计有问题，不能全怪我们。</p><p>好担心自己老了怎么办，那些广场舞看起来好难。</p><p>蹲厕确实比较锻炼腿。</p><p>「人生而自由，却又无往不在枷锁之中」。卢梭装逼，天下无敌。</p><p>躺在床上半睡半醒间迷迷糊糊想了一些事情，其中最确定的一件是：2050年我将是71岁。</p><p>跟一个初次见面的老头闲聊。我说：「听说李安在拍一部新电影，拳王阿里的马尼拉之战。我还蛮期待的。」他说：「那场比赛我在现场看的。」好吧，装逼装不过你。</p><p>我清晰的感觉到感冒病毒已经侵入了我的身体。我要开始发烧了。</p><p>确实有必要加强对雾霾的了解。我刚发现我拿起笔连霾这个字都不太会写。 </p><p>冲完澡擦干身体，外裤套到一半才想起还没穿内裤，这就是匆忙慌乱的一天的开始。</p><p>友情提醒：啐痰吐唾沫之前别忘了确认一下是不是还戴着口罩。别问我怎么知道的。</p><p>北京的这个时间已经是黑天了，外面确实很冷，刚出机舱门的那一刻我以为我没穿裤子。</p><p>学会了，只要是女性，只要年龄不是太离谱，称呼都不叫「小姐」也不叫「大姐」，而是「小姐姐」。</p><p>每次有媒体(尤其是外媒)问到为什么中国的互联网创新基本上落后于美国时，我就想只扔给他们一句：你觉得阿拉伯人最会挖石油吗?</p><h4 id="王兴的趣事"><a href="#王兴的趣事" class="headerlink" title="王兴的趣事"></a>王兴的趣事</h4><p>紧张工作之余，王兴有时会稍作遐想，倘若早出生一百万年，作为一个男人，此刻我应该正在狩猎。我应该围着兽皮裙，手持标枪，正在捕捉山羊野鹿，也可能正和虎豹豺狼大狗熊做生死之搏。如果我干不好，我就会被咬死，我的家人族人就会饿死。每想到这里，我就决定集中精力，回到中国互联网这个现实丛林中来。</p><p>“他是一台深度学习的机器。”今日资本创始人徐新这样评价王兴，“他做的很多业务，都不是第一个，却能后来居上，把前人PK掉。”</p><p>张小龙曾说过，“<strong><em>微博是个穿衣服的地方，饭否是个脱衣服的地方</em></strong>”。</p><p>王兴有一段时间很不喜欢阿里。有一个故事，美团内部开会，干嘉伟会向他的下属感恩阿里，夸马云，但王兴进来后，便风云陡转，成了阿里批判大会。</p><p>今日头条创始人张一鸣说，“王兴好奇心强，阅读面广，对各种奇怪的问题感兴趣，社交稍微少一点。”</p><p>而在红杉资本合伙人孙谦那里，王兴留给他的最大印象也是——“<strong><em>好奇心非常的强，他对这个世界有着巨大的好奇</em></strong>。比如前段时间他在香港开会，我们一起吃完中饭，我问他下午干什么，他问香港有没有博物馆，他要找有关香港历史的博物馆。”</p><p>当年公司还只有十几个人的时候，某次跨年party时，王兴组织大家一起看《牯岭街少年杀人事件》。</p><p>王兴曾经有一段时间应该在追一位欧洲的女孩：<br><img src="https://uploadfiles.nowcoder.com/files/20181207/450315_1544151346350_0078QYBYgy1fudp2lgxcjj306g02t3yv.jpg" alt="image"></p><p>一群创业者在海南聚会，游艇开到海中，完事后说大家可以游泳。众人都在犹豫，没带泳裤，你看我我看你。忽然只听扑通一声，循声望去，王兴已跳入水中。众人不免一笑。这是典型的王兴。时时观照自己，听从本心。</p><p>王兴喜欢篮球，同时代的男生，大都受NBA的影响，崇拜乔丹。王兴个子与体格在球场上算一般，但投篮特别准。或许因为曾在球场上受过挫折，高中时一个暑假，王兴决定练好篮球。他买来一本篮球教科书，按照教科书里的方式，拆解动作，一个个动作重复练习，王兴说，他忘了自己每个动作究竟练了多少次，一个暑假的挥汗如雨，一个个简单动作的拆解，机械地重复千万次后，他成了一个投篮高手。</p><p>著名媒体人程苓峰觉得王兴是个很轴的人。当时腾讯微博和新浪微博大战，程在腾讯任职，扛了拉微博的指标。他去拉王兴来注册。王兴的回答干净利落：no。相当“不给面子”。又和王兴说这里“有趣”。王兴却反问：跟饭否和新浪微博有什么不一样。完全一副不进油盐的嘴脸。再后来。程回忆说：“其实他完全可以敷衍。像很多人一样，来注册一下，帮我完成KPI，发一条微博，然后永远消失。可这人就是轴啊。但这样的人峰哥才喜欢。不装，明着来。”</p><p>2011年，3Q大战期间，王兴还曾“补刀”过周鸿祎：<br><img src="https://uploadfiles.nowcoder.com/files/20181207/450315_1544151346362_0078QYBYgy1fudp6p5khuj310y0b2wmx.jpg" alt="image"></p><p>坊间也有传言说他在办公室从不走路，要么小跑要么快走，解释是这样效率更高。</p><p>滴滴的程维和王兴是朋友。程维在阿里时，就非常佩服王兴。后来开始做滴滴，程维将滴滴的第一版产品交给王兴看时，王兴说这产品就是“垃圾”，“你看看现在的互联网产品，哪里还有需要注册的”。两人还一同到乌镇参加访谈。再后来，程维当天还和王兴吃饭，晚上看新闻时才知道美团上线了打车产品。那时候，美团打车在南京试运营，一切都还是萌芽状态。程维当面质问“为何做打车”时，王兴也只是避重就轻回答了“试试”二字。</p><p>2013年，想进入外卖领域的王兴派了亲密战友、如今美团网的副总裁王慧文去见饿了么创始人张旭豪，想谈收购饿了么。但是，张旭豪一口回绝。</p><p>眼看收购不成，王慧文说，那我们投资。张旭豪随口答应说，要么1000万美元吧。</p><p>王慧文没答应，当时饿了么估值不过5000万美元，于是失意而归。后来，张旭豪谈到这件事时轻描淡写地说：只是吃饭时随口谈起，没有人当真。不过，他还放了一句话：<strong><em>我们还想收购美团呢</em></strong>。</p><p>王兴曾面向清华学子分享自己的人生经验和创业历程，并给出了三点建议：</p><p>第一，别太不把自己当回事。</p><p>第二，也别太把自己当回事。</p><p>第三，也别太把别人当回事。</p><p>王兴曾说过，什么样的叫人才？“我可以学”四字分量很大。他分享了一个故事：有一次公司开会到晚上12点，讨论接近尾声，需要有人整理会议记录，涉及流程图的部分用visio画比较好。王兴就问一个年轻同事会用visio吗？她毫不犹豫地说“我可以学”。这件事给他留下来很深的印象。</p><p>知乎上有人提问：作为互联网从业者，你错失了哪些创业机会？王兴回答：<strong><em>我一贯而且真实的想法就是：纵情向前。哪有什么所谓错过的机会，那本来就不是你的机会。既往不恋，当下不杂，未来不迎</em></strong>。</p><p>有一次，王兴去首都机场坐飞机。在机场，有位安检员拦住了他问道：校内网卖得值吗？王兴一时竟无言以对。</p><p>知乎上有个问题：王兴除了把国外的东西带到国内，他还做了什么？有一个答案是：<strong><em>还把他们都做起来了</em></strong>。</p><p>“有一艘宇宙飞船要飞向无尽的太空，不一定能回来，你去吗？” 面对这个问题，王兴毫不犹豫地回答：“我一定去。”</p>]]></content>
      
      <categories>
          
          <category> 互联网大佬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网大佬系列--马化腾</title>
      <link href="/2018/12/07/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E9%A9%AC%E5%8C%96%E8%85%BE/"/>
      <url>/2018/12/07/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97-%E9%A9%AC%E5%8C%96%E8%85%BE/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>夫，以铜为镜，可以正衣冠；以史为镜，可以知兴替；以人为镜，可以明得失。<br>最近的迹象让我感觉，未来的几年或许经济会迎来寒冬。或许过几年的我，某一天突然的就会被辞退。<br>恰似现在的ofo，摩拜等一些互联网的员工一般。早上还在工作，晚上就开始吃散伙餐。<br>因此，希望在这两年还未进深冬之时，能给自己储存一些过冬的食粮，无论是物质或是精神上。<br>无需他人知道自己的故事，没有光芒也就少了烦恼。<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><ol><li><p>马化腾的QQ号码是10001。</p></li><li><p>1971年10月29日，马化腾出生在海南岛东方市八所港。户口随父填的是广东省潮阳县。有一个年长4岁的姐姐。</p></li><li><p>为了培养儿子的科学兴趣，父母订阅了《我们爱科学》杂志。小学四年级的时候，马化腾在杂志中读到一篇讲述如何用各种镜片制作天文望远镜的文章，就缠着妈妈买了一套镜片回来，动手做了一台简陋的望远镜，这是马化腾人生中的第一款作品。</p></li><li><p>马化腾初二转入深圳中学，那时候他只有一米四一，只能坐第一排。同排的一个同学，叫许晨晔。</p></li><li><p>马化腾从小喜欢天文，14岁，他想买一个专业级的望远镜，但是爸妈觉得太贵不给买。小马不开心但他也不说出来，默默在日记里写：爸爸妈妈这就在毁掉一个天文爱好者。后来爸妈就给他买了。（每个爸妈都会偷看日记）</p></li><li><p>1986年，那年15岁的马化腾读初三，他成为全校第一个看见哈雷彗星的人。他拍下了彗星的照片，还写了一篇观测报告，寄到北京，结果获得了观测比赛的三等奖，拿到了40块的奖金。他之所以能够看到哈雷慧星，是因为他花了父亲近4个月的工资购买了一台准专业级、80毫米的天文望远镜。</p></li><li><p>初中时，马化腾成绩一直排在前三。许晨晔他们都学奥数，只有马化腾参加天文兴趣小组。</p></li><li><p>高中时，陈一丹与马化腾比赛背圆周率，后来大家都能背到小数点后一百多位。</p></li><li><p>马化腾的高考分数739，高出重点线100多分，可以进清华或复旦。因为父母不想子女走太远，最后马化腾留在了深大。</p></li><li><p>和马化腾一起考进深圳大学计算机专业的还有许晨晔和张志东，这些人都是腾讯的创始人，马化腾在36个同班同学中成绩排名第三，许晨晔还跟他分进了一个寝室。</p></li><li><p>班主任回忆，每次去寝室巡视，都能看到马化腾在看书或者操作电脑。别人都在扎堆聊天。</p></li><li><p>许晨晔回忆，马化腾每天都绕着校园跑步。有一段时间，还对气功产生了兴趣。</p></li><li><p>大学的时候，马化腾为了能常去学校机房练习编程，就给机房电脑植入病毒，然后再去帮老师杀毒。老师就一直让他来帮忙，后来发现是他搞的鬼，但还是让他常来机房。</p></li><li><p>马化腾大二时就说：“我们是靠C打天下的”。不过他的算法不是很强。</p></li><li><p>1993年马化腾就关注了人工智能领域，他毕业论文写了一个证券分析软件，里面有一个模块是用神经算法人工智能计算。为了分析股票买卖双方的心理博弈过程，马化腾自学了神经元的知识。</p></li><li><p>马化腾的实习单位黎明网络公司开价5万元，买下了他大三时开发的软件。在90年代，5万元相当于一个大学毕业生3年的薪水。</p></li><li><p>四年的大学生涯中，马化腾没有担任过任何学生干部的工作，也没有竞选过任何协会职务。</p></li><li><p>刚毕业的时候，小马哥在惠多网兼职了一个站长，站点叫ponysoft，编号655/101。一个浙江的热心网友提出见面，并且日后在这位网友的影响下，小马哥开始辞职创业以及做游戏。这位热心网友叫丁磊。他们都出生于1971年。</p></li><li><p>马化腾在同学的告知下去润迅面试，展示了自己设计的股票分析系统，第二天就被录用了。</p></li><li><p>马化腾在润迅做到的最高职务是主管，位置不高，同事印象单薄，管他叫“小马”。</p></li><li><p>在润迅的时候，马化腾就注意过OICQ，还曾经讨论过研发这款产品的可行性。一位高级主管问道：“它能赚钱吗？”。不能，就被否了。</p></li><li><p>马化腾在华强北打算创业，动手组装过8086/286/386/486等早期所有世代的计算机，收入已经可以超过润迅的工资。但是他发现自己装机速度比不过华强北的初中生，就放弃了。</p></li><li><p>有一次张志东所在的公司一台服务器经常死机，是有黑客入侵，他追索到了润迅的IP，而他唯一认识的润迅人就是马化腾，他打电话过去直接问：“这是你干的事吧？”。对面一阵呵呵笑声：“我就是试试你的水平。”</p></li><li><p>腾讯的五个创始人中，马化腾、张志东、许晨晔和陈一丹都是从中学到大学的同学，只有曾李青是许晨晔在深圳数据通信局的同事。</p></li><li><p>马化腾父亲在97年的时候就是一家背景雄厚上市公司的董事，当时要创业的几个小伙伴月薪都不到2000元，而注册公司最低要50万，于是马化腾父亲就给了马化腾50万做注册资金和启动资金。</p></li><li><p>创业后公司去登记注册的时候，马化腾和张志东都还没办完辞职手续。因此董事长写的是马化腾的妈妈，黄惠卿。</p></li><li><p>当时腾讯的创始人里面三个技术，一个法务，一个运营，大家文学功底都不好，于是马化腾找到了他爸爸帮忙取名字。爸爸一起就是四个，一开始想叫“网讯”，就是“网络通讯”的意思。第二备选是捷讯，第三是飞讯，第四才是腾讯。前面三个都已经有主了，就用了腾讯。“腾”一个寓意是马化腾的最后一个字，另一个意义是腾飞，而讯则是马化腾上一个公司名字的最后一个字（润迅）</p></li><li><p>腾讯第一个办公室在华强北赛格科技创业园的一座老楼里面。是一个认识的人借给他们用的，30多平方，门口有一堆很艳俗的陶瓷花瓶，顶上挂着歌舞厅用的水晶灯。五六个人往里一坐，满满当当。</p></li><li><p>出去谈业务，陈一丹名片印着“业务经理”，马化腾印着“工程师”。对面就觉得团队挺专业的，其实就几个人。</p></li><li><p>当初是广州电信要买一个类似ICQ的通信工具向全社会公开招标。马化腾决定试一试，起名字的时候，想到了“open”，即开放，于是就叫OICQ了。中文名叫“中文网络寻呼机”。</p></li><li><p>OICQ是第四个“汉化ICQ”，前面有台湾资讯人、网络精灵和飞华在做。</p></li><li><p>马化腾的寻呼机情结非常重，设计消息提示音的时候，有的说用敲门声，或吹口哨的声音。马化腾说最熟悉的还是寻呼机的“嘀嘀”声，还是用自己的寻呼机录下的声音。</p></li><li><p>OICQ第一个版本——OICQ 99 beta build 0210，正式诞生于1999年2月10日。</p></li><li><p>OICQ放号前，马化腾预留了200个号，对外开放从10201开始。当时想的是200个号足够给未来十年工作人员数量增长的需要了。99年4月，一次出差回去，筋疲力尽的马化腾和陈一丹在招待所看到OICQ在线用户超过了500。两人手忙脚乱翻出杯子，买了一瓶啤酒庆祝。</p></li><li><p>创始人之间经常吵架，拍桌子，甚至相互不理。马化腾从来不吵，只会生气，生气的时候言语刻薄。他的管理能力、领导风范都是后来的事</p></li><li><p>几个创始人每天必定在一起吃午餐或晚餐，用这个时间来沟通。</p></li><li><p>OICQ用户的迅速增长带来了巨大的维护压力，服务器承受不住必须要添置新的，可是最便宜的也要五六万，根本出不起。于是张志东去华强北买了一堆零件，和马化腾一起自己装了一台山寨机。</p></li><li><p>马化腾：我和太太就是通过QQ认识的，不过当时她也不知道我是谁，我就说我是工程师。</p></li><li><p>据说早期腾讯并没有考虑到安全问题，通信协议是不加密的。后来马化腾让程序员黄业均开发加密软件。两个星期过去了，马化腾跑去看他进行到哪了，黄出去打球了，桌子上倒扣着《加密原理》，马化腾拿起来一看 —— 第一章第一节“什么是加密”。</p></li><li><p>最初OICQ的图标是一只寻呼机。改图标时，马化腾还不同意。内部争执改图标时，马化腾提议挂到网上去，让用户自己选择。这是中国互联网企业历史上第一次把品牌logo决定权交给用户。</p></li><li><p>马化腾和曾李青出去谈业务，别人都把曾李青误认为马化腾，因为曾李青更有老板派头，而马化腾没有攻击性。</p></li><li><p>跟IDG的王树谈投资时，马化腾腰椎间盘突出，曾李青愣是把他从床上拉起来。</p></li><li><p>腾讯早期，同事们上下班没有时间概念，但在公司里的时间必然超过家里。后来怀疑是用OICQ聊天，因为家里上网费贵。</p></li><li><p>当年马化腾找IDG融资，将腾讯的项目报上IDG总部时，IDG的高级合伙人一起飞到广东，逼着马化腾说这个东西怎么赚钱。几个人拷问了马化腾一个晚上，直到过了凌晨，马化腾才无奈的表示：这个东西大家都喜欢，但都不知道向谁收钱。</p></li><li><p>给IDG的商业计划书上，马化腾和曾李青将腾讯估值为550万美元，打算用40%的股份募资220万美元。没有盈利根据。王树问，腾讯为什么值550万美元？马化腾说，因为我们缺200万。</p></li><li><p>腾讯那时候没有固定的上班时间，规定9点上班，过了大半个小时才有人来开门。马化腾过了10点才来，到了下午5点，没人离开，许晨晔和陈一丹这个时候才来公司处理业务。马化腾一般工作到晚上10点之后，很多人就陪着。</p></li><li><p>腾讯也没有什么等级观念，每个人都有英文名。马化腾叫Pony，曾李青叫Jason，陈一丹叫Charles，许晨晔叫Daniel，吴宵光叫Free。大家都直呼其名。</p></li><li><p>有一天吴宵光在公交车上听到两个网友称OICQ叫QQ号，回去跟马化腾说，就决定叫QQ了。</p></li><li><p>马化腾超级爱抽烟。</p></li><li><p>马化腾本人是“细节美学”和“白痴主义”的偏执实践者，腾讯从第一天就具备了产品观念“ Don’t make me think！”。</p></li><li><p>MIH的网大为跑到中国每个网吧看，发现每台电脑上都挂着OICQ。后来接触投资公司时，发现每张名片上都印着OICQ号，激起了他对腾讯的兴趣。</p></li><li><p>Pony喜欢开长会，超长会，每个议题提出来，马化腾不表示自己的看法，要听每个人的意见，一轮下来就很久了。大多数决策都是到了半夜，大家都太困了，“快点定下来吧”。</p></li><li><p>02年3月一次讨论中，许晨晔无意说出了“Q币”这个词，大家都觉得不错，就定下来了。</p></li><li><p>3721周鸿祎、前程无忧甄荣辉、联众鲍岳桥、携程梁建章和腾讯马化腾，当时被称为“五小龙”。</p></li><li><p>马化腾是第一批QQ秀用户，他给自己买了一头长发、一副墨镜、紧身牛仔裤。</p></li><li><p>02年5月，马化腾、张志东和曾李青一起去美国看看E3电玩展。去领事馆办签证的时候，马化腾被拒，曾李青跟签证官大谈腾讯的前景，签证官被说动了，问他有没有人跟他一起，他指指刚被拒签的马化腾说，他是我老板。签证官把马化腾叫过来，重新给盖了章。</p></li><li><p>腾讯准备做新闻门户的时候，让法务部检索了一下，发现 www.QQ.com 被一个美国人注册了。当时美国互联网还没从泡沫中恢复过来，域名大缩水，从2000万人民币的报价缩到50万人民币买了。</p></li><li><p>曾李青是腾讯5个创始人中最好玩、最开放、最具激情和感召力的一个，与温和的马化腾、爱好技术的张志东相比，是另一个类型。其大开大合的性格，也比马化腾更具备攻击性，更像拿主意的人。不过或许正是这一点，也导致他最早脱离了团队，单独创业。</p></li><li><p>马化腾觉得刘炽平是他见过的香港人里面普通话讲的最好的一个，而且他的名片上还有QQ号，让Pony觉得很亲切。</p></li><li><p>3Q大战时，周鸿祎推出“扣扣保镖”，欲取代“QQ安全中心”，听完张志东的汇报，马化腾的反应是 —— “怎么也没想到，他会做这种事。”</p></li><li><p>腾讯员工在电梯里面遇到马化腾，马化腾都不好意思打招呼，就笑一下，然后低头看手机，实际手机上什么也没有。有位潮汕老乡用潮汕话跟马化腾搭讪，他很不客气地用普通话回答：噢，是老乡啊～</p></li><li><p>腾讯大厦楼下有家腾讯开的咖啡馆叫image，其实真正叫法是”爱马哥”。</p></li><li><p>Pony喜欢白天睡觉晚上工作，经常凌晨2、3点处理工作，给人留下很勤奋的印象。</p></li><li><p>因为低调，被称为“影子领袖”，马化腾自己承认，在某个事实层面上，其实是因为“不知道如何对别人讲述腾讯的故事”。</p></li><li><p>尽管不愿交际，马化腾也有在悄悄改变，进行了多次演讲，“马八条”、“马七点”流传于舆论圈。“互联网+”的提法还被中央政府的年度报告采用。</p></li><li><p>唯一一本从中学订到现在的杂志就是《天文爱好者》。04年董事会送他的生日礼物就是一架专业级的高倍天文望远镜。</p></li><li><p>04年马化腾结婚了，过去几年，他几乎每天都10点之后才离开公司，大家都要陪着他。结婚之后，他开始按时下班，大家也解放了。好日子没过多久，大家经常在半夜12点之后收到他的工作邮件。</p></li><li><p>校园招聘时，最好的学生都抢着进微软。没人愿意来腾讯，马化腾则调侃说腾讯在用二流三流的人才与微软打仗。</p></li><li><p>2006年，马化腾接受《中国企业家》采访：“<span style="color: red; font-weight: bold">我不盲目创新，微软、谷歌做的都是别人做过的东西。最聪明的方法肯定是学习最佳案例，然后再超越。</span>”</p></li><li><p>06年，QQ在线用户超过2000万，熊明华问马化腾：“你估计什么时候可以超一个亿？”马化腾说：“也许我有生之年看不到。” 2010年3月5日晚上7:52，QQ同时在线用户达到1个亿。</p></li><li><p>第一个公开把马化腾叫做“抄袭大王”的是新浪网创始人王志东。说腾讯是公开、名目张胆地抄，并且自己要学习马化腾的“抄袭精神”。</p></li><li><p>马化腾是《QQ音速》的忠实粉丝，在游戏公测的倒计时会上大秀操作，放的歌曲是《All Combo》，惊呆了会场其他人。</p></li><li><p>马化腾在公司里要求“10/100/1000”原则：产品经理每个月必须做10个用户调查，关注100个用户博客，收集反馈1000个用户体验。</p></li><li><p>创业初期，马化腾每天轮着使用产品，他觉得“这个周末不试，肯定出事”。</p></li><li><p>张小龙自己都不知道为什么收购Foxmail，马化腾说过：“Foxmail的体验做的特别好，我们自己也做，发现怎么都做不好。”</p></li><li><p>张小龙性格孤僻，总是以“早上起不来”为借口不去参加会议。为了迁就他，马化腾就让自己的秘书一大早叫醒他。后来张小龙就说路上堵车，以后每周开例会的时候，小马哥派的专车都会准时到楼下来接他。</p></li><li><p>张小龙不想来深圳工作，马化腾迁就他，在广州设立了研发中心，张小龙当总经理。</p></li><li><p>2008年，腾讯创新大奖的大会上，熊明华准备好了演讲稿和PPT，逼着为难的马化腾在技术峰会上做了一个演讲。挺成功的。</p></li><li><p>全中国生日最多的男人，一年365天，天天都过生日，转发生日快乐到群里，送qq会员。</p></li><li><p>关于女儿，小马哥保护的很好，网络上爆出多张照片，马化腾在朋友圈强硬回应称“全是假冒”。</p></li><li><p>给一个学校剪彩，愣了半天说：“哎呀…其实我超尴尬的。”然后，“我宣布，以我名字命名的教学楼，揭幕！”</p></li><li><p>小马哥非常喜欢玩第一人称射击，所以中国区的使命召唤是他力推的，服务器在深圳腾讯大厦里就有。</p></li><li><p>2010年，《计算机世界》刊登了一篇题为《“狗日的”腾讯》封面头条文章，文中把腾讯作为互联网公敌进行批判。马化腾的第一反应是 —— “他们怎么可以骂人？”</p></li><li><p>2010年9月，周鸿祎向马化腾提出合作，即腾讯投资360，做拦截百度的东西，投资迅雷等公司，建立企业平台。马化腾拒绝了，理由是“这些公司没有价值”。</p></li><li><p>3Q大战开始，周鸿祎给每个互联网公司高管打电话，开场白都是：“哥们儿，你知道你的敌人是谁吗？”马化腾性格内向，下令公关部：“什么也不许说，但不能出负面新闻。”</p></li><li><p>在QQ、360二选一的界面上，其他人想要把“”卸载360“这几个字体调的大点，好引导用户选择，不过马化腾坚持“卸载QQ”和“卸载360”两个按键的字体一样大，情绪很激动，重重地拍了一下胸脯说：“一样大，来吧。”</p></li><li><p>2010年以前，马化腾从来没有跟任何一个媒体总编辑吃过饭，全中国财经记者最难采访的人，都在深圳，一个是华为任正非，一个就是马化腾。</p></li><li><p>一次采访中，记者问：“外界最让你难以接受的误解是什么？”马化腾说：“产品出个什么问题，特别多的人骂你。”</p></li><li><p>2012年3月29日凌晨4点，马化腾在腾讯微博上发：“终于，突破1亿”。微信用了433天，QQ用了10年，Facebook用了5年半，Twitter用了4年。</p></li><li><p>微信红包内测时，马化腾也是这个产品的第一批体验者，他给一些企业老板发了一个随机红包，50个随机，人均20块。</p></li><li><p>小马哥会在长假开工第一天给每个见到的员工发大红包，腾讯员工每年都有人凌晨开始排队。这是潮汕的习俗。一开始是10块，后来是100块。腾讯员工迅速增长，马化腾还是坚持发红包，每年腾讯发红包都是深圳一景。</p></li><li><p>一个上市公司CEO说：晚上12点加班开完会，还是要锻炼，决定跑步回家。马化腾就问：你是换了衣服再背着背包跑吗？那人说，办公室备了衣服，让司机把包送回家。马化腾提建议：路上的人和车那么多，让司机送你到体育场或者室内跑，会更安全吧？</p></li><li><p>摩拜单车的创始人胡玮炜曾经是腾讯汽车频道的员工。</p></li><li><p>有一次一个投资人贴了一张自己孩子在船上钓海鱼的图片。马化腾说：孩子太轻小心安全。</p></li><li><p>有一个离职的腾讯员工朋友圈里提问：《三体》里说，智子锁死了地球科技。我就问，其具体实现机制是什么？是能量场吗？没料到马化腾回复了：不是能量场，是智能控制的能微观到基础粒子层面干扰地球基础科学家的实验结果而无从进一步发展基础科学。</p></li><li><p>自媒体发表对于行业和新闻人物的各种看法。马化腾在下面会明确回复：“赞同”，或者是，“不同意”。</p></li><li><p>一次交流中，马化腾很感慨的讲过一段话：“不管已经出现了多少大公司，人类仍然处在互联网时代的黎明时分，微微的晨光照不亮太远的路。互联网真是个神奇的东西，在它的推动下，整个人类社会都变成了一个妙趣无穷的实验室。我们这一代人，每个人都是这个实验室的设计师和参与者，这个实验室值得我们屏气凝神，心怀敬畏，全情投入。”</p></li></ol><p>更新：<br>· 关于马化腾没去清华，有种说法是，当时深圳户口迁出后不能再迁回来，未来保住深圳户口没出去。</p>]]></content>
      
      <categories>
          
          <category> 互联网大佬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第4期-你只知道AJAX?</title>
      <link href="/2018/12/04/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC4%E6%9C%9F-%E4%BD%A0%E5%8F%AA%E7%9F%A5%E9%81%93AJAX/"/>
      <url>/2018/12/04/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC4%E6%9C%9F-%E4%BD%A0%E5%8F%AA%E7%9F%A5%E9%81%93AJAX/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着前端技术的发展，请求服务器数据的方法早已经不局限于ajax，jquery的ajax方法了。各种js库已经如雨后春笋一般，蓬勃发展，本文主要介绍axios和fetch。<br><a id="more"></a> </p><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><p>ajax(<code>Asynchronous JavaScript and XML--异步JavaScript 和 XML</code>),是一种客户端向服务器请求数据的方式，并且不需要去刷新整个页面；它依赖的是XMLHttpRequest对象。当然一般项目中我们不是直接使用原生的ajax，而是使用各种库，例如Jquery。不过随着前端技术的发展，XHR也有了替代的方案（fetch）。</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>是基于Promise的HTTP库，可以用在浏览器和nodejs中。  </p><p>随着vuejs作者尤雨溪发布消息，不再维护vue-resource，并推荐大家使用axios开始，axios就进入了很多人的目光。axios本质也是对原生的XHR的封装，不过它是Promise的实现版本，符合新的ES规范，axios的几条特征：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>从浏览器创建XHR</span><br><span class="line"><span class="bullet">2. </span>从nodejs创建http请求</span><br><span class="line"><span class="bullet">3. </span>支持Promise API</span><br><span class="line"><span class="bullet">4. </span>客户端支持防御CSRF</span><br><span class="line"><span class="bullet">5. </span>提供了一些并发请求的接口</span><br></pre></td></tr></table></figure></p><h4 id="使用npm安装："><a href="#使用npm安装：" class="headerlink" title="使用npm安装："></a>使用npm安装：</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> axios</span><br></pre></td></tr></table></figure><h4 id="示例–执行GET请求："><a href="#示例–执行GET请求：" class="headerlink" title="示例–执行GET请求："></a>示例–执行GET请求：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios</span></span><br><span class="line">axios.get(<span class="string">'/getData'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="axios的优点"><a href="#axios的优点" class="headerlink" title="axios的优点"></a>axios的优点</h4><p>体积较小、使用简单、还可以执行多个并发请求，并且可以直接得到返回结果，不会像fetch一样需要自己去转换。</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p><code>fetch API</code>脱离了XHR，是基于Promise设计。旧浏览器不支持Promise，需要使用<code>polyfill es6-promise</code>。  </p><h4 id="使用npm安装：-1"><a href="#使用npm安装：-1" class="headerlink" title="使用npm安装："></a>使用npm安装：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> whatwg-<span class="keyword">fetch</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="示例–执行GET请求：-1"><a href="#示例–执行GET请求：-1" class="headerlink" title="示例–执行GET请求："></a>示例–执行GET请求：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use 'whatwg-fetch'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'whatwg-fetch'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = fetch(url, &#123;</span><br><span class="line">    credentials: <span class="string">'include'</span>, <span class="comment">// 跨域请求带cookie</span></span><br><span class="line">    header: &#123; <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*'</span> &#125; <span class="comment">// 设置http请求头</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.text(); <span class="comment">// 返回数据转换为文本</span></span><br><span class="line">    <span class="comment">// return res.json(); // 返回数据转换为json </span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span>(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以在这个代码的基础上，继续添加一些操作，例如请求前数据检查等，非常的方便。  </p><h4 id="fetch的优点以及需要注意的地方"><a href="#fetch的优点以及需要注意的地方" class="headerlink" title="fetch的优点以及需要注意的地方"></a>fetch的优点以及需要注意的地方</h4><p>fetch优点有如下几条：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>脱离XHR，是ES规范里新的实现方式，支持async/await。</span><br><span class="line"><span class="bullet">2. </span>更加底层，提供了丰富的API（request， response）。</span><br><span class="line"><span class="bullet">3. </span>符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里。</span><br><span class="line"><span class="bullet">4. </span>更好更方便的写法。</span><br></pre></td></tr></table></figure></p><p>使用fetch需要注意的是：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>兼容性</span><br><span class="line"><span class="bullet">2. </span>当服务器返回400、500等错误时并不会reject，</span><br><span class="line">   只有网络错误等原因导致请求不能完成时，才会执行reject</span><br><span class="line"><span class="bullet">3. </span>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject实现的</span><br><span class="line">   超时控制，并不能阻止请求过程在后台进行，造成了流量的浪费。</span><br><span class="line"><span class="bullet">4. </span>fetch没有办法原生监测请求的进度，而XHR可以</span><br><span class="line"><span class="bullet">5. </span>fetch跨域请求时，默认不带cookie，需要自己指定credentials:’include’</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>详细资料请访问MDN和WHATWG。</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第3期-30分钟学会less</title>
      <link href="/2018/11/26/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC3%E6%9C%9F-30%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9Aless/"/>
      <url>/2018/11/26/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC3%E6%9C%9F-30%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9Aless/</url>
      <content type="html"><![CDATA[<h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><p>Less的出现是为了解决CSS中过于呆板的写法。<br>总结为：Less = 变量＋混合＋函数。<br><a id="more"></a></p><h3 id="Less初体验"><a href="#Less初体验" class="headerlink" title="Less初体验"></a>Less初体验</h3><h4 id="安装Less"><a href="#安装Less" class="headerlink" title="安装Less"></a>安装Less</h4><p>使用Npm全局安装Less<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">less</span> -g</span><br></pre></td></tr></table></figure></p><h4 id="一个小demo"><a href="#一个小demo" class="headerlink" title="一个小demo"></a>一个小demo</h4><p>创建一个空文件夹，命名为：learn-less  </p><p>在根目录下创建index.html文件，复制内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识 Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在根目录下创建main.less文件，复制内容如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.less</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">100%</span>;</span><br><span class="line"><span class="variable">@height:</span> <span class="number">100px</span>;</span><br><span class="line"><span class="variable">@color:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container2</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container3</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在打开浏览器看一下，会发现并没有加载样式。这是因为 index.html 中引入的样式文件是 main.css 而不是 main.less。<br>所以接下来，我们需要将 main.less 转换为 main.css，不用担心，这一步骤并不需要你手动操作，仅仅是运行一条命令就会自动完成转换。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">lessc</span> <span class="selector-tag">main</span><span class="selector-class">.less</span> &gt; <span class="selector-tag">main</span><span class="selector-class">.css</span></span><br></pre></td></tr></table></figure></p><p>操作完以上步骤就会发现在根目录下生成了一个 main.css 文件，此时再打开浏览器看看，样式已经出现了。  </p><p>main.css 转义内容为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="感受Less的便利"><a href="#感受Less的便利" class="headerlink" title="感受Less的便利"></a>感受Less的便利</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>前面的demo已经使用了”变量”的概念，是不是感觉和js很像，事实上less就是用js的语法来写css。</p><p>总结一下就是：使用@符号定义变量，使用@符号获取变量，仅仅将<code>@变量名</code>看成一个字符串。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@classname:</span> main;</span><br><span class="line"><span class="variable">@color:</span> red;</span><br><span class="line"></span><br><span class="line">.@<span class="selector-tag">classname</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面例子中可以看到,变量不仅仅可以作为样式属性值:background-color:@color;<br>还可以作为类名:.@classname表示的就是.main。这也就是为什么说仅仅将@变量名看成是一个字符串。</p><h4 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h4><p>mixin在js中是一种非常非常常见的用法。   </p><p>先看看一个example.css文件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到上面三个样式中都有border-top和border-bottom两个属性，并且内容完全相同；<br>在传统CSS写法中只能这样一遍有一遍的去书写重复的内容，<br>在Less中通过将公共属性抽取出来作为一个公共类的方式规避这一点。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example2.less</span></span><br><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="selector-class">.bordered</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="selector-class">.bordered</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将以上example2.less进行转译成example2.css文件为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到examle2.css与example.css很相似,只是多了一个.bordered样式。</p><p>修改example2.less,将.bordered写成.bordered(),此时在进行转译之后会看到example2.css和example.css文件就完全一样了,使用less书写更加简单。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example2.less</span></span><br><span class="line"><span class="selector-class">.bordered</span>() &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>总结：</p><p>混合也是减少代码书写量的一个方法；</p><p>混合的类名在定义的时候加上小括弧()，那么在转译成css文件时就不会出现；</p><p>混合的类名在被调用的时候加上小括弧()和不加上小括弧()是一样的效果,看个人习,如：第三行和第八行转译成css是一样的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    .bordered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    .bordered();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>曾几何时，在书写呆板的css时有没有想过让类名动态化，根据不同的参数生成不同的样式。看下面的示例：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func.less</span></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">     <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="selector-class">.border-radius</span>(<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="selector-class">.border-radius</span>(<span class="number">6px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>$ lessc func.less</code>进行转译func.css文件内容如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到,这里就用到了函数的概念，在#header和.button中分别传入不同的参数，结果也就生成不同的代码。</p><p>关于 less 中函数的写法还有以下几种：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数的参数设置默认值：*/</span></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数有多个参数时用分号隔开 */</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>:<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color-2</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">padding-2</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数如果没有参数，在转译成 css 时就不会被打印出来，详见上面混合中的示例 */</span></span><br><span class="line"><span class="selector-class">.wrap</span>() &#123;</span><br><span class="line">  <span class="attribute">text-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数参数如果有默认，调用时就是通过变量名称，而不是位置 */</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black; <span class="variable">@margin</span>: <span class="number">10px</span>; <span class="variable">@padding</span>: <span class="number">20px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@margin</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@margin</span>: <span class="number">20px</span>; <span class="variable">@color</span>: <span class="number">#33acfe</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数参数有个内置变量 @arguments，相当于 js 中的 arguments */</span></span><br><span class="line"><span class="selector-class">.box-shadow</span>(<span class="variable">@x</span>: <span class="number">0</span>; <span class="variable">@y</span>: <span class="number">0</span>; <span class="variable">@blur</span>: <span class="number">1px</span>; <span class="variable">@color</span>: <span class="number">#000</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">     <span class="attribute">-moz-box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数名允许相同，但参数不同，类似于 java 中多态的概念 */</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black) &#123;      </span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black; <span class="variable">@margin</span>: <span class="number">10px</span>) &#123;</span><br></pre></td></tr></table></figure></p><p>当然,上面是开发人员自定义的函数,Less也为我们定义了很多好用的内置函数。<br>关于内置函数,如果掌握,可以在开发过程中节约很多时间,由于内置函数数量很多，这里就不一一介绍。</p><h4 id="父子元素的写法"><a href="#父子元素的写法" class="headerlink" title="父子元素的写法"></a>父子元素的写法</h4><p>在css中父子元素的写法通常如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Less写法如下，父子嵌套关系一目了然。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-class">.article</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然,父子元素还要一种是伪类的写法,在css中写法如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在less中写法如下,可以看到引入了新的符号&amp;,以&amp;来代替主类#header。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="神奇-import"><a href="#神奇-import" class="headerlink" title="神奇@import"></a>神奇@import</h4><p>在传统css文件中,每个文件都是独立的。在less中可以像js的模块那样在一个less文件中引入另一个less文件。</p><p>创建 one.less 文件：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建two.less文件：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"one"</span>;</span><br></pre></td></tr></table></figure></p><p>使用<code>$ lessc two.less</code>转译成two.css文件,可以看到内容如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@import的作用可以看成是将one.less的内容复制一份到当前.less文件中。</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第2期-常被忽略的js隐式转换</title>
      <link href="/2018/11/17/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC2%E6%9C%9F-%E5%B8%B8%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/11/17/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC2%E6%9C%9F-%E5%B8%B8%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h3 id="搞不懂的js数据类型"><a href="#搞不懂的js数据类型" class="headerlink" title="搞不懂的js数据类型"></a>搞不懂的js数据类型</h3><p>在做面试题的时候，经常遇见非常奇葩的js隐式转换的面试题。<br>经常都搞不懂是什么原因，js是如何去计算得到结果的。<br>所以准备下定决心，好好了解一下js的计算原理。<br><a id="more"></a></p><h3 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在JavaScript中,<span class="comment">(a ==1 &amp;&amp; a== 2 &amp;&amp; a==3)</span>是否有可能为true？</span><br><span class="line"><span class="comment">(&#123;&#125; + &#123;&#125;)</span> = ?</span><br></pre></td></tr></table></figure><p>你能回答出来吗？</p><h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><p>js中有7种数据类型,可以分为两类：原始类型、对象类型。<br>基础类型：（原始值）<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Undefined</span>、 <span class="keyword">Null</span>、 <span class="keyword">String</span>、 <span class="keyword">Number</span>、 Boolean、 <span class="keyword">Symbol</span>(ES6新类型)</span><br></pre></td></tr></table></figure></p><p>复杂类型：（对象值）<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br></pre></td></tr></table></figure></p><h3 id="三种隐式转换类型"><a href="#三种隐式转换类型" class="headerlink" title="三种隐式转换类型"></a>三种隐式转换类型</h3><p>js的一个难点就是隐式转换，因为js在一些操作符下会做出一些变换，<br>所以js比较灵活，但也容易造成错误，而且难以理解。  </p><p>隐式转换主要涉及三种转换：<br>1、将值转为原始值，ToPrimitive()。<br>2、将值转为数字，ToNumber()。<br>3、将值转为字符串，ToString()。</p><h4 id="通过ToPrimitive将值转换为原始值"><a href="#通过ToPrimitive将值转换为原始值" class="headerlink" title="通过ToPrimitive将值转换为原始值"></a>通过ToPrimitive将值转换为原始值</h4><p>js引擎内部的抽象操作ToPrimitive有着这样的签名:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ToPrimitive(input, PreferredType?)</span><br></pre></td></tr></table></figure></p><p>input是要转换的值，PreferredType是可选参数，可以是Number或String类型。<br>他只是一个转换标志，转换后的结果并不一定是这个参数所值的类型，但是转换<br>结果一定是一个原始值（或者报错）。</p><h5 id="PreferredType标记为Number"><a href="#PreferredType标记为Number" class="headerlink" title="PreferredType标记为Number"></a>PreferredType标记为Number</h5><p>如果PreferredType被标记为Number，则会进行下面的操作流程来转换输入的值。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>如果输入的值已经是一个原始值，则直接返回它</span><br><span class="line"><span class="bullet">2. </span>否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，如果valueOf()方法的返回值是一个原始值，则返回这个原始值。</span><br><span class="line"><span class="bullet">3. </span>否则，调用这个对象的toString()方法，如果toString()方法返回的是原始值，则返回这个原始值。</span><br><span class="line"><span class="bullet">4. </span>否则，抛出TypeError异常。</span><br></pre></td></tr></table></figure></p><h5 id="PreferredType标记为String"><a href="#PreferredType标记为String" class="headerlink" title="PreferredType标记为String"></a>PreferredType标记为String</h5><p>如果PreferredType被标记为String，则会进行下面的操作流程来转换输入的值。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>如果输入的值已经是一个原始值，则直接返回它</span><br><span class="line"><span class="bullet">2. </span>否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。</span><br><span class="line"><span class="bullet">3. </span>否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，</span><br><span class="line">   如果valueOf()方法的返回值是一个原始值，则返回这个原始值。</span><br><span class="line"><span class="bullet">4. </span>否则，抛出TypeError异常。</span><br></pre></td></tr></table></figure></p><h5 id="PreferredType没有标记"><a href="#PreferredType没有标记" class="headerlink" title="PreferredType没有标记"></a>PreferredType没有标记</h5><p>既然PreferredType是可选参数，那么如果没有这个参数时，怎么转换呢？<br>PreferredType的值会按照这样的规则来自动设置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、该对象为<span class="keyword">Date</span>类型，则PreferredType被设置为<span class="keyword">String</span></span><br><span class="line"><span class="number">2</span>、否则，PreferredType被设置为<span class="keyword">Number</span></span><br></pre></td></tr></table></figure></p><h5 id="valueOf方法和toString方法解析"><a href="#valueOf方法和toString方法解析" class="headerlink" title="valueOf方法和toString方法解析"></a>valueOf方法和toString方法解析</h5><p>上面主要提及到了valueOf方法和toString方法，那这两个方法在对象里是否一定存在呢？<br>答案是肯定的。<br>在控制台输出Object.prototype，你会发现其中就有valueOf和toString方法，<br>而Object.prototype是所有对象原型链顶层原型，所有对象都会继承该原型的方法，故任何对象都会有valueOf和toString方法。<br>先看看对象的valueOf函数，其转换结果是什么？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于js的常见内置对象：<span class="built_in">Date</span>, <span class="built_in">Array</span>, <span class="built_in">Math</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>, <span class="built_in">String</span>, <span class="built_in">Array</span>, <span class="built_in">RegExp</span>, <span class="built_in">Function</span>。</span><br></pre></td></tr></table></figure></p><p>1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'123'</span>);</span><br><span class="line">num.valueOf(); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.valueOf(); <span class="comment">// '12df'</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'fd'</span>);</span><br><span class="line">bool.valueOf(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>2、Date这种特殊的对象，其原型Date.prototype上内置的valueOf函数将日期转换为日期的毫秒的形式的数值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">a.valueOf(); <span class="comment">// 1515143895500</span></span><br></pre></td></tr></table></figure></p><p>3、除此之外返回的都为this，即对象本身：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">a.valueOf() === a; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;);</span><br><span class="line">b.valueOf() === b; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>再来看看toString函数，其转换结果是什么？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于js的常见内置对象：<span class="built_in">Date</span>, <span class="built_in">Array</span>, <span class="built_in">Math</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>, <span class="built_in">String</span>, <span class="built_in">Array</span>, <span class="built_in">RegExp</span>, <span class="built_in">Function</span>。</span><br></pre></td></tr></table></figure></p><p>1、Number、Boolean、String、Array、Date、RegExp、Function这几种构造函数生成的对象，<br>通过toString转换后会变成相应的字符串的形式，因为这些构造函数上封装了自己的toString方法。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'123sd'</span>);</span><br><span class="line">num.toString(); <span class="comment">// 'NaN'</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.toString(); <span class="comment">// '12df'</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'fd'</span>);</span><br><span class="line">bool.toString(); <span class="comment">// 'true'</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">arr.toString(); <span class="comment">// '1,2'</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.toString(); <span class="comment">// "Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)"</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">func.toString(); <span class="comment">// "function () &#123;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型，都是继承的Object.prototype.toString方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;);</span><br><span class="line">obj.toString(); <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">Math</span>.toString(); <span class="comment">// "[object Math]"</span></span><br></pre></td></tr></table></figure></p><p>从上面valueOf和toString两个函数对对象的转换可以看出为什么对于ToPrimitive(input, PreferredType?)，PreferredType没有设定的时候，除了Date类型，PreferredType被设置为String，其它的会设置成Number。</p><p>因为valueOf函数会将Number、String、Boolean基础类型的对象类型值转换成 基础类型，Date类型转换为毫秒数，其它的返回对象本身，而toString方法会将所有对象转换为字符串。显然对于大部分对象转换，valueOf转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想toString方法一样，一股脑将其转换为字符串。 </p><p>所以对于没有指定PreferredType类型时，先进行valueOf方法转换更好，故将PreferredType设置为Number类型。  </p><p>而对于Date类型，其进行valueOf转换为毫秒数的number类型。在进行隐式转换时，没有指定将其转换为number类型时，将其转换为那么大的number类型的值显然没有多大意义。（不管是在+运算符还是==运算符）还不如转换为字符串格式的日期，所以默认Date类型会优先进行toString转换。故有以上的规则：  </p><p>PreferredType没有设置时，Date类型的对象，PreferredType默认设置为String，其他类型对象PreferredType默认设置为Number。</p><h4 id="通过ToNumber将值转换为数字"><a href="#通过ToNumber将值转换为数字" class="headerlink" title="通过ToNumber将值转换为数字"></a>通过ToNumber将值转换为数字</h4><p>根据参数类型进行下面转换：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span><span class="function"> -&gt;</span> NaN</span><br><span class="line"><span class="literal">null</span><span class="function"> -&gt;</span> +<span class="number">0</span> (js的<span class="number">0</span> 有+<span class="number">0</span> -<span class="number">0</span>的区别)</span><br><span class="line"><span class="literal">true</span>, <span class="literal">false</span><span class="function"> -&gt;</span> <span class="number">1</span>, +<span class="number">0</span></span><br><span class="line">字符数字<span class="function"> -&gt;</span> 数字 例如<span class="string">'123'</span><span class="function"> -&gt;</span> <span class="number">123</span></span><br></pre></td></tr></table></figure></p><p>数字无须转换字符串有字符串解析为数字。<br>例如：‘324’转换为324，‘qwer’转换为NaN对象(obj)先进行ToPrimitive(obj,Number)转换得到原始值，在进行ToNumber转换为数字</p><h4 id="通过ToString将值转换为字符串"><a href="#通过ToString将值转换为字符串" class="headerlink" title="通过ToString将值转换为字符串"></a>通过ToString将值转换为字符串</h4><p>根据参数类型进行下面转换：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span><span class="function"> -&gt;</span> <span class="string">'undefined'</span></span><br><span class="line"><span class="literal">null</span><span class="function"> -&gt;</span> <span class="string">'null'</span></span><br><span class="line">布尔值<span class="function"> -&gt;</span> <span class="string">'true'</span>或者<span class="string">'false'</span></span><br><span class="line">数字<span class="function"> -&gt;</span> <span class="string">'数字'</span> 例如 <span class="number">1.7</span><span class="function"> -&gt;</span> <span class="string">'1.7'</span></span><br></pre></td></tr></table></figure></p><p>字符串通过ToString函数时可以不用转换为obj来求原始值。<br>讲了这么多，是不是还不是很清晰，先来看看一个例子：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125; + &#123;&#125;) = ?</span><br><span class="line">两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。</span><br><span class="line"></span><br><span class="line">1、进行ToPrimitive转换，由于没有指定PreferredType类型，&#123;&#125;会使默认值为Number，进行ToPrimitive(input, Number)运算。</span><br><span class="line">2、所以会执行valueOf方法，(&#123;&#125;).valueOf(),返回的还是&#123;&#125;对象，不是原始值。</span><br><span class="line">3、继续执行toString方法，(&#123;&#125;).toString(),返回"[object Object]"，是原始值。</span><br><span class="line">故得到最终的结果，"[<span class="string">object Object</span>]" + "[<span class="string">object Object</span>]" = "[<span class="string">object Object</span>][<span class="symbol">object Object</span>]"</span><br></pre></td></tr></table></figure></p><p>再来一个指定类型的例子：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * &#123;&#125; = ?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、首先*运算符只能对number类型进行运算，故第一步就是对&#123;&#125;进行ToNumber类型转换。</span><br><span class="line"><span class="number">2</span>、由于&#123;&#125;是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。</span><br><span class="line"><span class="number">3</span>、所以会执行valueOf方法，(&#123;&#125;).valueOf(),返回的还是&#123;&#125;对象，不是原始值。</span><br><span class="line"><span class="number">4</span>、继续执行toString方法，(&#123;&#125;).toString(),返回<span class="string">"[object Object]"</span>，是原始值。</span><br><span class="line"><span class="number">5</span>、转换为原始值后再进行ToNumber运算，<span class="string">"[object Object]"</span>就转换为NaN。</span><br><span class="line">故最终的结果为 <span class="number">2</span> * NaN = NaN</span><br></pre></td></tr></table></figure></p><h3 id="运算符隐式转换"><a href="#运算符隐式转换" class="headerlink" title="==运算符隐式转换"></a>==运算符隐式转换</h3><p>== 运算符的规则规律性不是那么强，按照下面流程来执行,es5文档<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">比较运算<span class="keyword">x</span>==y, 其中<span class="keyword">x</span>和y是值，返回<span class="keyword">true</span>或者<span class="keyword">false</span>。这样的比较按如下方式进行：</span><br><span class="line"><span class="number">1</span>、若Type(<span class="keyword">x</span>)与Type(y)相同，则</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>* 若Type(<span class="keyword">x</span>)为Undefined，返回<span class="keyword">true</span>。</span><br><span class="line">    <span class="number">2</span>* 若Type(<span class="keyword">x</span>)为Null，返回<span class="keyword">true</span>。</span><br><span class="line">    <span class="number">3</span>* 若Type(<span class="keyword">x</span>)为Number， 则</span><br><span class="line"></span><br><span class="line">        (<span class="number">1</span>)、若<span class="keyword">x</span>为NaN，返回<span class="keyword">false</span>。</span><br><span class="line">        (<span class="number">2</span>)、若y为NaN，返回<span class="keyword">false</span>。</span><br><span class="line">        (<span class="number">3</span>)、若<span class="keyword">x</span>与y为相等数值，返回<span class="keyword">true</span>。</span><br><span class="line">        (<span class="number">4</span>)、若<span class="keyword">x</span>为+<span class="number">0</span>且y为−<span class="number">0</span>，返回<span class="keyword">true</span>。</span><br><span class="line">        (<span class="number">5</span>)、若<span class="keyword">x</span>为−<span class="number">0</span>且y为+<span class="number">0</span>，返回<span class="keyword">true</span>。</span><br><span class="line">        (<span class="number">6</span>)、返回<span class="keyword">false</span>。</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>* 若Type(<span class="keyword">x</span>)为String,则当<span class="keyword">x</span>和y为完全相同的字符序列（长度相等且相同字符在相同位置）时返回<span class="keyword">true</span>。否则，返回 <span class="keyword">false</span>。</span><br><span class="line">    <span class="number">5</span>* 若Type(<span class="keyword">x</span>) 为 Boolean, 当<span class="keyword">x</span>和y为同为<span class="keyword">true</span>或者同为<span class="keyword">false</span>时返回<span class="keyword">true</span>。否则，返回<span class="keyword">false</span>。</span><br><span class="line">    <span class="number">6</span>* 当<span class="keyword">x</span>和y为引用同一对象时返回<span class="keyword">true</span>。否则，返回<span class="keyword">false</span>。</span><br><span class="line"><span class="number">2</span>、若<span class="keyword">x</span>为<span class="keyword">null</span>且y为undefined,返回<span class="keyword">true</span>。</span><br><span class="line"><span class="number">3</span>、若<span class="keyword">x</span>为undefined且y为<span class="keyword">null</span>，返回<span class="keyword">true</span>。</span><br><span class="line"><span class="number">4</span>、若Type(<span class="keyword">x</span>)为Number且Type(y)为String，返回比较<span class="keyword">x</span>==ToNumber(y)的结果。</span><br><span class="line"><span class="number">5</span>、若Type(<span class="keyword">x</span>)为String且Type(y)为Number，返回比较ToNumber(<span class="keyword">x</span>)==y的结果。</span><br><span class="line"><span class="number">6</span>、若Type(<span class="keyword">x</span>)为Boolean，返回比较ToNumber(<span class="keyword">x</span>)==y的结果。</span><br><span class="line"><span class="number">7</span>、若Type(y)为Boolean，返回比较<span class="keyword">x</span>==ToNumber(y)的结果。</span><br><span class="line"><span class="number">8</span>、若Type(<span class="keyword">x</span>)为String或Number，且Type(y)为Object，返回比较<span class="keyword">x</span>==ToPrimitive(y)的结果。</span><br><span class="line"><span class="number">9</span>、若Type(<span class="keyword">x</span>)为Object且Type(y)为String或Number，返回比较ToPrimitive(<span class="keyword">x</span>)==y的结果。</span><br><span class="line"><span class="number">10</span>、返回<span class="keyword">false</span>。</span><br></pre></td></tr></table></figure></p><p>上面主要分为两类，x、y类型相同时，和类型不相同时。<br>类型相同时，没有类型转换，主要注意NaN不与任何值相等，包括它自己，即NaN !== NaN。<br>类型不相同时，<br>1、x,y 为null、undefined两者中一个 // 返回true<br>2、x、y为Number和String类型时，则转换为Number类型比较。<br>3、有Boolean类型时，Boolean转化为Number类型比较。<br>4、一个Object类型，一个String或Number类型，将Object类型进行原始转换后，按上面流程进行原始值比较。</p><h4 id="例子解析"><a href="#例子解析" class="headerlink" title="==例子解析"></a>==例子解析</h4><p>所以类型不相同时，可以会进行上面几条的比较，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        return1;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">true</span> == a <span class="comment">// true;</span></span><br><span class="line"><span class="comment">// 首先，x与y类型不同，x为boolean类型，则进行ToNumber转换为1,为number类型。</span></span><br><span class="line"><span class="comment">// 接着，x为number，y为object类型，对y进行原始转换，ToPrimitive(a, ?),没有指定转换类型，默认number类型。</span></span><br><span class="line"><span class="comment">// 而后，ToPrimitive(a, Number)首先调用valueOf方法，返回1，得到原始类型1。</span></span><br><span class="line"><span class="comment">// 最后 1 == 1， 返回true。</span></span><br></pre></td></tr></table></figure></p><p>我们再看一段很复杂的比较，如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[] == !&#123;&#125;</span><br><span class="line"><span class="number">1</span>、! 运算符优先级高于==，故先进行！运算。</span><br><span class="line"><span class="number">2</span>、!&#123;&#125;运算结果为false，结果变成 [] == false比较。</span><br><span class="line"><span class="number">3</span>、根据上面第<span class="number">7</span>条，等式右边y = ToNumber(false) = <span class="number">0</span>。结果变成 [] == <span class="number">0</span>。</span><br><span class="line"><span class="number">4</span>、按照上面第<span class="number">9</span>条，比较变成ToPrimitive([]) == <span class="number">0</span>。</span><br><span class="line">    按照上面规则进行原始值转换，[]会先调用valueOf函数，返回this。</span><br><span class="line">    不是原始值，继续调用toString方法，x = [].toString() = ''。</span><br><span class="line">    故结果为 '' == <span class="number">0</span>比较。</span><br><span class="line"><span class="number">5</span>、根据上面第<span class="number">5</span>条，等式左边x = ToNumber('') = <span class="number">0</span>。</span><br><span class="line">    所以结果变为： <span class="number">0</span> == <span class="number">0</span>，返回true，比较结束。</span><br></pre></td></tr></table></figure></p><p>最后我们看看文章开头说的那道题目：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    i: <span class="number">1</span>,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、当执行a==1&amp;&amp;a==2&amp;&amp;a==3时，会从左到右一步一步解析，首先a==1，会进行上面第9步转换。ToPrimitive(a，Number)==1。     </p><p>2、ToPrimitive(a, Number)，按照上面原始类型转换规则，会先调用valueOf方法，a的valueOf方法继承自Object.prototype。返回a本身，而非原始类型，故会调用toString方法。  </p><p>3、因为toString被重写，所以会调用重写的toString方法，故返回1，注意这里是i++，而不是++i，它会先返回i，在将i+1。故ToPrimitive(a, Number)=1。也就是1==1，此时i=1+1=2。</p><p>4、执行完a==1返回true，会执行a==2，同理，会调用ToPrimitive(a, Number)，同上先调用valueOf方法，在调用toString方法，由于第一步，i=2此时，ToPrimitive(a, Number)=2， 也就是2==2, 此时i=2+1。</p><p>5、同上可以推导a==3也返回true。故最终结果a==1&amp;&amp;a==2&amp;&amp;a==3返回true   </p><p><span style="color: red;">当然除了这种方式，还有其他解法，例如注意a的空格。</span>  </p><p>其实了解了以上隐形转换的原理，你有没有发现这些隐式转换并没有想象中那么难。</p>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端系列第1期-flex常见布局</title>
      <link href="/2018/11/14/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC1%E6%9C%9F-flex%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80/"/>
      <url>/2018/11/14/%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E7%AC%AC1%E6%9C%9F-flex%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h3 id="Sticky-Footer"><a href="#Sticky-Footer" class="headerlink" title="Sticky Footer"></a>Sticky Footer</h3><p>经典的上-中-下布局。<br><a id="more"></a>  </p><p>当页面内容高度小于可视区域高度时,footer吸附在底部;当页面内容高度大于可视区域高度时footer被撑开排在content下方。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/flex/StickyFooter.png" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fixed-Width-Sidebar"><a href="#Fixed-Width-Sidebar" class="headerlink" title="Fixed-Width Sidebar"></a>Fixed-Width Sidebar</h3><p>在上-中-下布局的基础上,加了左侧定宽sidebar。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/flex/FixedWidthSidebar.png" alt="image">  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span>ASIDE<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h3><p>左边的定宽sidebar, 右边是上-中-下布局。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/flex/Sidebar.png" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span>ASIDE<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sticky-Header"><a href="#Sticky-Header" class="headerlink" title="Sticky Header"></a>Sticky Header</h3><p>上-中-下布局，区别是header固定在顶部，不会随页面滚动。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/flex/StickyHeader.png" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sticky-Sidebar"><a href="#Sticky-Sidebar" class="headerlink" title="Sticky Sidebar"></a>Sticky Sidebar</h3><p>左侧sidebar固定在左侧与视窗同高,当内容超出视窗高度时,在sidebar内部出现滚动条。左右两侧滚动条互相独立。</p><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/flex/StickySidebar.png" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        ASIDE</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- many items --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秋招总结</title>
      <link href="/2018/09/17/%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2018/09/17/%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="明志"><a href="#明志" class="headerlink" title="明志"></a>明志</h3><p>辞掉转正的工作，一颗追梦赤子心。<br>破釜沉舟，背水一战!<br><a id="more"></a></p><h3 id="秋招情况综合"><a href="#秋招情况综合" class="headerlink" title="秋招情况综合"></a>秋招情况综合</h3><p>以下顺序就是我面试公司的顺序。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">阿里巴巴     一面挂  </span><br><span class="line">美团        一面挂</span><br><span class="line">蘑菇街      四面 (得到offer，sp 薪资<span class="number">19</span>*<span class="number">16</span>)</span><br><span class="line">百度        三面 (得到offer，白菜 薪资<span class="number">15</span>*<span class="number">14.6</span>)</span><br><span class="line">小米        二面  (已经拿到offer，拒绝了)</span><br><span class="line">腾讯        四面 (得到offer, sp 薪资 <span class="number">17</span>*<span class="number">16</span>)</span><br><span class="line"><span class="number">360</span>企业安全  (已经拿到offer，拒绝了)</span><br><span class="line"><span class="number">58</span>同城       (已经拿到offer，拒绝了)</span><br><span class="line">滴滴打车     (已经拿到offer，拒绝了)</span><br></pre></td></tr></table></figure></p><h3 id="面筋"><a href="#面筋" class="headerlink" title="面筋"></a>面筋</h3><h4 id="阿里巴巴-挂"><a href="#阿里巴巴-挂" class="headerlink" title="阿里巴巴(挂)"></a>阿里巴巴(挂)</h4><h5 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h5><p>电话面，一个高冷的小哥  </p><ol><li>简单说一下你目前做的项目。</li><li>Vue的生命钩子函数。</li><li>Vue的公共模块。</li><li>Vue是如何获取路由的hash值。</li><li>Vue为什么能全局获取Vuex的值的。</li><li>如何计算一个组件的渲染时间。</li><li>对象{a: {b: {c: “5”}, d: “3”}},即使没有属性也不报错的安全访问。</li><li>callback,Promise,async的使用方法。</li><li>Generators和async的区别</li><li>开发一个测试工具 ,检测网页的所有红色文字。</li></ol><h4 id="美团-挂"><a href="#美团-挂" class="headerlink" title="美团(挂)"></a>美团(挂)</h4><h5 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h5><p>电话面， 声音很好听的小姐姐  </p><ol><li>说一下项目经历</li><li>Vue的数据绑定原理</li><li>给数组添加一个拷贝数组的方法，例如<code>a=[1,2,3]</code>变为<code>a=[1,2,3,1,2,3]</code></li><li>http请求头</li><li>viewport的作用</li><li>移动端适应  </li><li>前缀表达式</li><li>深拷贝和浅拷贝</li><li>rem是如何计算px的</li><li>scroll滚动页面卡顿解决</li><li>vue的hash路由</li><li>青蛙跳台阶一次只能跳一步或两步，问有多少种方式 </li><li><code>loop event</code></li><li>箭头操作符</li><li>类的继承方式</li><li>keep-alive </li><li><code>cookie session localStrong sessionStrong</code> </li><li><code>call apply bind</code> </li><li>ul下的li,第一个和最后一个节点交换 </li><li>http状态码 </li><li>跨域 </li><li>http是如何连接的 </li><li>网页上输入一个url,是如何执行的。 </li><li>git的相关命令</li><li>重绘与重排</li><li>防抖与节流</li><li>如何判断数据的类型 </li><li>meta标签内的width设置为多少</li></ol><h4 id="蘑菇街-得到offer"><a href="#蘑菇街-得到offer" class="headerlink" title="蘑菇街(得到offer)"></a>蘑菇街(得到offer)</h4><h5 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h5><p>电话面， 一个很忙的小哥  </p><ol><li>自我介绍+项目</li><li>前端存储方式</li><li>vue的hash路由实现</li><li>json对象删除一个键对</li><li>vue的生命周期</li><li>vue的实现原理</li><li>HTML5的模板</li><li>各种终端的适配</li><li>垂直居中</li><li>restful的风格</li><li>如何学习前端的</li><li>删除页面的某一类节点</li><li>sessionStrong和localStrong的区别</li><li>闭包的原理  </li></ol><h5 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h5><p>视频面， 感觉30岁左右的大叔。  </p><ol><li>自我介绍+项目介绍</li><li>手写质因数</li><li>学习的过程</li><li>看的书</li><li>聊人生</li></ol><h5 id="hr面"><a href="#hr面" class="headerlink" title="hr面"></a>hr面</h5><p>电话面， 小姐姐<br>单纯的聊人生，聊未来。  </p><h5 id="总监面"><a href="#总监面" class="headerlink" title="总监面"></a>总监面</h5><p>视频面，蘑菇街的总监挺年轻的。  </p><ol><li>自我介绍</li><li>项目介绍</li><li>询问项目的各方各面</li></ol><h4 id="百度-得到offer"><a href="#百度-得到offer" class="headerlink" title="百度(得到offer)"></a>百度(得到offer)</h4><h5 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h5><p>现场面，一个小姐姐。<br>最后告诉我，提高一下语言技巧，说话要有条理性，结构性，逻辑性。  </p><ol><li>项目技术点</li><li>图片懒加载</li><li>缓存页面</li><li><code>visibility:hidden</code>和<code>display:none</code>的区别</li><li>input中readonly和enabled的区别</li><li>如何判断img的图片加载是否成功</li><li>设计模式</li><li>单例模式的实现</li><li>观察者模式的实现</li><li>数据双向绑定的原理</li><li><code>event loop</code>是如何将事件推送到异步队列中的</li><li>js为什么不是多线程的，如果是多线程的会产生怎样的后果</li><li>手写类的继承</li><li>prototype和<strong>proto</strong>和constructor</li><li>css选择器，优先级，哪些方式可以写css</li><li>手写promise的finally</li><li>let，var，const的区别</li><li>输入url的渲染过程</li><li>es6的新特征</li><li>箭头函数bind后，this会改变吗</li><li>正则表达式的新特征</li><li>正则表达式中的<code>[]</code>内部的特殊字符需要转义吗</li><li>HTTP状态码，出现304如何解决</li><li>引入CSS的方式</li><li>js导致渲染阻塞的解决方法</li><li>网页渲染的过程</li><li>重绘重排</li></ol><h5 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h5><p>现场面，一个有点高冷的大哥。<br>也是我第一次手写编程写了一个小时，唉，心累。<br>不过还是学到了很多东西。</p><ol><li>自我介绍</li><li>Https</li><li>keep-alive</li><li>写一个通用的tool-tip插件，需要封装完整。</li><li>script文件的请求优化</li><li>xss和csrf</li></ol><h5 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h5><p>一个大叔叔，风趣幽默好像是技术部门老大。<br>喜欢诱导我去思考。  </p><ol><li>项目亮点，难点。</li><li>给了一个他们部门写的宝马页面，分析前端监控，流量控制等。  </li><li>人生  </li></ol><h4 id="小米-等待三面"><a href="#小米-等待三面" class="headerlink" title="小米(等待三面)"></a>小米(等待三面)</h4><h5 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h5><p>电话面，我遇到的面试官都很赞，但这是目前我遇到的最好的一个小哥。<br>告诉我，沟通能力第一，学习能力第二。的确面试很愉快。  </p><ol><li>自我介绍</li><li>HTML5的新特征</li><li>CSS3用到了哪些</li><li>伪类，伪元素</li><li>实现动画的方式</li><li>三列布局</li><li>es6箭头函数</li><li>es6数组新方法</li><li>promise相关，现场面就是手写源码实现了。。</li><li>js原型链，es6继承的实现</li><li>es6的构造函数继承，super()，绑定指针</li><li>闭包</li><li>vue的插件</li><li>vue的axios封装</li><li>form的相关属性</li></ol><h5 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h5><p>电话面，讲道理如果我去了小米，完全是因为面试官小哥加分。<br>小米的面试官都风趣幽默，平易近人。完全能够感受到小米工作的氛围是有多赞！<br>遭了，是心动的感觉！额，好多题都不记得了。面试太愉快了。。。。</p><ol><li>xss和csrf</li><li>跨域</li><li>position及一个布局</li><li>水平垂直居中</li><li>移动端适配</li><li>loader和plugin</li><li>html语义化</li><li>Doctype</li><li>autocomplete表单自动完成</li><li>js继承</li><li>css预处理</li><li>vue数据双向绑定</li><li>box-sizing</li><li>二叉树遍历</li></ol><h4 id="腾讯-得到offer"><a href="#腾讯-得到offer" class="headerlink" title="腾讯(得到offer)"></a>腾讯(得到offer)</h4><h5 id="一面-5"><a href="#一面-5" class="headerlink" title="一面"></a>一面</h5><p>现场面，ivweb河伯大神，感谢帮助我提前二面。非常感谢！  </p><ol><li>微信小程序运行机制</li><li>csrf</li><li>css动画</li><li>ajax状态</li><li>手写cookie，并设置一天过期</li><li>301,302</li><li>盒子模型及相关css属性</li><li>网页兼容模式和正常模式</li><li>移动端优化</li><li>dns解析过程</li><li>手写算法寻找文本出现最多的字符串</li><li>怎么学习新技术</li><li>逻辑题，60%喜欢篮球，70%喜欢足球，80%喜欢排球，同时喜欢篮球足球的人有多少。</li></ol><h5 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h5><p>现场面，一个小哥哥。聊天比较愉快！  </p><ol><li>mysql引擎及区别</li><li>304</li><li>缓存etag</li><li>红黑树，B树</li><li>快排，原理效率</li><li>nodejs</li><li>跨域</li><li>http长连接</li><li>hybird app</li></ol><h5 id="hr面-1"><a href="#hr面-1" class="headerlink" title="hr面"></a>hr面</h5><p>现场面，一个小姐姐。  </p><ol><li>主要就是询问各种性格相关，经历相关的问题。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从博客的第一篇文章开始，我算是完成了我当初的目标！不容易，真的不容易！<br>秋招是真的漫长且难受，焦虑让我失眠，失落。<br>不过，这是一段我一辈子都忘不掉的时光！因为我真的一点点的看见自己的成长。<br>笔试算法，从一道都做不了，变成全AC。面试时从紧张变成了自然交谈。都告诉我，努力是不会辜负我的！<br>以下是我的秋招的几个过程吧。<br>实习期： 每天早上7点起床上班到晚上6点下班，回家后复习到晚上11点。<br>辞职期； 每天只睡5个小时左右，早上8点到晚上1点左右。持续两个月。 </p><h3 id="纪念"><a href="#纪念" class="headerlink" title="纪念"></a>纪念</h3><h4 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h4><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/xz/baidu.png" alt="image"></p><h4 id="蘑菇街"><a href="#蘑菇街" class="headerlink" title="蘑菇街"></a>蘑菇街</h4><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/xz/mogujie.png" alt="image"></p><h4 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h4><p><img src="https://github.com/yuhongjing/img-folder/raw/master/img/xz/tengxun.png" alt="image"></p>]]></content>
      
      <categories>
          
          <category> 校招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秋招 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TP5源码分析之Db类实现</title>
      <link href="/2018/08/10/TP5%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BDb%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/10/TP5%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BDb%E7%B1%BB%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从TP3.2到TP5，已经使用了TP框架快两年了。自认为使用TP处理一般的业务不成问题了。<br>可是，却从来没有深究过TP是如何实现这些功能的，仅仅只是会调用API而已，也不敢动框架的代码。<br>所以现在就整理一系列的文章来研究一下TP5的底层源码，设计模式，思想等。<br>额！算是开始一个坑吧。从最经典的Db类开始吧！ gogogo！<br><a id="more"></a></p><h3 id="对Db类的初识"><a href="#对Db类的初识" class="headerlink" title="对Db类的初识"></a>对Db类的初识</h3><p>一直觉得TP5的Db类是很方便的，只需要更改一下database配置文件即可连接各种数据库。<br>个人觉得还是挺强大的，他是如何通过配置文件更改一个值就能调用不同的数据库，这让我很是疑惑。<br>所以来研究一下吧，不过我刚看了一本书《PHP的核心技术与最佳实践》，了解了通过工厂模式是可以完成这个要求的。<br>不过还是看一下TP5是怎么实现的吧。</p><h3 id="Db类的相关文件分析"><a href="#Db类的相关文件分析" class="headerlink" title="Db类的相关文件分析"></a>Db类的相关文件分析</h3><p>本系列的部分细节参考了此文档<a href="https://www.kancloud.cn/zmwtp/tp5/155311" target="_blank" rel="noopener">戳我可见</a><br><strong>文件thinkphp是TP5的核心库</strong><br>而<code>thinkphp\think</code>目录下是我们各个类的入口<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此目录下有一个<span class="keyword">Db</span>.php是<span class="keyword">Db</span>类的入口。</span><br></pre></td></tr></table></figure></p><p>TP5的Db类文件夹目录为:thinkphp\think\db<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">此文件夹为Db类的具体实现</span><br><span class="line">有如下文件</span><br><span class="line">db</span><br><span class="line">    builder Db驱动类</span><br><span class="line">        Mysql<span class="selector-class">.php</span>   Mysql数据库驱动</span><br><span class="line">        Pgsql<span class="selector-class">.php</span>   Pgsql数据库驱动</span><br><span class="line">        Sqlite<span class="selector-class">.php</span>  Sqlite数据库驱动</span><br><span class="line">        Sqlsrv<span class="selector-class">.php</span>  Sqlsrv数据库驱动</span><br><span class="line">    connector   Db连接器类</span><br><span class="line">        Mysql<span class="selector-class">.php</span>   Mysql数据库连接</span><br><span class="line">        Pgsql<span class="selector-class">.php</span>   Pgsql数据库连接</span><br><span class="line">        pgsql<span class="selector-class">.sql</span>   Pgsql类型转换</span><br><span class="line">        Sqlite<span class="selector-class">.php</span>  Sqlite数据库连接</span><br><span class="line">        Sqlsrv<span class="selector-class">.php</span>  Sqlsrv数据库连接</span><br><span class="line">    exception   Db错误类</span><br><span class="line">        BindParamException<span class="selector-class">.php</span>  Pdo参数绑定异常</span><br><span class="line">        DataNotFoundException<span class="selector-class">.php</span>   字段没有找到</span><br><span class="line">        ModelNotFoundException<span class="selector-class">.php</span>  模型不存在</span><br><span class="line">    Builder<span class="selector-class">.php</span> Db的抽象驱动类，通过此类构建对应的Db驱动类</span><br><span class="line">    Connection<span class="selector-class">.php</span> Db的抽象连接器类，通过此类连接对应Db连接器类</span><br><span class="line">    Query<span class="selector-class">.php</span> 将所有的Sql方法封装成一个类。</span><br></pre></td></tr></table></figure></p><h3 id="Db入口类分析"><a href="#Db入口类分析" class="headerlink" title="Db入口类分析"></a>Db入口类分析</h3><p>一般我们调用Db类是需要<code>use thinkphp\Db</code>,这文件就是我们的入口文件，所以我们看看他的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">db</span>\<span class="title">Connection</span>; </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">db</span>\<span class="title">Query</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据库连接实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance = [];</span><br><span class="line">    <span class="comment">// 查询次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $queryTimes = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $executeTimes = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//   数据库初始化,并取得数据库类实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config = [], $name = false)</span></span>&#123;</span><br><span class="line">         .....先省略</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除所有的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">self</span>::$instance = <span class="keyword">null</span>; <span class="comment">// 很粗暴嘛</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数据库连接参数解析</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseConfig</span><span class="params">($config)</span></span>&#123;</span><br><span class="line">         ....先省略</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// DSN解析 把返回的参数解析一下 提取需要连接的关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseDsn</span><span class="params">($dsnStr)</span></span>&#123;</span><br><span class="line">         ...先省略</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用驱动类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $params)</span></span>&#123;</span><br><span class="line">          ...先省略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是Db入口类的基本目录结构。<br>首先分析头部,命名空间为think,class为Db说明我们的入口没错。然后use两个类，一个连接器类，一个Query类。<br>看一看此类的各个方法，发现主要是初始化+解析config的配置。  </p><h4 id="首先看看Db入口类是如何获取到database里面的参数的"><a href="#首先看看Db入口类是如何获取到database里面的参数的" class="headerlink" title="首先看看Db入口类是如何获取到database里面的参数的"></a>首先看看Db入口类是如何获取到database里面的参数的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database的配置是通过parseConfig方法获取到的，代码如下</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseConfig</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($config)) &#123;</span><br><span class="line">            <span class="comment">// 这里引入的database文件哟!!!</span></span><br><span class="line">            $config = Config::get(<span class="string">'database'</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_string($config) &amp;&amp; <span class="keyword">false</span> === strpos($config, <span class="string">'/'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 支持读取配置参数</span></span><br><span class="line">            $config = Config::get($config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_string($config)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>::parseDsn($config);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> $config;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里是通过了一个助手函数config把database里面的参数返回了，这样我们就得到了database的参数。  </p><h4 id="那我们看看database里面是什么样的呢"><a href="#那我们看看database里面是什么样的呢" class="headerlink" title="那我们看看database里面是什么样的呢?"></a>那我们看看database里面是什么样的呢?</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">database在application目录下有，当然每一个模块下面也可以新建。</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">    <span class="string">'type'</span>           =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="string">'hostname'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="string">'database'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="string">'username'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">'password'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="string">'hostport'</span>       =&gt; <span class="string">'3306'</span>,</span><br><span class="line">    <span class="comment">// 连接dsn</span></span><br><span class="line">    <span class="string">'dsn'</span>            =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 数据库连接参数</span></span><br><span class="line">    <span class="string">'params'</span>         =&gt; [],</span><br><span class="line">    <span class="comment">// 数据库编码默认采用utf8</span></span><br><span class="line">    <span class="string">'charset'</span>        =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">    <span class="comment">// 数据库表前缀</span></span><br><span class="line">    <span class="string">'prefix'</span>         =&gt; <span class="string">'qy_'</span>,</span><br><span class="line">    <span class="comment">// 数据库调试模式</span></span><br><span class="line">    <span class="string">'debug'</span>          =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="comment">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class="line">    <span class="string">'deploy'</span>         =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 数据库读写是否分离 主从式有效</span></span><br><span class="line">    <span class="string">'rw_separate'</span>    =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="comment">// 读写分离后 主服务器数量</span></span><br><span class="line">    <span class="string">'master_num'</span>     =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 指定从服务器序号</span></span><br><span class="line">    <span class="string">'slave_no'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 是否严格检查字段是否存在</span></span><br><span class="line">    <span class="string">'fields_strict'</span>  =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="comment">// 数据集返回类型 array 数组 collection Collection对象</span></span><br><span class="line">    <span class="string">'resultset_type'</span> =&gt; <span class="string">'\think\Collection'</span>,</span><br><span class="line">    <span class="comment">// 是否自动写入时间戳字段</span></span><br><span class="line">    <span class="string">'auto_timestamp'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="comment">// 是否需要进行SQL性能分析</span></span><br><span class="line">    <span class="string">'sql_explain'</span>    =&gt; <span class="keyword">false</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>可以看见database文件把数据return了回来，所以可以获取到里面配置的所有内容，这样的解耦使我们的配置更加简便，不错！  </p><h4 id="然后看看最核心的连接类是如何执行的呢？"><a href="#然后看看最核心的连接类是如何执行的呢？" class="headerlink" title="然后看看最核心的连接类是如何执行的呢？"></a>然后看看最核心的连接类是如何执行的呢？</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何通过配置文件即可连接相对于的数据库类呢？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config = [], $name = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $name) &#123;</span><br><span class="line">            $name = md5(serialize($config));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span> === $name || !<span class="keyword">isset</span>(<span class="keyword">self</span>::$instance[$name])) &#123;</span><br><span class="line">            <span class="comment">// 解析连接参数 支持数组和字符串</span></span><br><span class="line">            $options = <span class="keyword">self</span>::parseConfig($config);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($options[<span class="string">'type'</span>])) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(<span class="string">'Undefined db type'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 就是这句代码哦，实现的加载不同的连接器哟！！！</span></span><br><span class="line">            $class = <span class="keyword">false</span> !== strpos($options[<span class="string">'type'</span>], <span class="string">'\\'</span>) ? $options[<span class="string">'type'</span>] : <span class="string">'\\think\\db\\connector\\'</span> . ucwords($options[<span class="string">'type'</span>]);</span><br><span class="line">            <span class="comment">// 记录初始化信息</span></span><br><span class="line">            <span class="keyword">if</span> (App::$debug) &#123;</span><br><span class="line">                Log::record(<span class="string">'[ DB ] INIT '</span> . $options[<span class="string">'type'</span>], <span class="string">'info'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">                $name = md5(serialize($config));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">self</span>::$instance[$name] = <span class="keyword">new</span> $class($options);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance[$name];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好吧，还是很经典的工厂模式。通过传入的配置参数，引入对应的文件。学习了，的确很方便！<br>到目前为止已经能够获取database的参数了，也能初始化不同的连接器了，还差一个查询方法了。<br>是的，还有一个<code>use think\db\Query</code>还没使用呢！对吧。</p><h4 id="驱动类的实现"><a href="#驱动类的实现" class="headerlink" title="驱动类的实现"></a>驱动类的实现</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TP5把所有的SQL都通过PDO封装了，意思是无论你是什么数据库，查询的关键字都是这些！方便吧。</span></span><br><span class="line"> <span class="comment">// 调用驱动类的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $params)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="comment">// 自动初始化数据库</span></span><br><span class="line">     <span class="keyword">return</span> call_user_func_array([<span class="keyword">self</span>::connect(), $method], $params);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>魔术方法，调用静态方法，每次调用前都会初始化数据库,并传入方法和参数。<br>然后因为引入的连接器不同，所以会调用相对于的构建类他们都继承builder，而builder封装了所有的查询方法。<br>这样就可以实现封装所有数据库的查询方法了！<br><strong><em>接下来看看那两个use分别是什么吧</em></strong></p><h3 id="Connection连接类"><a href="#Connection连接类" class="headerlink" title="Connection连接类"></a>Connection连接类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db文件下有connector文件夹，封装了每一种数据库的连接方式，他们都继承于connection</span></span><br><span class="line"><span class="comment">// 他们绑定了相对于的构建器。例如： </span></span><br><span class="line"><span class="comment">// connector下的Mysql.php</span></span><br><span class="line"><span class="keyword">protected</span> $builder = <span class="string">'\\think\\db\\builder\\Mysql'</span>;</span><br><span class="line"><span class="comment">// 所以只需要连接的时候判断类型，就会获得相对于的builder构建器</span></span><br><span class="line"><span class="comment">// 然后主要看它们的父类Connection连接器</span></span><br><span class="line"><span class="comment">// 代码很多，截取最主要的吧</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $config = [</span><br><span class="line">         <span class="comment">// 数据库类型</span></span><br><span class="line">         <span class="string">'type'</span>            =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 服务器地址</span></span><br><span class="line">         <span class="string">'hostname'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 数据库名</span></span><br><span class="line">         <span class="string">'database'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 用户名</span></span><br><span class="line">         <span class="string">'username'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 密码</span></span><br><span class="line">         <span class="string">'password'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 端口</span></span><br><span class="line">         <span class="string">'hostport'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 连接dsn</span></span><br><span class="line">         <span class="string">'dsn'</span>             =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 数据库连接参数</span></span><br><span class="line">         <span class="string">'params'</span>          =&gt; [],</span><br><span class="line">         <span class="comment">// 数据库编码默认采用utf8</span></span><br><span class="line">         <span class="string">'charset'</span>         =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">         <span class="comment">// 数据库表前缀</span></span><br><span class="line">         <span class="string">'prefix'</span>          =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 数据库调试模式</span></span><br><span class="line">         <span class="string">'debug'</span>           =&gt; <span class="keyword">false</span>,</span><br><span class="line">         <span class="comment">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class="line">         <span class="string">'deploy'</span>          =&gt; <span class="number">0</span>,</span><br><span class="line">         <span class="comment">// 数据库读写是否分离 主从式有效</span></span><br><span class="line">         <span class="string">'rw_separate'</span>     =&gt; <span class="keyword">false</span>,</span><br><span class="line">         <span class="comment">// 读写分离后 主服务器数量</span></span><br><span class="line">         <span class="string">'master_num'</span>      =&gt; <span class="number">1</span>,</span><br><span class="line">         <span class="comment">// 指定从服务器序号</span></span><br><span class="line">         <span class="string">'slave_no'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// 是否严格检查字段是否存在</span></span><br><span class="line">         <span class="string">'fields_strict'</span>   =&gt; <span class="keyword">true</span>,</span><br><span class="line">         <span class="comment">// 数据返回类型</span></span><br><span class="line">         <span class="string">'result_type'</span>     =&gt; PDO::FETCH_ASSOC,</span><br><span class="line">         <span class="comment">// 数据集返回类型</span></span><br><span class="line">         <span class="string">'resultset_type'</span>  =&gt; <span class="string">'array'</span>,</span><br><span class="line">         <span class="comment">// 自动写入时间戳字段</span></span><br><span class="line">         <span class="string">'auto_timestamp'</span>  =&gt; <span class="keyword">false</span>,</span><br><span class="line">         <span class="comment">// 时间字段取出后的默认时间格式</span></span><br><span class="line">         <span class="string">'datetime_format'</span> =&gt; <span class="string">'Y-m-d H:i:s'</span>,</span><br><span class="line">         <span class="comment">// 是否需要进行SQL性能分析</span></span><br><span class="line">         <span class="string">'sql_explain'</span>     =&gt; <span class="keyword">false</span>,</span><br><span class="line">         <span class="comment">// Builder类</span></span><br><span class="line">         <span class="string">'builder'</span>         =&gt; <span class="string">''</span>,</span><br><span class="line">         <span class="comment">// Query类</span></span><br><span class="line">         <span class="string">'query'</span>           =&gt; <span class="string">'\\think\\db\\Query'</span>,</span><br><span class="line">         <span class="comment">// 是否需要断线重连</span></span><br><span class="line">         <span class="string">'break_reconnect'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">     ];</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// PDO连接参数</span></span><br><span class="line">     <span class="keyword">protected</span> $params = [</span><br><span class="line">         PDO::ATTR_CASE              =&gt; PDO::CASE_NATURAL,</span><br><span class="line">         PDO::ATTR_ERRMODE           =&gt; PDO::ERRMODE_EXCEPTION,</span><br><span class="line">         PDO::ATTR_ORACLE_NULLS      =&gt; PDO::NULL_NATURAL,</span><br><span class="line">         PDO::ATTR_STRINGIFY_FETCHES =&gt; <span class="keyword">false</span>,</span><br><span class="line">         PDO::ATTR_EMULATE_PREPARES  =&gt; <span class="keyword">false</span>,</span><br><span class="line">     ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有很多很多代码，上面主要是默认的config和PDO连接参数的初始化。 因为是抽象类所以实例化的是他们的各个子类。</p><h4 id="builder的工厂模式"><a href="#builder的工厂模式" class="headerlink" title="builder的工厂模式"></a>builder的工厂模式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBuilder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;builder)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;builder;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getConfig(<span class="string">'builder'</span>) ?: <span class="string">'\\think\\db\\builder\\'</span> . ucfirst(<span class="keyword">$this</span>-&gt;getConfig(<span class="string">'type'</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里是通过子连接器的属性，用工厂模式引入的相对于的构建器和Db入口类的思想也是一样的。<br><strong>其余的都是各种的数据库基本操作了</strong></p><h3 id="Query类"><a href="#Query类" class="headerlink" title="Query类"></a>Query类</h3><p>Query类封装了各种Sql原生语句实现的方法，算是独立出来的，因为model也可以使用这个。</p><h3 id="Db类总结"><a href="#Db类总结" class="headerlink" title="Db类总结"></a>Db类总结</h3><p>TP5的Db类差不多就是如上，思想主要是通过工厂模式来通过同一入口，创建不同的实例，其中查询时封装了一层Pdo层，<br>即方便了用户使用，也可以增强安全性。总之十分收益。不过我的描述不行，很多想写的不知道怎么写，再接再厉。<br>TP5源码分析系列第一步OK。</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVVM框架实现探究</title>
      <link href="/2018/08/06/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84mvvm/"/>
      <url>/2018/08/06/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84mvvm/</url>
      <content type="html"><![CDATA[<h3 id="前摘"><a href="#前摘" class="headerlink" title="前摘"></a>前摘</h3><p>2018-11-01在原文基础上，新添加一些东西，随着之后的深入会添加更多的内容。<br><a id="more"></a></p><h3 id="MVVM框架的要点"><a href="#MVVM框架的要点" class="headerlink" title="MVVM框架的要点"></a>MVVM框架的要点</h3><p>目前前端js框架三巨头是Vue.js, React, AngularJs。共同点都是以数据为中心，摆脱了操作Dom节点的困恼。<br>因为我本人目前主要是以Vue.js为主,React为辅，所以目前的内容主要是以Vue.js设计模式和代码作为参考，React作为对比。</p><h3 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h3><p>说起Vue，值得一提的就是数据双向绑定了。<br>其实现原理就是通过属性拦截器+订阅发布模式。<br>前段时间Vue作者尤雨溪表示对Proxy很感兴趣，但是至少Vue3之前是通过Object.defineproperty实现的。<br>其设计原理图如下:<br><img src="https://github.com/yuhongjing/img-folder/raw/master/img/mvvm.jpg" alt=""></p><h3 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h3><p>我们可以使用Vue-router来实现SPA(单页面web应用),其原理是通过H5的history和hash欺骗路由来实现的。<br>单页面应用的优点在于，让用户在webapp能够感受到nativeapp的流畅，能够构建mvc的开发模式。<br>但是其缺点也非常明显，首页加载缓慢，首屏数据无法被SEO检测，Ajax相关，所以一般还需要SSR(服务端渲染)来解决。  </p><h3 id="小demo实现Vue-js数据双向绑定，自定义属性等。"><a href="#小demo实现Vue-js数据双向绑定，自定义属性等。" class="headerlink" title="小demo实现Vue.js数据双向绑定，自定义属性等。"></a>小demo实现Vue.js数据双向绑定，自定义属性等。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>mvvm模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; test &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Mvvm(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            test: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            reset() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.test = <span class="string">""</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mvvm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)  &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; el, data, methods &#125; = options;</span><br><span class="line">        <span class="keyword">this</span>.methods = methods;</span><br><span class="line">        <span class="keyword">this</span>.target = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 初始化dispather</span></span><br><span class="line">        <span class="keyword">this</span>.observe(<span class="keyword">this</span>, data);</span><br><span class="line">        <span class="comment">// 初始化watcher</span></span><br><span class="line">        <span class="keyword">this</span>.compile(<span class="built_in">document</span>.getElementById(el));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    observe(root, data) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="keyword">this</span>.defineReactive(root, key, data[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个数据绑定订阅发布</span></span><br><span class="line">    defineReactive(root, key, value) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> value == <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.observe(value, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> dep = <span class="keyword">new</span> Dispather();</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(root, key, &#123;</span><br><span class="line">            set(newValue) &#123;</span><br><span class="line">                <span class="keyword">if</span>(value == newValue) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                value = newValue;</span><br><span class="line">                <span class="comment">// 发布</span></span><br><span class="line">                dep.notify(newValue);</span><br><span class="line">            &#125;,</span><br><span class="line">            get() &#123;</span><br><span class="line">                <span class="comment">// 订阅</span></span><br><span class="line">                dep.add(<span class="keyword">this</span>.target);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译</span></span><br><span class="line">    compile(dom) &#123;</span><br><span class="line">        <span class="keyword">const</span> nodes = dom.childNodes;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">            <span class="comment">// 元素节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> attrs = node.attributes;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> attr <span class="keyword">of</span> attrs) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(attr.name == <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                        <span class="keyword">const</span> name = attr.value;</span><br><span class="line">                        node.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">                            <span class="keyword">this</span>[name] = e.target.value</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">this</span>.target = <span class="keyword">new</span> Watcher(node, <span class="string">'input'</span>);</span><br><span class="line">                        <span class="keyword">this</span>[name];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(attr.name == <span class="string">'@click'</span>) &#123;</span><br><span class="line">                        <span class="keyword">const</span> name = attr.value;</span><br><span class="line">                        node.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.methods[name].bind(<span class="keyword">this</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// text节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.nodeType == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">                <span class="keyword">const</span> match = node.nodeValue.match(reg);</span><br><span class="line">                <span class="keyword">if</span>(match) &#123;</span><br><span class="line">                    <span class="keyword">const</span> name = match[<span class="number">1</span>].trim();</span><br><span class="line">                    <span class="keyword">this</span>.target = <span class="keyword">new</span> Watcher(node, <span class="string">'text'</span>);</span><br><span class="line">                    <span class="keyword">this</span>[name];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispather</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.watchers = [];</span><br><span class="line">    &#125;</span><br><span class="line">    add(watcher) &#123;</span><br><span class="line">        <span class="keyword">this</span>.watchers.push(watcher);</span><br><span class="line">    &#125;</span><br><span class="line">    notify(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.watchers.forEach(<span class="function"><span class="params">watcher</span> =&gt;</span> watcher.update(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(node, type) &#123;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    update(value) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.type == <span class="string">'input'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.node.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.type == <span class="string">'text'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.node.nodeValue = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win10激活</title>
      <link href="/2018/05/31/Win10%E6%BF%80%E6%B4%BB/"/>
      <url>/2018/05/31/Win10%E6%BF%80%E6%B4%BB/</url>
      <content type="html"><![CDATA[<h3 id="Windows10家庭版和专业版的激活方法"><a href="#Windows10家庭版和专业版的激活方法" class="headerlink" title="Windows10家庭版和专业版的激活方法"></a>Windows10家庭版和专业版的激活方法</h3><p>几句命令即可，谁用谁知道<br><a id="more"></a></p><h3 id="ID码"><a href="#ID码" class="headerlink" title="ID码"></a>ID码</h3><p>先进入系统设置，输入对应的ID码<br>win10家庭版ID:00342-34947-91204-AAOEM<br>win10专业版ID:W269N-WFGWX-YVC9B-4J6C9-T83GX    </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>输入以下命令:<code>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</code><br>弹出窗口提示：“成功的安装了产品密钥”。  </li><li>继续输入以下命令：<code>slmgr /skms zh.us.to</code><br>弹出窗口提示：“密钥管理服务计算机名成功的设置为zh.us.to”。  </li><li>接下来输入以下命令：<code>slmgr /ato</code><br>时将弹出窗口提示：“成功的激活了产品”。  </li></ol><p>激活完毕!</p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Linux重启后DNS被重写</title>
      <link href="/2018/05/30/%E8%A7%A3%E5%86%B3Linux%E9%87%8D%E5%90%AF%E5%90%8EDNS%E8%A2%AB%E9%87%8D%E5%86%99/"/>
      <url>/2018/05/30/%E8%A7%A3%E5%86%B3Linux%E9%87%8D%E5%90%AF%E5%90%8EDNS%E8%A2%AB%E9%87%8D%E5%86%99/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人的系统是’Ubuntu18.04 LTS’，而网上的教程一般是16.X之前的版本，所以说按照网上的办法修改什么base,tail,head，都是不可以的。<br>右键进入终端输入命令’cat /etc/resolv.conf’可以查看到当前的DNS配置文件，默认是没有什么谷歌，电信等DNS的，需要我们自己配置。而配置后重启计算机，刚才配置的又不见了。这是一个在linux系统下比较常见的问题。下面就是我的解决方法。<br><a id="more"></a></p><h3 id="修改文件为只读"><a href="#修改文件为只读" class="headerlink" title="修改文件为只读"></a>修改文件为只读</h3><p>网上的很多方法，我都已经试过了，都不能有效的解决我的问题。但是，其实问题很简单，将文件设置为只读即可。<br>首先，先手动添加DNS，命令如下’sudo gedit /etc/resolv.conf’即可编辑。<br>然后，将文件更改为只读，命令如下’sudo chattr +i /etc/resolv.conf’即可。<br>现在，就算重启也不会出现DNS被重置的情况了。  </p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>‘sudo chattr +i /etc/resolv.conf’当吧’+i’改为’-i’时，即为可以通过超级用户更改。  </p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单电脑管理多github账户</title>
      <link href="/2018/05/26/%E5%8D%95%E7%94%B5%E8%84%91%E7%AE%A1%E7%90%86%E5%A4%9Agithub%E8%B4%A6%E6%88%B7/"/>
      <url>/2018/05/26/%E5%8D%95%E7%94%B5%E8%84%91%E7%AE%A1%E7%90%86%E5%A4%9Agithub%E8%B4%A6%E6%88%B7/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有些时候，可能需要一台电脑连接两个github的账号，或者一台电脑同时需要连接两个平台，例如码云，github等。所以这个时候我们需要在一台电脑上配置多个SSH-Key。<br><a id="more"></a></p><h3 id="建立多个SSH"><a href="#建立多个SSH" class="headerlink" title="建立多个SSH"></a>建立多个SSH</h3><p>首先需要生成多个SSH-key,例如下面就生成了两个SSH-key<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"one@gmail.com"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"two@gmail.com"</span></span></span><br></pre></td></tr></table></figure></p><p>ps: 不要一直按enter，需要新的命名，否则会覆盖。(默认文件名为id_rsa)  </p><h3 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h3><h4 id="打开ssh-agent"><a href="#打开ssh-agent" class="headerlink" title="打开ssh-agent"></a>打开ssh-agent</h4><p>如果你是github官方的bash：<br><code>$ ssh-agent -s</code><br>如果你是其它，比如msysgit：<br><code>$ eval $(ssh-agent -s)</code></p><h4 id="添加私钥-1"><a href="#添加私钥-1" class="headerlink" title="添加私钥"></a>添加私钥</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id_rsa_one</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">$ ssh-add ~/.ssh/id_rsa_two</span></span><br></pre></td></tr></table></figure><h3 id="创建config配置"><a href="#创建config配置" class="headerlink" title="创建config配置"></a>创建config配置</h3><p>在建立的config文件下添加如下代码<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host pxy<span class="selector-class">.github</span><span class="selector-class">.com</span></span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_pxy</span><br></pre></td></tr></table></figure></p><h3 id="部署SSH-key"><a href="#部署SSH-key" class="headerlink" title="部署SSH key"></a>部署SSH key</h3><p>在网站的SSH上面把文件名为*.pub的内容复制进入即可。</p><h3 id="远程调试测试"><a href="#远程调试测试" class="headerlink" title="远程调试测试"></a>远程调试测试</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh –T one<span class="selector-class">.github</span><span class="selector-class">.com</span></span><br><span class="line"></span><br><span class="line">$ ssh –T two<span class="selector-class">.github</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="注销全局用户配置"><a href="#注销全局用户配置" class="headerlink" title="注销全局用户配置"></a>注销全局用户配置</h4><p>首先注册全局用户的配置，然后进入文件单独配置。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--unset --global user.name</span><br><span class="line">git<span class="built_in"> config </span>--unset --global user.eamil</span><br></pre></td></tr></table></figure></p><h4 id="使用的区别"><a href="#使用的区别" class="headerlink" title="使用的区别"></a>使用的区别</h4><p>原本的使用方式<br><code>$ git clone git@github.com: one的用户名/learngit.git</code><br>现在的使用方式<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github<span class="selector-class">.com</span>: one的用户名/learngit.git</span><br><span class="line"></span><br><span class="line">$ git clone git@pxy<span class="selector-class">.github</span><span class="selector-class">.com</span>: two的用户名/learngit.git</span><br></pre></td></tr></table></figure></p><p>ps.@后面的地址为我们config配置的Host字段值。从而区分是哪一个用户的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好吧，还是有点坑的了。不过玩过一次后，理清楚顺序后，还是比较清晰的。</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHPstorm Xdebug工具安装</title>
      <link href="/2018/05/16/Xdebug%E5%AE%89%E8%A3%85/"/>
      <url>/2018/05/16/Xdebug%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="Xdebug介绍"><a href="#Xdebug介绍" class="headerlink" title="Xdebug介绍"></a>Xdebug介绍</h3><p>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。<br>我们可以使用Xdebug对php代码进行断点调试，能够清楚的看清楚每个地方变量的值，不用再通过<code>echo</code>和<code>var_dump</code>来输出变量了。<br><a id="more"></a>  </p><h3 id="在PHPStorm下安装Xdebug工具"><a href="#在PHPStorm下安装Xdebug工具" class="headerlink" title="在PHPStorm下安装Xdebug工具"></a>在PHPStorm下安装Xdebug工具</h3><pre><code>1. 首先我们需要知道当前客户端的PHP版本，新建一个PHP文件，输入PHPINFO()函数即可。  2. 然后Ctrl + F搜索Xdebug，如果没有即表明的确没有安装Xdebug。  3. 浏览器输入Xdebug就能看见官网，点击Download，进入页面有一个Releases版本选项，点击进入。4. 然后回到php的info页面，点击查看源代码，全部复制进入Xdebug的文本框，即可看到当前PHP适应的Xdebug版本。  5. 根据出现的提示，将文件下载后，复制进目标文件内。  6. 然后在php.ini文件内添加如下信息，其中第一行复制于网站的代码  [xdebug];第一行需要复制网站上的代码zend_extension = D:\xampp\php\ext\php_xdebug-2.6.0-7.2-vc15.dllxdebug.remote_enable=1xdebug.remote_handler=dbgpxdebug.remote_mode=reqxdebug.remote_host=localhostxdebug.remote_port=9000xdebug.idekey=&quot;PHPSTORM&quot;7. 重新打开phpinfo文件，Ctrl+F搜索Xdebug如果存在，即表示安装成功。  8. 打开PHPStrom，点击右上角的下箭头，Edit Configurations进入配置需要调试的文件。  9. 配置里面的server，输入localhost即可。10. 点击爬虫图标即可，进行断点调试默认F8下一步。  </code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>调试工具对于寻找错误的效率有特别大的提示，因为编程从某种意义上来说，就是不断的发现错误。  </p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js正则表达式</title>
      <link href="/2018/03/09/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/03/09/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>本文主要记录js正则表达式中的难点:惰性匹配，贪婪匹配，分组组合，反向引用符。</p><h1 id="贪婪匹配与非贪婪匹配"><a href="#贪婪匹配与非贪婪匹配" class="headerlink" title="贪婪匹配与非贪婪匹配"></a>贪婪匹配与非贪婪匹配</h1><p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，<br>而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。<br><a id="more"></a></p><h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><p>默认情况下，正则表达式使用最长的匹配原则，即贪婪匹配原则。<br>举个例子：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">源字符串：aa &lt;<span class="keyword">div</span>&gt;test1&lt;/<span class="keyword">div</span>&gt; bb &lt;<span class="keyword">div</span>&gt;test2&lt;/<span class="keyword">div</span>&gt;cc</span><br><span class="line">贪婪模式的正则表达式:&lt;<span class="keyword">div</span>&gt;.*&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">匹配结果:&lt;<span class="keyword">div</span>&gt;test1&lt;/<span class="keyword">div</span>&gt;bb&lt;<span class="keyword">div</span>&gt;test2&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>这就是贪婪匹配的结果，当第一个div结束后，依旧会向右匹配直到字符串结束。<br>仅从应用角度分析，可以这样认为，贪婪模式，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。</p><h2 id="惰性匹配"><a href="#惰性匹配" class="headerlink" title="惰性匹配"></a>惰性匹配</h2><p>在一些使用NFA引擎的语言中，在匹配优先量词后加上“?”，即变成属于非贪婪模式的量词，也叫做忽略优先量词。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">源字符串：aa &lt;<span class="keyword">div</span>&gt;test1&lt;/<span class="keyword">div</span>&gt; bb &lt;<span class="keyword">div</span>&gt;test2&lt;/<span class="keyword">div</span>&gt;cc</span><br><span class="line">惰性模式的正则表达式:&lt;<span class="keyword">div</span>&gt;.*&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">匹配结果:&lt;<span class="keyword">div</span>&gt;test1&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>当表达式匹配成功后，即结束匹配，不再向右尝试。<br>仅从应用角度分析，可以这样认为，非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。<br><strong>当然这一切的前提是”匹配成功”</strong></p><h1 id="分组组合符与反向引用符"><a href="#分组组合符与反向引用符" class="headerlink" title="分组组合符与反向引用符"></a>分组组合符与反向引用符</h1><p>分组组合符是将表达式中某部分内容组合起来的符号，反向引用符则是用于匹配分组组合捕获到的内容的标识符。<br>在正则表达式中，可以用一对（英文）圆括号创建一个分组。比如([a-z]+)(/d+)这就是两个分组。<br>分组的作用表现在两个方面，一个是同一模式后续的组件中，称之为反向引用(back_reference)，二是替换模式中引用，称之为编号组。  </p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>将第一个模式修改为([a-z]+)(/d+)/1之后现在就能够匹配ABC123ABC,A8A等等类似的字符串。这个修正模式后的/1就叫做方向引用，数字1表示引用模式中的第一个捕获组。<br><strong>再来一个例子:\w\w可以匹配”ac,bd,ef”等等,但是\w/1就只能匹配”aa,cc,dd,ee”等相同的字符，这个反向引用匹配的字符与捕获组是一致的。</strong><br>实际应用比如标签符&lt;(h[1-6])&gt;/w+&lt;//1&gt;这样就可以匹配h1到h6的标签符了。如果不反向引用就可以导致不对称的标签符，而反向引用是一致的。  </p><h2 id="替换模式"><a href="#替换模式" class="headerlink" title="替换模式"></a>替换模式</h2><p>编号组的概念也是建立在匹配模式中的分组之上的。它与反向引用的区别在于，编号组是在替换模式中使用的一个概念。<br>例子：([A-Z]{3})(/d{2})为例，该模式匹配ABC12,CDS56等3个字母2个数字的的字符序列。如果要在字母和数字间插入一个空格或者连字符作为分隔符，就可以在替换模式中使用编号组，比如：<br>$1-$2，其中$1就是([A-Z]{3}),$2就是(/d{2}),连字符就是-。这样就完成了需要的功能。<br>$1就相当于那一整个编号组。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有时候也将在替换模式中使用的编号组称为反向引用。所以,可以认为无论是/1还是$1还是${date},只是因地制宜地使用了不同的形式而已，在本质上它们都是反向引用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一遍又一遍的学习正则表达式，这些难点总是使用时候就忘了，忘了又看。一直没有总结下，这一次重新学习基础，就总结一下这非常重要的正则表达式吧。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流逝的风</title>
      <link href="/2018/02/17/%E6%B5%81%E9%80%9D%E7%9A%84%E9%A3%8E/"/>
      <url>/2018/02/17/%E6%B5%81%E9%80%9D%E7%9A%84%E9%A3%8E/</url>
      <content type="html"><![CDATA[<h1 id="风曾来自何方"><a href="#风曾来自何方" class="headerlink" title="风曾来自何方"></a>风曾来自何方</h1><p>世间的万物都会随着时间慢慢流逝，无论宏伟的高山或是低浅的河谷。随着时间，它们终将不复从前的模样。<br>过去的已经过去，但是还有谁能记得那曾经的过去，那曾经细细研磨的过去。<br>刺破云际的高峰，曾经也是一座小土堆；平静的小溪，曾经也是一条湍急的河流。<br>一阵微风轻拂我的面容，夹杂着远方的花香，我轻轻的嗅着，感受来自远方的问候。风儿来自何处？<br>它是否也曾越过洋流，也曾翻过高山，也曾与蝴蝶起舞。如今也将越过我，去往更遥远的天河。<br>我仍在轻嗅着这微风的香气，而风已经离去……<br><a id="more"></a></p><h1 id="风欲飘向何处"><a href="#风欲飘向何处" class="headerlink" title="风欲飘向何处"></a>风欲飘向何处</h1><p>我知道风是不能挽留的，亦是不能追逐的，我只能站在原地静静的看它离去。<br>再见了！朋友！我无力的在心中哭泣。为不能挽留的一切，哭泣。  </p><h1 id="风止于我心中"><a href="#风止于我心中" class="headerlink" title="风止于我心中"></a>风止于我心中</h1><p>谁能知道风与我相遇的那一刻？波光粼粼的湖边，夕阳透过随风舞动的柳枝将一束束的光芒印在你的脸上。<br>坐在长椅上，你的目光凝视着前方，直到我的出现，甜蜜的笑容逐渐浮现在你的脸上。<br>我曾错过无数的风景，每一刻都印成照片，贴在我的心墙。如今我的小裕，我不能承受再错过美丽的你了。<br>爱你，珍惜有你的每一刻。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>怀旧，是我最大的感情波动。人说无事夏迎春，可我却时常陷入过去。<br>我心心念念的风，它的曾经包括它的未来我都未曾参与，仅在某一刻与我擦肩而过，但我却深深不忘。<br>无论风儿来自何处，无论风儿飘向何方，但是风儿永远停在了我的心中。至少那一刻，那一瞬，风儿是永远属于我一人的。</p>]]></content>
      
      <categories>
          
          <category> 个人文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5年的计划</title>
      <link href="/2018/02/02/5%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/"/>
      <url>/2018/02/02/5%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>Quora有人提出一个问题：作为一个23岁的学生，现在开始做一些什么事情可以在5年之后觉得受益匪浅？<br>其中有一个6千多like的答案，觉得很有用，分享给大家~<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There's already a lot here <span class="keyword">and</span> you probably stopped reading,   </span><br><span class="line"><span class="keyword">but</span> I couldn't resist writing a note <span class="keyword">to</span> <span class="keyword">my</span> <span class="number">23</span> <span class="built_in">year</span> old self:</span><br></pre></td></tr></table></figure><p>虽然很长你读不完，不过我真的很想把这些写给23岁的我：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> you <span class="keyword">do</span> anything,<span class="keyword">do</span> this first one:learn how <span class="keyword">to</span> work hard <span class="keyword">and</span> stick <span class="keyword">with</span> something.  </span><br><span class="line">Learn how <span class="keyword">to</span> turn <span class="keyword">off</span> Facebook <span class="keyword">and</span> control your addiction <span class="keyword">to</span> social media.    </span><br><span class="line">You<span class="comment">'ll instantly be ahead of 90% of your generation.</span></span><br></pre></td></tr></table></figure></p><p>先学会这一点：无论做什么事情，都努力，坚持的做完。<br>一旦你学会了控制自己不要去玩社交媒体，学会了不去刷Facebook，你就已经比你同辈90%的人都要进步了。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Video games are a <span class="built_in">time</span> sink.If you can play <span class="keyword">for</span> an hour <span class="keyword">and</span> <span class="built_in">say</span> <span class="string">"That was fun,  </span></span><br><span class="line"><span class="string">let's do something else"</span> <span class="keyword">then</span> you're ok.Otherwise,just <span class="keyword">get</span> rid <span class="keyword">of</span> them.</span><br></pre></td></tr></table></figure></p><p>玩游戏就跟浪费时间没区别。除非你真能控制住只玩一个小时之后愉快的去干别的事情，不然还是戒了吧。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pick up <span class="keyword">an</span> athletic hobby that you can <span class="built_in">do</span> through <span class="keyword">the</span> years,</span><br><span class="line"><span class="keyword">or</span> your sedentary academic lifestyle will <span class="built_in">do</span> horrible things   </span><br><span class="line"><span class="built_in">to</span> your posture,back,<span class="keyword">and</span> gut.</span><br></pre></td></tr></table></figure></p><p>选一项运动当成兴趣，不然你的学术生涯会把你的身子毁掉。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Learn how <span class="keyword">to</span> deal <span class="keyword">with</span> interpersonal conflicts.  </span><br><span class="line">Read Crucial Conversations <span class="keyword">and</span> practice - it<span class="comment">'s a lifechanger   </span></span><br><span class="line">(shameless plug:Crucial Conversations Tools <span class="keyword">for</span> Talking  </span><br><span class="line"><span class="keyword">When</span> Stakes Are High,Second Edition)</span><br></pre></td></tr></table></figure></p><p>学会处理人际冲突…上面的这本书就不错<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Learn how <span class="keyword">to</span> talk <span class="keyword">on</span> <span class="keyword">the</span> phone <span class="keyword">with</span> people you don't know.  </span><br><span class="line">It still terrifies most people.Get a phone sales job <span class="keyword">and</span> quit <span class="keyword">after</span> a few weeks.</span><br></pre></td></tr></table></figure></p><p>学会怎么在电话上跟陌生人交流。去找一个电话销售的工作，干几个礼拜辞职就好。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Start</span> <span class="keyword">some</span> kind <span class="keyword">of</span> <span class="keyword">little</span> side ventrue <span class="keyword">to</span> learn entrepreneurial principles.  </span><br><span class="line"><span class="keyword">Start</span> a window washing business,buy   <span class="keyword">and</span> sell <span class="keyword">stuff</span> <span class="keyword">on</span> Craigslist,<span class="keyword">do</span> anything.  </span><br><span class="line">You might need them <span class="keyword">if</span> you<span class="string">'re in between jobs.</span></span><br></pre></td></tr></table></figure></p><p>做一些小活来学会创业。比如洗窗户啦，在Craigslist上卖点小玩意啦。以后工作中你会用得到这些技能。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Take</span> a course <span class="keyword">on</span> statistics <span class="keyword">and</span> how they<span class="comment">'re misused,  </span></span><br><span class="line">specifically how faulty causal arguments are made.  </span><br><span class="line">It will change the way you approach almost any discussion,quantitative <span class="keyword">or</span> <span class="keyword">not</span>.</span><br></pre></td></tr></table></figure></p><p>上一些统计学的课，知道他们是怎么被误用的。将来对于识别一些谬论很有帮助。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Always have a private place where you can talk <span class="keyword">out</span> loud <span class="keyword">to</span> God every day.  </span><br><span class="line">Even <span class="keyword">if</span> you<span class="symbol">'re</span> <span class="keyword">not</span> relligious <span class="keyword">or</span> don<span class="symbol">'t</span> believe <span class="keyword">in</span> God.  </span><br><span class="line">Talk <span class="keyword">out</span> loud <span class="keyword">to</span> the universe.Sort <span class="keyword">out</span> your thoughts,verbalize them,  </span><br><span class="line"><span class="keyword">and</span> <span class="keyword">then</span> write down what comes <span class="keyword">to</span> mind.  </span><br><span class="line">Something wiser than you <span class="keyword">is</span> listening <span class="keyword">and</span> responding,   </span><br><span class="line">even <span class="keyword">if</span> it<span class="symbol">'s</span> just another <span class="literal">side</span> <span class="keyword">of</span> you.</span><br></pre></td></tr></table></figure></p><p>找一个属于自己的可以大声跟上帝说话的地方。哪怕你不信教，你也可以试着大声跟宇宙说话吧。理清你的思绪，然后写下来。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Use</span> http://Mint.com <span class="keyword">to</span> track your expenses.  </span><br><span class="line">Make a budget <span class="keyword">and</span> learn how <span class="keyword">to</span> stick <span class="keyword">to</span> it.  </span><br><span class="line">Learn <span class="keyword">to</span> live lean how <span class="keyword">while</span> you can,so you won<span class="symbol">'t</span> be forced <span class="keyword">to</span> later <span class="keyword">on</span>.</span><br></pre></td></tr></table></figure></p><p>用记录软件记录每天的开销，学会做预算。学会过一些简朴的生活。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Learn <span class="keyword">a</span> foreign language,but only <span class="keyword">if</span> you anticipate <span class="keyword">using</span> <span class="keyword">it</span>.</span><br></pre></td></tr></table></figure></p><p>学一门平常会用的外语。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Learn how <span class="keyword">to</span> network.  </span><br><span class="line">Read <span class="string">"Never Eat Alone."</span>Hint:<span class="keyword">it</span>'s <span class="keyword">about</span> doing things <span class="keyword">for</span> other people.</span><br></pre></td></tr></table></figure></p><p>学会处理人际关系。这就是怎么跟人打交道的学问。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Learn how <span class="keyword">to</span> cook tasty,cheap food.</span><br></pre></td></tr></table></figure></p><p>学会做一些简单又美味的饭。。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Find music <span class="keyword">that</span> inspires you <span class="keyword">and</span> makes you feel alive.  </span><br><span class="line">Listen <span class="keyword">to</span> <span class="keyword">it</span> <span class="keyword">every</span> morning <span class="keyword">and</span> <span class="keyword">if</span> <span class="keyword">it</span>'s something embarrassing  </span><br><span class="line">just don't <span class="keyword">tell</span> your friends <span class="keyword">about</span> <span class="keyword">it</span>.</span><br></pre></td></tr></table></figure></p><p>找一些能够激励你的音乐。每天早上起床后听着它。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Save up <span class="keyword">a</span> few thousand dollars <span class="keyword">and</span> go somewhere crazy <span class="keyword">with</span> <span class="keyword">a</span> few friends.  </span><br><span class="line">Live <span class="keyword">in</span> <span class="keyword">a</span> hostel <span class="keyword">for</span> <span class="keyword">a</span> few weeks.  </span><br><span class="line">It will change your life <span class="keyword">and</span> you will think about <span class="keyword">it</span> <span class="keyword">forever</span>.</span><br></pre></td></tr></table></figure></p><p>攒个几千块钱，可以跟朋友一起出去疯狂一次。比如在青年旅店住上几个星期，会改变你整个人生的看法。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When someone promises you easy money,run the other way<span class="selector-class">.Yes</span>,it is <span class="selector-tag">a</span> scam.</span><br></pre></td></tr></table></figure></p><p>如果有人给你很容易挣钱的方法，别信，基本都是骗子。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Read <span class="selector-tag">a</span> book <span class="selector-tag">a</span> week<span class="selector-class">.When</span> you get ridiculously wealthy,  </span><br><span class="line">read <span class="selector-tag">a</span> book <span class="selector-tag">a</span> day<span class="selector-class">.Read</span> fiction too.</span><br></pre></td></tr></table></figure></p><p>每周读一本书，等你称为富豪时，每天读一本。</p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>可能是最近我玩的太疯狂了，太堕落了。经常都能看见类似这样的文章。静下心来认真看，的确有道理。人的一生需要不停的学习再学习。<br>有一个场景我总记得，2005年，温家宝总理探望93岁高龄的钱学森，向他咨询教育方面的意见。在这次交流中，钱学森向温家宝发出了一个严峻的疑问：为什么我们的学校总是培养不出杰出人才？这就是著名的“钱学森之问”。钱学森说：我认为人不但要有科学技术，而且还要文化艺术跟音乐。<br>人的一生都需要来自各方面的学习，科学，艺术，生活，方方面面。向优秀的人学习优秀的品质。</p>]]></content>
      
      <categories>
          
          <category> 个人文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue环境搭建</title>
      <link href="/2017/11/28/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/11/28/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="环境配置流程"><a href="#环境配置流程" class="headerlink" title="环境配置流程"></a>环境配置流程</h2><ol><li>安装Node.js</li><li>安装Vue-cli脚手架</li><li>初始化一个项目</li><li>模块依赖安装</li><li>启动<a id="more"></a></li></ol><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node.js安装后，在<span class="keyword">cmd</span><span class="bash">中输入node -v 和 npm -v 如果出现版本号即安装成功</span></span><br><span class="line"><span class="bash">全局安装Vue  在cmd输入npm install -g vue </span></span><br><span class="line"><span class="bash">全局安装脚手架 npm install -g vue-cli</span></span><br><span class="line"><span class="bash">创建一个项目 到目录位置 vue init webpack 项目名</span></span><br><span class="line"><span class="bash">创建模块依赖   npm install </span></span><br><span class="line"><span class="bash">启动项目    npm run dev</span></span><br><span class="line"><span class="bash">发布项目    npm run build</span></span><br></pre></td></tr></table></figure><p>ps.如果安装过慢，可以使用国内的镜像cnpm!</p>]]></content>
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BAT fighting</title>
      <link href="/2017/10/24/BAT-fighting/"/>
      <url>/2017/10/24/BAT-fighting/</url>
      <content type="html"><![CDATA[<h1 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h1><p><strong>hexo搭建的博客第一篇文章</strong>  </p><h2 id="以此明志"><a href="#以此明志" class="headerlink" title="以此明志   "></a><strong>以此明志 </strong>  </h2><blockquote><p>坚持努力到明年今日进入自己的梦想的公司(BAT)fighting!!!  </p><blockquote><p>为此定几个小目标  </p></blockquote></blockquote><pre><code>time:2017-10-24(程序员节)   </code></pre><p>1.熟练几门前端语言(html5+javascript+css3)<br>2.熟练几门后台语言(php7+python5)<br>3.熟练几门框架(vue.js+bootstrap3+Thinkphp5+laravel5.4)<br>4.数据库设计(mysql)<br><a id="more"></a><br>5.看《数据结构及算法分析第二版》《剑指offer》《编码:隐匿在计算机软硬件背后的语言》<br>《深入理解计算机系统》<br>6.了解(Jquery,sass,微信,Go语言,Java,C++,.net)<br>7.有多的时间就看看TCP/IP还有操作系统的死锁，银行家算法，哲学家思想什么的<br>8.嗯哼。。。。就这样吧！！加油吧!!<br><img src="https://github.com/yuhongjing/img-folder/raw/master/img/%5BGIRAP3@T9%7DVCXDPO9Y522F.png" alt="image">  </p><h1 id="还愿-2018-09-28"><a href="#还愿-2018-09-28" class="headerlink" title="还愿(2018/09/28)"></a>还愿(2018/09/28)</h1><p>正好一年！！我完成了我的愿望了！！！！！！！</p>]]></content>
      
      <categories>
          
          <category> 个人文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志鸡汤 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
